<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zoomdong&#39;s blog</title>
  
  <subtitle>A story about myself</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zoomdong.site/"/>
  <updated>2020-05-03T14:54:06.747Z</updated>
  <id>http://zoomdong.site/</id>
  
  <author>
    <name>zoomdong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ts一些技巧总结</title>
    <link href="http://zoomdong.site/2020/05/03/ts-higher-1/"/>
    <id>http://zoomdong.site/2020/05/03/ts-higher-1/</id>
    <published>2020-05-03T14:51:26.000Z</published>
    <updated>2020-05-03T14:54:06.747Z</updated>
    
    <content type="html"><![CDATA[<h2 id="interface-amp-amp-type"><a href="#interface-amp-amp-type" class="headerlink" title="interface &amp;&amp; type"></a>interface &amp;&amp; type</h2><p>两者几乎没有区别,但是 <code>interface</code> 可以合并多个相同的 <code>interface</code>,而 <code>type</code> 只能使用 <code>&amp;</code> 进行连接。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  a: <span class="built_in">number</span>;</span><br><span class="line">  b: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = &#123;</span><br><span class="line">  a: <span class="built_in">number</span>;</span><br><span class="line">  b: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>区别:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  a: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  b: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a: A = &#123;</span><br><span class="line">  a: <span class="number">3</span>,</span><br><span class="line">  b: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h2><p><code>typeof</code> 可以取某个值的 <code>type</code>:<br>具体使用方法:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a: <span class="built_in">number</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Equal to const b: number = 4</span></span><br><span class="line"><span class="keyword">const</span> b: <span class="keyword">typeof</span> a = <span class="number">4</span></span><br></pre></td></tr></table></figure></p><p>在一些服务端项目里面，我们可以把一些需要的工具塞在<code>context</code>里面去，这个时候就需要<code>typeof</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logger <span class="keyword">from</span> <span class="string">'./lo'</span></span><br></pre></td></tr></table></figure><h2 id="keyof"><a href="#keyof" class="headerlink" title="keyof"></a>keyof</h2><p><code>keyof</code> 和 <code>Object.keys</code> 有些类似，不过 <code>keyof</code> 取的是<code>interface</code>里面的键。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point &#123;</span><br><span class="line">  x: <span class="built_in">number</span>;</span><br><span class="line">  y: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type keys = 'x' | 'y'</span></span><br><span class="line"><span class="comment">// 这里keys会成为一个联合类型</span></span><br><span class="line"><span class="keyword">type</span> keys = keyof Point;</span><br></pre></td></tr></table></figure><p>我们可以使用<code>keyof</code>来实现一个<code>get</code>函数来获取它的属性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  a: <span class="number">3</span>,</span><br><span class="line">  hello: <span class="string">"world"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">object</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, name: K</span>): <span class="title">T</span>[<span class="title">K</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> o[name]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里能同时兼具以下几个优点:</p><ol><li>能够确认结果的返回类型</li><li>能够对<code>key</code>值进行一个约束</li></ol><h2 id="keyof-in"><a href="#keyof-in" class="headerlink" title="keyof, in"></a>keyof, in</h2><p><code>keyof</code> 能够产生一个联合类型，<code>in</code>能够遍历枚举类型。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// T -&gt; "name" | "age"</span></span><br><span class="line"><span class="keyword">type</span> T = keyof Foo</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> keys = <span class="string">'a'</span> | <span class="string">'b'</span></span><br><span class="line"><span class="keyword">type</span> Obj = &#123;</span><br><span class="line">  [p <span class="keyword">in</span> Keys]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// obj -&gt; &#123; a: any, b: any &#125;</span></span><br></pre></td></tr></table></figure></p><p>那么可以写一个将传入的属性变成可选项的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Partial&lt;T&gt; = &#123; [P <span class="keyword">in</span> keyof T]?: T[P] &#125;</span><br></pre></td></tr></table></figure><p>那么使用的时候就可以这样:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Foo &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  age: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A = Partial&lt;Foo&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只能定义 name, age 中的属性，当然也可以不定义</span></span><br><span class="line"><span class="keyword">const</span> a: A = &#123;</span><br><span class="line">  name: <span class="string">'1'</span>,</span><br><span class="line">  age: <span class="string">'3'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>in</code>的主要作用是取联合类型的值。主要用于数组和对象的构造。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> name = <span class="string">'firstName'</span> | <span class="string">'lastName'</span></span><br><span class="line"><span class="keyword">type</span> IName = &#123;</span><br><span class="line">  [key <span class="keyword">in</span> name]: <span class="built_in">string</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>但是<code>in</code>是不能用在<code>interface</code>上面，否则会出错。</p><h2 id="ts定义函数"><a href="#ts定义函数" class="headerlink" title="ts定义函数"></a>ts定义函数</h2><p><code>ts</code>中类型系统中的函数为<code>泛型操作符</code>，最简单的方式就是使用<code>type</code>关键字:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a simple operator</span></span><br><span class="line"><span class="keyword">type</span> foo&lt;T&gt; = T;</span><br></pre></td></tr></table></figure><p>上面的代码转成<code>JavaScript</code>之后会成这个样子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">T</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的类型系统中的函数还支持对入参对约束:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对 T 进行约束</span></span><br><span class="line"><span class="keyword">type</span> foo&lt;T <span class="keyword">extends</span> <span class="built_in">string</span>&gt; = T;</span><br></pre></td></tr></table></figure><p>这里就类似于这样的<code>ts</code>代码:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">T: <span class="built_in">string</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样也是能够设置默认值的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> foo&lt;T <span class="keyword">extends</span> <span class="built_in">string</span> = <span class="string">'hello xyx'</span>&gt; = T</span><br></pre></td></tr></table></figure><p>同理:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span> (<span class="params">T: <span class="built_in">string</span> = 'hello xyx'</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> T</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这里是不能像<code>JS</code>里的函数一样支持剩余参数的，但是我们可以通过一些操作模拟出来。</p><h2 id="类型支持条件判断"><a href="#类型支持条件判断" class="headerlink" title="类型支持条件判断"></a>类型支持条件判断</h2><p>可以使用<code>extends</code>关键字来完成这一操作:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">T <span class="keyword">extends</span> U ? X : Y</span><br></pre></td></tr></table></figure><p>结合之前的<code>type</code>这里可以用来模拟一下:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> num = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">type</span> str = <span class="string">'hello xyx'</span></span><br><span class="line"><span class="keyword">type</span> INumber = N <span class="keyword">extends</span> <span class="built_in">number</span> ? <span class="string">'yeah'</span> : <span class="string">'no'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> res1 = INumber&lt;num&gt; <span class="comment">// yeah</span></span><br><span class="line"><span class="keyword">type</span> res2 = INumber&lt;str&gt; <span class="comment">// no</span></span><br></pre></td></tr></table></figure><p>这里我们就相当于实现了一个简单的带判断逻辑的函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;interface-amp-amp-type&quot;&gt;&lt;a href=&quot;#interface-amp-amp-type&quot; class=&quot;headerlink&quot; title=&quot;interface &amp;amp;&amp;amp; type&quot;&gt;&lt;/a&gt;interface &amp;amp;&amp;amp; type&lt;/h2&gt;&lt;p&gt;两者几乎没有区别,但是 &lt;code&gt;interface&lt;/code&gt; 可以合并多个相同的 &lt;code&gt;interface&lt;/code&gt;,而 &lt;code&gt;type&lt;/code&gt; 只能使用 &lt;code&gt;&amp;amp;&lt;/code&gt; 进行连接。&lt;br&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; B = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;区别:&lt;br&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; A &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a: A = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  a: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  b: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>(译)JavaScript 函数式编程</title>
    <link href="http://zoomdong.site/2020/04/24/master-function-programming/"/>
    <id>http://zoomdong.site/2020/04/24/master-function-programming/</id>
    <published>2020-04-23T17:22:38.000Z</published>
    <updated>2020-04-23T17:32:44.060Z</updated>
    
    <content type="html"><![CDATA[<blockquote><ul><li>原文地址：<a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0" target="_blank" rel="noopener">Master the JavaScript Interview: What is Functional Programming?</a></li><li>原文作者：<a href="https://medium.com/@_ericelliott" target="_blank" rel="noopener">Eric Elliott</a></li><li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="noopener">掘金翻译计划</a></li><li>本文永久链接：<a href="https://github.com/xitu/gold-miner/blob/master/TODO1/master-the-javascript-interview-what-is-functional-programming.md" target="_blank" rel="noopener">https://github.com/xitu/gold-miner/blob/master/TODO1/master-the-javascript-interview-what-is-functional-programming.md</a></li><li>译者：<a href="https://github.com/fireairforce" target="_blank" rel="noopener">zoomdong</a></li><li>校对者：<a href="https://github.com/QinRoc" target="_blank" rel="noopener">Roc</a>,<a href="https://github.com/xionglong58" target="_blank" rel="noopener">Long Xiong</a></li></ul></blockquote><p>函数式编程已经成为 JavaScript 领域中一个非常热门的话题。就在几年前，甚至很少有 JavaScript 程序员知道什么是函数式编程，但是我在过去 3 年看到的每个大型应用程序代码库中都大量使用了函数式编程思想。</p><p><strong>函数式编程</strong>（通常缩写为 FP）是通过组合<strong>纯函数</strong>，避免<strong>状态共享</strong>、<strong>可变数据</strong>和<strong>副作用</strong>来构建软件的过程。函数式编程是<strong>声明式</strong>的，而不是<strong>命令式</strong>的，应用程序状态通过纯函数流动。与面向对象编程不同，在面向对象编程中，应用程序状态通常与对象中的方法共享和协作。</p><a id="more"></a><p>函数式编程是一种<strong>编程范式</strong>，这意味着它是一种基于一些基本的、定义性的原则（如上所列）来思考软件构建的方法。其他编程范式包括面向对象编程和面向过程编程。</p><p>与命令式或面向对象的代码相比，函数式代码往往更简洁、更可预测、更易于测试 —— 但如果你不熟悉它以及与之相关的常见模式，函数式代码看起来也会密集得多，而且相关的文档对于新人来说可能是难以理解的。</p><p>如果你开始在 Google 上搜索函数式编程术语，你很快就会遇到一堵学术术语的墙，这对初学者来说是非常可怕的。说它有一个学习曲线是非常保守的说法。但是如果你已经使用 JavaScript 编程了一段时间，那么你很可能已经在实际的软件应用中使用了大量的函数式编程的概念和实用工具。</p><blockquote><p>Don’t let all the new words scare you away. It’s a lot easier than it sounds.</p></blockquote><!--more--><p>最困难的部分是吸收（或者理解）这些词汇。在你开始理解函数式编程的含义之前，上面这个看似简单的定义中有很多需要理解的概念：</p><ul><li>纯函数</li><li>函数组合</li><li>避免状态共享</li><li>避免可变数据</li><li>避免副作用</li></ul><p>换句话说，如果你想知道函数式编程在实践中意味着什么，你必须首先理解这些核心概念。</p><p><strong>纯函数</strong>指的是具有下列特征的函数：</p><ul><li>给定相同的输入，总是得到相同的输出</li><li>没有副作用</li></ul><p>纯函数有许多在函数式编程中很重要的属性，包括<strong>引用透明性</strong>（你可以使用函数一次调用的结果值代替其余对该函数的调用操作，这样并不会对程序产生影响）。阅读<a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976" target="_blank" rel="noopener">“什么是纯函数？”</a>了解更多。</p><p><strong>组合函数</strong>是将两个或两个以上的函数组合起来以产生一个新函数或进行某种计算的过程。例如，<code>f . g</code> 组合（. 的意思是组合）在 JavaScript 中等价于 <code>f(g(x))</code>。理解组合函数是理解如何使用函数式编程构建软件的重要一步。阅读 <a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-function-composition-20dfb109a1a0" target="_blank" rel="noopener">“什么是组合函数？”</a>了解更多。</p><h2 id="状态共享"><a href="#状态共享" class="headerlink" title="状态共享"></a>状态共享</h2><p><strong>状态共享</strong>是指共享作用域中存在的任何变量、对象或内存空间，或者是在作用域之间传递的对象的属性。共享作用域可以包括全局作用域或闭包作用域。通常，在面向对象编程中，通过向其他对象添加属性，在作用域之间共享对象。</p><p>例如，计算机游戏可能有一个主游戏对象，其中的角色和游戏项存储为该对象所拥有的属性。函数式编程避免了状态共享，而是依赖不可变的数据结构和纯计算从现有数据中派生出新数据。有关函数式软件如何处理应用程序状态的更多详细信息，请参阅<a href="https://medium.com/javascript-scene/10-tips-for-better-redux-architecture-69250425af44" target="_blank" rel="noopener">“10个更好的 Redux 架构提示”</a>。</p><p>共享状态的问题在于，为了了解函数的效果，你必须要了解函数使用或影响的每个共享变量的全部历史记录。</p><p>假设你有一个需要保存的 <code>user</code> 对象。<code>saveUser()</code> 函数向服务器上的 API 发出请求。在此过程中，用户使用 <code>updateAvatar()</code> 更改他们的个人头像，并触发另一个 <code>saveUser()</code> 请求。在保存时，服务器发送回一个规范的 <code>user</code> 对象，为了同步服务端或者其他客户端 API 引起的更改，该对象应该替换掉内存中对应的对象。</p><p>不幸的是，第二个响应在第一个响应之前被接收，所以当第一个（现在已经过时了）响应被返回时，新的个人头像会在内存中被删除并替换为旧的个人头像。这就是一个竞争条件的例子 —— 与状态共享相关的非常常见的错误。</p><p>与共享状态相关的另一个常见问题是，更改调用函数的顺序可能会导致一系列故障，因为作用于共享状态的函数依赖于时序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在共享状态下，函数调用的顺序会更改函数调用的结果。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x = &#123;</span><br><span class="line">  val: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x1 = <span class="function"><span class="params">()</span> =&gt;</span> x.val += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x2 = <span class="function"><span class="params">()</span> =&gt;</span> x.val *= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">x1();</span><br><span class="line">x2();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x.val); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个例子和上面完全相同，除了对象名称</span></span><br><span class="line"><span class="keyword">const</span> y = &#123;</span><br><span class="line">  val: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y1 = <span class="function"><span class="params">()</span> =&gt;</span> y.val += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y2 = <span class="function"><span class="params">()</span> =&gt;</span> y.val *= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数调用的顺序被颠倒了</span></span><br><span class="line">y2();</span><br><span class="line">y1();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从而改变了结果的值</span></span><br><span class="line"><span class="built_in">console</span>.log(y.val); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>当避免状态共享时，函数调用的时间和顺序不会更改调用函数的结果。对于纯函数，给定相同的输入，总是得到相同的输出。这使得函数调用时完全独立于其他函数调用，这可以从根本上简化更改和重构。一个函数的变化，或者函数调用的时间不会影响程序的其他部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = &#123;</span><br><span class="line">  val: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x1 = <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, x, &#123; <span class="attr">val</span>: x.val + <span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> x2 = <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, x, &#123; <span class="attr">val</span>: x.val * <span class="number">2</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x1(x2(x)).val); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> y = &#123;</span><br><span class="line">  val: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由于不依赖于外部变量</span></span><br><span class="line"><span class="comment">// 我们不需要不同的函数来操作不同的变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此处故意留空</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为函数不会发生变化</span></span><br><span class="line"><span class="comment">// 所以可以按任意顺序多次调用这些函数</span></span><br><span class="line"><span class="comment">// 而不必更改其他函数调用的结果</span></span><br><span class="line">x2(y);</span><br><span class="line">x1(y);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x1(x2(y)).val); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们使用 <code>Object.assign()</code> 并传入一个空对象作为第一个参数来复制 <code>x</code> 的属性，而不是在原数据上进行修改。在之前的示例中，它相当于从零开始创建一个新对象，而不使用 <code>object.assign()</code>，但这是 JavaScript 中创建现有状态副本的常见模式，而不是使用突变的常见模式，我们在第一个示例中证明了这一点。</p><p>如果仔细观察这个例子中的 <code>console.log()</code>语句，你应该会注意到我已经提到的一些东西：组合函数。回想一下前面，组合函数类似这样：<code>f(g(x))</code>。在本例中，我们将组合 <code>x1 . x2</code> 中的 <code>f()</code> 和 <code>g()</code> 替换为 <code>x1()</code> 和 <code>x2()</code>。</p><p>当然，如果你改变了组合的顺序，输出结果同样会改变。操作的顺序同样很重要。<code>f(g(x))</code> 并不总是和 <code>g(f(x))</code> 相同，但不再重要的是函数外的变量发生了什么，这很重要。对于非纯函数，除非你知道函数使用或影响的每个变量的整个历史记录，否则不可能完全理解函数的作用。</p><p>移除函数调用计时依赖项，就消除了一整类的潜在 bug。</p><h2 id="不变性"><a href="#不变性" class="headerlink" title="不变性"></a>不变性</h2><p><strong>不可变</strong>对象是指创建后不能修改的对象。相反，可变对象是在创建后可以修改的对象。</p><p>不变性是函数式编程的核心概念，因为没有它，程序中的数据流是有损的。状态历史被抛弃，奇怪的 bug 可能会潜入你的软件。更多关于不变性的意义，请参阅<a href="https://medium.com/javascript-scene/the-dao-of-immutability-9f91a70c88cd" target="_blank" rel="noopener">“不变性之道”</a>。</p><p>在 JavaScript 中，重要的是不要混淆 <code>const</code> 和不变性。<code>const</code> 创建一个变量名绑定，该绑定在创建后不能重新分配。<code>const</code> 不创建不可变对象。不能更改绑定所引用的对象，但仍然可以更改对象的属性，这意味着使用 <code>const</code> 创建的绑定是可变的，而不是不可变的。</p><p>不可变对象根本不能更改。通过深度冻结对象，可以使值真正不可变。JavaScript 有一种方法可以将对象冻结一层：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">Object</span>.freeze(&#123;</span><br><span class="line">  foo: <span class="string">'Hello'</span>,</span><br><span class="line">  bar: <span class="string">'world'</span>,</span><br><span class="line">  baz: <span class="string">'!'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a.foo = <span class="string">'Goodbye'</span>;</span><br><span class="line"><span class="comment">// Error: Cannot assign to read only property 'foo' of object Object</span></span><br></pre></td></tr></table></figure><p>但是冻结的对象只是表面上不可变。例如，以下对象是可变的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">Object</span>.freeze(&#123;</span><br><span class="line">  foo: &#123; <span class="attr">greeting</span>: <span class="string">'Hello'</span> &#125;,</span><br><span class="line">  bar: <span class="string">'world'</span>,</span><br><span class="line">  baz: <span class="string">'!'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">a.foo.greeting = <span class="string">'Goodbye'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123; a.foo.greeting &#125;</span>, <span class="subst">$&#123; a.bar &#125;</span><span class="subst">$&#123;a.baz&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p>正如你所看到的，冻结对象的顶层基本属性不能改变，但是里面的任何对象属性（包括数组等）仍然可以改变 —— 所以即使是冻结的对象也不是不可变的，除非你遍历整个对象树并冻结每个对象属性。</p><p>在许多函数式编程语言中，有一种特殊的不可变的数据结构称为 <strong>trie 数据结构</strong>（发音同“tree”），它实际上是深度冻结的 —— 这意味着无论属性处于对象层次结构中的哪个层级，都不可以改变。</p><p>Tries 使用了<strong>共享结构</strong>在不可变对象被复制之后为对象共享引用内存地址，该方法使用较少的内存，并且使得在一些操作下的性能得到提升。</p><p>例如，你可以在对象对的根节点进行一致性比较来比较两个对象是否一致。如果一致的话，你就不需要再遍历整个对象树查找差异了。</p><p>JavaScript 中有几个库使用到了 tries，包括 <a href="https://github.com/facebook/immutable-js" target="_blank" rel="noopener">Immutable.js</a> 和 <a href="https://github.com/swannodette/mori" target="_blank" rel="noopener">Mori</a>。</p><p>我尝试过这两种方法，并且倾向于在需要大量不可变状态的大型项目中使用 Immutable.js。有关更多信息，请参见<a href="https://medium.com/javascript-scene/10-tips-for-better-redux-architecture-69250425af44" target="_blank" rel="noopener">“10个更好的Redux架构技巧”</a>。</p><h2 id="副作用"><a href="#副作用" class="headerlink" title="副作用"></a>副作用</h2><p>副作用是指任何应用程序状态的改变都是可以在被调用函数之外观察到的，除了返回值。副作用包括：</p><ul><li>修改任何外部变量或对象属性（例如，全局变量或父函数作用域链中的变量）</li><li>打印日志到控制台</li><li>写入屏幕</li><li>写入文件</li><li>写入网络</li><li>触发任何外部过程</li><li>调用其它有副作用的函数</li></ul><p>在函数式编程中，通常会避免产生副作用，这使得程序的作用更易于理解和测试。</p><p>Haskell 和其他函数语言经常使用 <a href="https://en.wikipedia.org/wiki/Monad_(functional_programming" target="_blank" rel="noopener"><strong>monad</strong></a>) 从纯函数中分离和封装副作用。有关 monad 的话题的深度足以写一本书来讨论，所以我们以后再谈。</p><p>你现在需要知道的是，副作用操作需要与软件的其他部分隔离开来。如果你将副作用与其他的程序逻辑隔离开，你的软件将更容易扩展、重构、调试、测试和维护。</p><p>这就是大多数前端框架鼓励用户在单独的、松散耦合的模块中管理状态和组件渲染的原因。</p><h2 id="通过高阶函数实现可重用性"><a href="#通过高阶函数实现可重用性" class="headerlink" title="通过高阶函数实现可重用性"></a>通过高阶函数实现可重用性</h2><p>函数式编程倾向于重用一组通用的函数式实用程序来处理数据。面向对象编程倾向于将方法和数据集中在对象中。这些协作方法只能对它们被设计用于操作的数据类型进行操作，而且通常只能对特定对象实例中包含的数据进行操作。</p><p>在函数式编程中，任何类型的数据都是平等的。同一个 <code>map()</code> api 可以映射对象、字符串、数字或任何其他数据类型，因为它以一个函数作为参数，该参数适当地处理给定的数据类型。FP 使用了<strong>高阶函数</strong>完成它的通用实用技巧。</p><p>JavaScript 中<strong>函数是头等公民</strong>，这些函数允许，它允许我们将函数作为数据 —— 将其赋给变量、传递给其他函数、从函数返回等等。</p><p><strong>高阶函数</strong>是那些函数作为参数、返回值为函数或两者兼有的函数。高阶函数通常用于：</p><ul><li>使用回调函数、promise、monad 等来抽象或隔离动作、效果或异步流控制。</li><li>创建可以作用于多种数据类型的工具程序</li><li>将一个函数部分地应用于它的参数，或者创建一个柯里化过的函数，以便重用或组合函数</li><li>获取一个函数列表，并返回这些输入函数的一些组合</li></ul><h4 id="容器，函子，列表，和流"><a href="#容器，函子，列表，和流" class="headerlink" title="容器，函子，列表，和流"></a>容器，函子，列表，和流</h4><p>函子是可以映射的。换句话说，它是一个容器，它有一个接口，可用于将函数应用于其中的值。当你看到函子这个词时，你应该想到“可映射”。</p><p>前面我们了解了 <code>map()</code> 工具程序可以作用于各种数据类型。它通过提升映射操作来使用函子 API 来实现这一点。<code>map()</code> 使用的重要流控制操作利用了该接口。对于 <code>array.prototype.map()</code>，容器是一个数组，但是其他数据结构也可以是函子 —— 只要它们提供了映射 API。</p><p>让我们看看 <code>Array.prototype.map()</code> 如何允许你从映射实用程序中提取数据类型，使 <code>map()</code> 可用于任何数据类型。我们将创建一个简单的 <code>double()</code> 映射，它将传入的任何值乘以 2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> doubleMap = <span class="function"><span class="params">numbers</span> =&gt;</span> numbers.map(double);</span><br><span class="line"><span class="built_in">console</span>.log(doubleMap([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])); <span class="comment">// [ 4, 6, 8 ]</span></span><br></pre></td></tr></table></figure><p>如果我们想要在游戏中对目标进行操作以使他们所获得的点数翻倍该怎么办？我们所要做的就是对 <code>double()</code> 函数做一些细微的修改，然后将其传递给 <code>map()</code>，这样一切仍然可以正常工作:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> double = <span class="function"><span class="params">n</span> =&gt;</span> n.points * <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doubleMap = <span class="function"><span class="params">numbers</span> =&gt;</span> numbers.map(double);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubleMap([</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ball'</span>, <span class="attr">points</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'coin'</span>, <span class="attr">points</span>: <span class="number">3</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'candy'</span>, <span class="attr">points</span>: <span class="number">4</span>&#125;</span><br><span class="line">])); <span class="comment">// [ 4, 6, 8 ]</span></span><br></pre></td></tr></table></figure><p>为了使用通用实用函数来操作任意数量的不同数据类型，需要使用像函子和高阶函数这样的抽象，这个概念是很重要的。你将看到一个类似的概念以<a href="https://github.com/fantasyland/fantasy-land" target="_blank" rel="noopener">各种不同的方式应用</a>。</p><blockquote><h1 id="“随着时间推移表示的列表是一个流。”"><a href="#“随着时间推移表示的列表是一个流。”" class="headerlink" title="“随着时间推移表示的列表是一个流。”"></a>“随着时间推移表示的列表是一个流。”</h1></blockquote><p>现在你需要了解的是，数组和函子并不是容器和容器中的值这一概念应用的唯一方式。例如，数组只是事物的列表。随着时间的推移，一个列表是一个流，因此你可以使用相同类型的实用程序来处理传入事件的流 —— 当你开始用 FP 构建真正的软件时，你会看到很多这种情况。</p><h2 id="声明式-vs-命令式"><a href="#声明式-vs-命令式" class="headerlink" title="声明式 vs 命令式"></a>声明式 vs 命令式</h2><p>函数式编程是一种声明性的范式，这意味着程序逻辑的表达没有显式地描述流控制。</p><p><strong>命令式</strong>程序花费几行代码来描述用于实现预期结果的特定步骤 —— <strong>流控制：如何</strong>做事情。</p><p><strong>声明性</strong>程序抽象了流控制过程，花费几行代码来描述<strong>数据流：应该做什么</strong>。<strong>如何</strong>被抽象出来。</p><p>例如，这个<strong>命令式</strong>映射接受一个数字数组，并返回一个新数组，其中每个数字都被乘以2：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doubleMap = <span class="function"><span class="params">numbers</span> =&gt;</span> &#123;  </span><br><span class="line">  <span class="keyword">const</span> doubled = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; numbers.length; i++) &#123;</span><br><span class="line">    doubled.push(numbers[i] * <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> doubled;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubleMap([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])); <span class="comment">// [4, 6, 8]</span></span><br></pre></td></tr></table></figure><p>这个<strong>声明式</strong>映射也做了同样的事情，但是使用<code>Array.prototype.map()</code>函数式实用程序将流控件抽象出来，它允许你更清楚地表示数据流：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> doubleMap = <span class="function"><span class="params">numbers</span> =&gt;</span> numbers.map(<span class="function"><span class="params">n</span> =&gt;</span> n * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(doubleMap([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])); <span class="comment">// [4, 6, 8]</span></span><br></pre></td></tr></table></figure><p><strong>命令式</strong>代码经常使用语句。<strong>语句</strong>是执行某些操作的一段代码。常用的语句包括 <code>for</code>、<code>if</code>、<code>switch</code>、<code>throw</code> 等。</p><p><strong>声明式</strong>代码更多地依赖于表达式。<strong>表达式</strong>是计算某个值的一段代码。表达式通常是函数调用、值和运算符的组合，它们被用于计算出结果。</p><p>下面是表达式的一些例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2 * 2</span><br><span class="line">doubleMap([2, 3, 4])</span><br><span class="line">Math.max(4, 3, 2)</span><br></pre></td></tr></table></figure><p>通常在代码中，你会看到表达式被分配给标识符、从函数返回或传递到函数中。在被分配、返回或传递之前，表达式会先进行计算，实际使用的是其结果值。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>函数式编程倾向于：</p><ul><li>纯函数而不是状态共享或副作用</li><li>不变性而不是可变的数据</li><li>组合函数而不是命令式流控制</li><li>大量通用的、可重用的实用程序，它们使用高阶函数来处理多种数据类型，而不是仅对位于同一位置的数据进行操作的方法</li><li>声明式代码而不是命令式代码（做什么而不是怎么做）</li><li>表达式而不是语句</li><li>容器和高阶函数而不是多态</li></ul><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>学习和练习这些函数式数组的核心功能：</p><ul><li><code>.map()</code></li><li><code>.filter()</code></li><li><code>.reduce()</code></li></ul><h4 id="探索《掌握-JavaScript-面试》系列文章"><a href="#探索《掌握-JavaScript-面试》系列文章" class="headerlink" title="探索《掌握 JavaScript 面试》系列文章"></a>探索《掌握 JavaScript 面试》系列文章</h4><ul><li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-closure-b2f0d2152b36#.ecfskj935" target="_blank" rel="noopener">闭包是什么？</a></li><li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-s-the-difference-between-class-prototypal-inheritance-e4cd0a7562e9#.h96dymht1" target="_blank" rel="noopener">类和原型继承之间的区别是什么</a></li><li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976#.4256pjcfq" target="_blank" rel="noopener">纯函数是什么？</a></li><li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-function-composition-20dfb109a1a0#.i84zm53fb" target="_blank" rel="noopener">组合函数是什么？</a></li><li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0#.jddz30xy3" target="_blank" rel="noopener">函数式编程是什么？</a></li><li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261#.aa7ubggsy" target="_blank" rel="noopener">Promise 是什么？</a></li><li><a href="https://medium.com/javascript-scene/master-the-javascript-interview-soft-skills-a8a5fb02c466" target="_blank" rel="noopener">软技能</a></li></ul><blockquote><p>This post was included in the book “Composing Software”.<strong><a href="https://leanpub.com/composingsoftware" target="_blank" rel="noopener"><br>Buy the Book</a> | <a href="https://medium.com/javascript-scene/composing-software-the-book-f31c77fc3ddc" target="_blank" rel="noopener">Index</a> | <a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976" target="_blank" rel="noopener">\&lt; Previous</a> | <a href="https://medium.com/javascript-scene/a-functional-programmers-introduction-to-javascript-composing-software-d670d14ede30" target="_blank" rel="noopener">Next &gt;</a></strong></p></blockquote><hr><p><strong>Eric Elliott</strong> 是一名分布式系统专家，并且是 <a href="https://leanpub.com/composingsoftware" target="_blank" rel="noopener">《组合软件》</a>和<a href="https://ericelliottjs.com/product/programming-javascript-applications-ebook/" target="_blank" rel="noopener">《编写 JavaScript 程序》</a>这两本书的作者。作为 <a href="https://ericelliottjs.com" target="_blank" rel="noopener">EricElliottJS.com</a> 和 <a href="https://devanywhere.io/" target="_blank" rel="noopener">DevAnywhere.io</a> 的联合创始人，他教开发人员远程工作和实现工作以及生活平衡所需的技能。他创建了加密项目的开发团队，并为他们提供建议。他还在软件体验上为 <strong>Adobe 系统、Zumba Fitness、华尔街日报、ESPN、BBC</strong> 以及包括 <strong>Usher、Frank Ocean、Metallica</strong> 等在内的顶级唱片艺术家做出了贡献。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;原文地址：&lt;a href=&quot;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Master the JavaScript Interview: What is Functional Programming?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;原文作者：&lt;a href=&quot;https://medium.com/@_ericelliott&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eric Elliott&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译文出自：&lt;a href=&quot;https://github.com/xitu/gold-miner&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;掘金翻译计划&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;本文永久链接：&lt;a href=&quot;https://github.com/xitu/gold-miner/blob/master/TODO1/master-the-javascript-interview-what-is-functional-programming.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/xitu/gold-miner/blob/master/TODO1/master-the-javascript-interview-what-is-functional-programming.md&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;译者：&lt;a href=&quot;https://github.com/fireairforce&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;zoomdong&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;校对者：&lt;a href=&quot;https://github.com/QinRoc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Roc&lt;/a&gt;,&lt;a href=&quot;https://github.com/xionglong58&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Long Xiong&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;函数式编程已经成为 JavaScript 领域中一个非常热门的话题。就在几年前，甚至很少有 JavaScript 程序员知道什么是函数式编程，但是我在过去 3 年看到的每个大型应用程序代码库中都大量使用了函数式编程思想。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数式编程&lt;/strong&gt;（通常缩写为 FP）是通过组合&lt;strong&gt;纯函数&lt;/strong&gt;，避免&lt;strong&gt;状态共享&lt;/strong&gt;、&lt;strong&gt;可变数据&lt;/strong&gt;和&lt;strong&gt;副作用&lt;/strong&gt;来构建软件的过程。函数式编程是&lt;strong&gt;声明式&lt;/strong&gt;的，而不是&lt;strong&gt;命令式&lt;/strong&gt;的，应用程序状态通过纯函数流动。与面向对象编程不同，在面向对象编程中，应用程序状态通常与对象中的方法共享和协作。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>electron开发基本概念介绍</title>
    <link href="http://zoomdong.site/2020/01/10/electron-1/"/>
    <id>http://zoomdong.site/2020/01/10/electron-1/</id>
    <published>2020-01-10T07:22:48.000Z</published>
    <updated>2020-01-10T07:24:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习electron对于个人的好处"><a href="#学习electron对于个人的好处" class="headerlink" title="学习electron对于个人的好处"></a>学习electron对于个人的好处</h2><ul><li>Electron的基础知识，各个内置模块的熟练应用(能够开发一个小软件)</li><li>深入了解浏览器的工作原理</li><li>理解进程概念和跨进程通信的原理</li></ul><a id="more"></a><h2 id="Electron开发环境的配置"><a href="#Electron开发环境的配置" class="headerlink" title="Electron开发环境的配置"></a>Electron开发环境的配置</h2><p>我之前有写过一篇<a href="http://zoomdong.cn/2019/11/01/electron/" target="_blank" rel="noopener">文章</a>有讲过关于<code>electron</code>开发的相关内容.</p><p>直接使用<code>electron</code>官网推荐的脚手架进行一个开发就行了。</p><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>这个前面也有谈过，同时在学习操作系统的时候也有讲过这个概念了。</p><h3 id="什么是Process-进程"><a href="#什么是Process-进程" class="headerlink" title="什么是Process-进程"></a>什么是Process-进程</h3><ul><li>An instance of a computer program that is being executed </li><li>electron最最核心的概念就是主进程和渲染进程</li></ul><p>我们听音乐看电影电脑跑两个程序这就是两个不同的进程。</p><h3 id="什么是Thread-线程"><a href="#什么是Thread-线程" class="headerlink" title="什么是Thread-线程"></a>什么是Thread-线程</h3><ul><li>线程是操作系统实际能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。(<code>JS</code>是单线程的，它是事件驱动的。)</li></ul><p>进程和线程的区别：</p><ul><li>内存使用的区别(两个进程分配的内存没有办法共享，但是线程可以)</li><li>通信机制的区别(默认情况下进程很难进行通信，但是可以通过ipc通信，线程方便通信)</li><li>量级方面的区别</li></ul><p>前端里面多线程的场景并没有那么多。</p><h2 id="主进程和渲染进程"><a href="#主进程和渲染进程" class="headerlink" title="主进程和渲染进程"></a>主进程和渲染进程</h2><p><code>Electron</code>的底层基于<code>Chromium</code>构建，<code>Chromium</code>本身就是基于多进程构建的，所以<code>Electron</code>作为一个应用程序在运行的时候并不是由多线程在构建，而是多进程(分为主进程和渲染进程，一个窗口就是一个渲染进程)。</p><h3 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h3><ul><li>可以使用和系统对接的 Electron API - 创建菜单，上传文件等等</li><li>创建渲染进程 - Renderer Process</li><li>全面支持 Node.js</li><li>只有一个作为整个程序的入口点</li></ul><h3 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h3><ul><li>可以有多个，每个对应一个窗口</li><li>每个都是一个单独的进程</li><li>可以使用一部分 Electron Api</li><li>全面支持 Node 和 Dom api</li></ul><p>我们可以直接使用官网脚手架来构建一次，先删除掉<code>main.js</code>里面之前的代码，然后重新写我们自己的代码，注意<code>electron</code>因为是基于 Node 构建的，所以里面使用的规范为 common js 规范。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">        <span class="comment">// 使得可以使用node api</span></span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  mainWindow.loadFile(<span class="string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样我们相当于创建了一个mainWindow，他就是我们启动的第一个主窗口。</p><p>添加一个附加窗口只需要在里面加代码就可以了:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> secondWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">400</span>,</span><br><span class="line">    height: <span class="number">300</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    parent: mainWindow</span><br><span class="line">  &#125;)</span><br><span class="line">  secondWindow.loadFile(<span class="string">'second.html'</span>)</span><br></pre></td></tr></table></figure><p>里面有个<code>renderer.js</code>文件是在<code>index.html</code>里面可以引入的一个脚本文件，在里面既可以使用<code>node</code>的 api，同时也可以使用 dom 相关的 api。</p><p>不过要注意的是，使用 node 的 api 时要记得将前面进程中的配置设置为<code>true</code>.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'node-version'</span>).innerHTML = process.version;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="进程间的通信"><a href="#进程间的通信" class="headerlink" title="进程间的通信"></a>进程间的通信</h3><p>自行学习<code>ipc</code>文档即可。记得去官网安装一个叫做<code>devtron</code>的调试工具。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Install Devtron</span><br><span class="line">$ npm install --save-dev devtron</span><br><span class="line"></span><br><span class="line"><span class="comment">// Run the following from the Console tab of your app's DevTools</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'devtron'</span>).install()</span><br><span class="line"><span class="comment">// You should now see a Devtron tab added to the DevTools</span></span><br></pre></td></tr></table></figure><p>同时在主进程里面添加一个自动帮助我们打开开发者调式工具的窗口:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line">app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'devtron'</span>).install()</span><br><span class="line">  <span class="keyword">let</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">1200</span>,</span><br><span class="line">    height: <span class="number">800</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      nodeIntegration: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  mainWindow.loadFile(<span class="string">'index.html'</span>);</span><br><span class="line">  mainWindow.webContents.openDevTools();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在开发者工具里面就可以找到 devtron 这个工具了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上就是一些<code>electron</code>基本底层概念了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习electron对于个人的好处&quot;&gt;&lt;a href=&quot;#学习electron对于个人的好处&quot; class=&quot;headerlink&quot; title=&quot;学习electron对于个人的好处&quot;&gt;&lt;/a&gt;学习electron对于个人的好处&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Electron的基础知识，各个内置模块的熟练应用(能够开发一个小软件)&lt;/li&gt;
&lt;li&gt;深入了解浏览器的工作原理&lt;/li&gt;
&lt;li&gt;理解进程概念和跨进程通信的原理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我们应该怎么学TypeScript</title>
    <link href="http://zoomdong.site/2020/01/09/ts-learn/"/>
    <id>http://zoomdong.site/2020/01/09/ts-learn/</id>
    <published>2020-01-09T05:17:57.000Z</published>
    <updated>2020-04-19T13:30:06.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前有写过一些<code>typescript</code>的基础知识，但是并没有很好的将这些知识应用到很好的开发场景里面去，而且很多知识在没有使用之后很快会遗忘，因此总结根据慕课网文章来总结一些<code>ts</code>的学习之道。</p><a id="more"></a><h2 id="学会看文档"><a href="#学会看文档" class="headerlink" title="学会看文档"></a>学会看文档</h2><p><a href="http://www.typescriptlang.org/docs/home.html" target="_blank" rel="noopener">ts的英文文档</a>始终是保持更新的，一般遇到一些文档里面没有的问题，我们首先要先检查我们的<code>ts</code>版本，然后根据日志的更新记录去找到不同版本的<code>ts</code>更新记录，看下当前出问题的特性是在哪一个版本做的更新，当然如果不确定问题的话，可以考虑对<code>ts</code>降一个版本去亲自进行一个尝试。</p><p>Typescript也是有一个<a href="https://www.tslang.cn/docs/home.html" target="_blank" rel="noopener">中文文档</a>,但是这个文档只是对英文文档的翻译，而且对于官方文档中出现的一些纰漏并没有做校验。而且可能文档的版本稍微会有些滞后。但是也很感谢这些译者所做的贡献，这对于英文不好的开发者有很大的帮助。</p><h2 id="学会看报错"><a href="#学会看报错" class="headerlink" title="学会看报错"></a>学会看报错</h2><p>ts的报错一般会有多种。</p><p>首先是<code>tslint</code>的报错，在对项目进行构建的时候，我们会使用<code>Tslint</code>对代码风格进行一个规范校验，根据<code>Tslint</code>配置的不同，提示对教过也不一样。如果我们配置当书写的代码不符合规范，使用<code>error</code>级别来提示时，会和<code>TypeScript</code>编译报错一样，在问题代码的下面用红色波浪线标出，鼠标放上去会有错误提示。所以我们使用<code>Tslint</code>的时候，遇到报错的时候，首先要区分的是<code>Tslint</code>报错还是<code>TS</code>报错，区分这两者的关键在于鼠标放上去的提示方框中，会标识<code>tslint</code>，说明是TSLint报了错。</p><p><img src="http://q91ex1jyl.bkt.clouddn.com/ts-1.png" alt></p><p>后面括号是导致这条报错产生的原因，具体的规则<code>no-console</code>可以在<code>tslint</code>的配置文件里面对这条规则去进行一个修改。</p><p><img src="http://q91ex1jyl.bkt.clouddn.com/ts-2.png" alt></p><p>上面这个代码报错是由于<code>ts</code>编译器报的错误。在我们写代码的时候，通过强类型系统，编译器可以在这个阶段检测到我们的一些错误。后面括号里面的是错误代码，所有的错误代码都可以在文档里面的<a href="https://www.tslang.cn/docs/handbook/error.html" target="_blank" rel="noopener">错误消息列表</a>查到。<br>还有一种运行时的错误，可以通过<code>F12</code>在<code>console</code>控制台看到。这个就懒得说了。</p><h2 id="学会看声明文件"><a href="#学会看声明文件" class="headerlink" title="学会看声明文件"></a>学会看声明文件</h2><p>在原来没有<code>TypeScript</code>的时候，有很多<code>JS</code>插件和<code>JS</code>库，如果使用<code>TS</code>进行开发再使用这些 <code>JS</code> 编写的插件和库，就得不到类型提示等特性的支持了，所以<code>TypeScript</code>支持为<code>JS</code>库添加声明文件，以此来提供声明信息。我们使用<code>TypeScript</code>编写的库和插件编译后也是<code>JS</code>文件，所以在编译的时候就可以选择声明文件，这样再去进行发布，使用者依然能得到<code>TypeScript</code>的特性支持。一些<code>JS</code>库的作者已经使用<code>TS</code>进行了重写，有些提供了声明文件，一些是没有的，大部分库都有社区的人补充了声明文件，如果使用了自身没有提供声明文件的库的时候，可以使用<code>npm install @types/{模块名}</code>来进行安装，当然我们也可以自行来为他补充。</p><p>看这些库的声明文件能够帮你提高对 <code>TypeScript</code> 的了解程度。因为可能你在实际开发中所接触的场景不是很复杂，运用到的 <code>TypeScript</code> 语法点也不是很全面，所以就会导致经常用的你很熟悉，不经常用的慢慢就忘掉了，甚至有的自始至终你都没有使用过。很多知识你只看理论知识，或者看简单的例子，是没法真正理解并深刻记忆的，只有在实际场景中去使用一下，才能加深理解。所以我们可以从这些库的声明文件入手，还有就是从<code>TypeScript</code>内置的<code>lib</code>声明文件入手。</p><h2 id="学会搜问题和提问"><a href="#学会搜问题和提问" class="headerlink" title="学会搜问题和提问"></a>学会搜问题和提问</h2><h3 id="途径1-百度-or-google"><a href="#途径1-百度-or-google" class="headerlink" title="途径1:百度 or google"></a>途径1:百度 or google</h3><p>自行学习。</p><h3 id="途径2-看issue"><a href="#途径2-看issue" class="headerlink" title="途径2:看issue"></a>途径2:看issue</h3><p><code>ts</code>的问答目前要比很多框架和基础只是少很多，如果<code>途径1</code>找不到答案的话，可以去<code>github</code>上面<code>ts</code>的官方<code>repo</code>的<code>issue</code>里面去找对应的答案。</p><h3 id="途径3-去提问"><a href="#途径3-去提问" class="headerlink" title="途径3.去提问"></a>途径3.去提问</h3><p>如果上面两个途径都没有找到答案，那你就可以自行去提问了，这也是个造福后人的方法。国内可以试试<code>segmentfault</code>，国外可以试试<code>stackoverflow</code>.当然也可以自己去<code>github</code>上面开<code>issue</code>。</p><h2 id="看优秀项目的源码"><a href="#看优秀项目的源码" class="headerlink" title="看优秀项目的源码"></a>看优秀项目的源码</h2><p>去<code>github</code>上面按照关键单词去搜索就行了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前有写过一些&lt;code&gt;typescript&lt;/code&gt;的基础知识，但是并没有很好的将这些知识应用到很好的开发场景里面去，而且很多知识在没有使用之后很快会遗忘，因此总结根据慕课网文章来总结一些&lt;code&gt;ts&lt;/code&gt;的学习之道。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js设计模式Notes--工厂模式(1)</title>
    <link href="http://zoomdong.site/2020/01/08/js%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-1/"/>
    <id>http://zoomdong.site/2020/01/08/js设计模式-1/</id>
    <published>2020-01-08T05:54:50.000Z</published>
    <updated>2020-01-08T05:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设计模式之道"><a href="#设计模式之道" class="headerlink" title="设计模式之道"></a>设计模式之道</h2><h3 id="SOLID原则"><a href="#SOLID原则" class="headerlink" title="SOLID原则"></a>SOLID原则</h3><ul><li>单一功能原则(<code>Single Responsibility Principle</code>)</li><li>开放封闭原则(<code>Opened Closed Principle</code>)</li><li>里式替换原则(<code>Liskov Substitution Principle</code>)</li><li>接口隔离原则(<code>Interface Segregation Principle</code>)</li><li>依赖反转原则(<code>Dependency Inversion Principle</code>)</li></ul><p>在<code>JS</code>里面主要还是围绕着“单一功能”和“开放封闭”来展开。</p><a id="more"></a><h3 id="设计模式的核心思想–封装变化"><a href="#设计模式的核心思想–封装变化" class="headerlink" title="设计模式的核心思想–封装变化"></a>设计模式的核心思想–封装变化</h3><p>在实际开发中，不发生变化的代码可以说是不存在的。我们能做的只有将这个变化造成的影响<strong>最小化 —— 将变与不变分离，确保变化的部分灵活、不变的部分稳定</strong>。</p><p>这个过程，就叫“封装变化”；这样的代码，就是我们所谓的“健壮”的代码，它可以经得起变化的考验。而设计模式出现的意义，就是帮我们写出这样的代码。</p><h2 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title="创建型设计模式"></a>创建型设计模式</h2><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>例如在动态构建公司员工数据(在员工人数较多的时候)的时候可以使用<code>JS</code>里面的构造函数:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name,age,career</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.career = career;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的<code>User</code>本质上就是一个构造器。这里使用的是<code>ES5</code>的构造函数(<code>ES6</code>里面的<code>class</code>本质上还是构造函数，<code>class</code>只是一个语法糖而已)</p><p>有了这个构造器，在进行员工信息录入的时候，就不用手动去对象里面创建字面量了，自动让程序从数据库里面获取到员工的姓名，年龄等字段，然后来一个简单的调用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(name,age,carrer);</span><br></pre></td></tr></table></figure></p><p>那么这个地方就设计到了<strong>构造器模式</strong>，这个模式就比较简单了，看上去其实就是一个<code>new</code>的过程。</p><p>但这里主要需要理解的是在构造过程中，谁发生了变化，而谁没有变化。</p><p>在使用构造器模式的时候，本质上是去抽象了每个对象实例的变与不变。而使用工厂模式则就是<strong>抽象不同构造函数（类）之间的变与不变</strong>。</p><h2 id="简单工厂模式–理解“变”与“不变”"><a href="#简单工厂模式–理解“变”与“不变”" class="headerlink" title="简单工厂模式–理解“变”与“不变”"></a>简单工厂模式–理解“变”与“不变”</h2><p>接着上面的例子扯，如果要对员工的<code>title</code>进行一个区分:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Coder</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.career = <span class="string">'coder'</span>;</span><br><span class="line">  <span class="keyword">this</span>.work = [<span class="string">'fix bug'</span>,<span class="string">'deploy'</span>,<span class="string">'coding'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PM</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.career = <span class="string">'PM'</span>;</span><br><span class="line">  <span class="keyword">this</span>.work = [<span class="string">'design picture'</span>,<span class="string">'open issue'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的话就会出现多个类别，所以这里我们需要从数据库里面拿到数据之后，手动判断<code>title</code>之后让，然后手动分配构造器?这也就成类一个“变”的过程了，我们这里封装一个函数出来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Factory</span>(<span class="params">name,age,career</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">switch</span>(career)&#123;</span><br><span class="line">    <span class="keyword">case</span>: <span class="string">'coder'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> Coder(name,age);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span>: <span class="string">'PM'</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> PM(name,age);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这么一来。随着不同<code>title</code>人员的增加，这里<code>case</code>里面的代码数目也会跟着增加。</p><p>这里我们就又需要思考“变”与“不变”之间的关系了。</p><p>本质上<code>title</code>不同的两类人，他们不同的共性仅仅是字段<code>name</code>,<code>age</code>,<code>career</code>,<code>work</code>取值不同而已，同时<code>work</code>字段会随着<code>career</code>字段的取值不同而变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name,age,career,work</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.career = career;</span><br><span class="line">  <span class="keyword">this</span>.work = work;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Factory</span>(<span class="params">name,age,career</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> work;</span><br><span class="line">  <span class="keyword">switch</span>(career)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'coder'</span>:</span><br><span class="line">      work = [<span class="string">'fix bug'</span>,<span class="string">'deploy'</span>,<span class="string">'coding'</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'pm'</span>:</span><br><span class="line">      work = [<span class="string">'design picture'</span>,<span class="string">'open issue'</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'xxx'</span>:</span><br><span class="line">      <span class="comment">// others</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(name,age,career,work);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们就不用去思考我们拿到的每组数据是什么工种，我应该怎么分配构造函数，更不用手写无数的构造函数–<code>Factory</code>函数已经帮我们完成了一切，我们只需要无脑的去传参数即可。</p><p>那么这样看来，工厂模式的目的本质上就是为了简化我们的构造过程，使我们可以无脑传参即可。</p><h2 id="抽象工厂模式–理解开放封闭原则"><a href="#抽象工厂模式–理解开放封闭原则" class="headerlink" title="抽象工厂模式–理解开放封闭原则"></a>抽象工厂模式–理解开放封闭原则</h2><p>抽象工厂模式在很长一段时间内都被认为是<code>Java/C++</code>这一类<strong>强类型动态语言的专利</strong>，因为用这些语言创建对象的时候需要时刻考虑类型之间的解耦，以便于该对象日后可以变现出多态性。但<code>JavaScript</code>作为弱类型语言具有天然的多态性，基本上不需要考虑类型耦合带来的问题。而目前的<code>JavaScript</code>语法也不支持抽象类的直接实现，只能通过模拟来实现。</p><p>在实际的业务中，我们往往面对的复杂度并非数个类，一个工厂就能解决的，可能需要多个。</p><p>就上节工厂函数的例子来看，工厂函数是这样的:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Factory</span>(<span class="params">name,age,career</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> work;</span><br><span class="line">  <span class="keyword">switch</span>(career)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'coder'</span>:</span><br><span class="line">      work = [<span class="string">'fix bug'</span>,<span class="string">'deploy'</span>,<span class="string">'coding'</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'pm'</span>:</span><br><span class="line">      work = [<span class="string">'design picture'</span>,<span class="string">'open issue'</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'boss'</span>:</span><br><span class="line">      work = [<span class="string">'have a meeting'</span>,<span class="string">'read'</span>]</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'xxx'</span>:</span><br><span class="line">      <span class="comment">// others</span></span><br><span class="line">      ...</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(name,age,career,work);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上这些代码是经不起推敲的，因为在员工系统里面<code>Boss</code>和普通员工是有明显的区别的。两者基本很难在一套系统里面共存下来，因为本身所具备的权限是不一样的。</p><p>那么接下来我们呢应该怎么做呢？去修改<code>Factory</code>的函数体，在里面新增管理层的判断和处理逻辑吗？从处理逻辑来看是没有问题的，但其实从全局来看这是在挖坑，因为员工里面可能还有外包群体和实习生之类但职级差别,这样每次我们需要去新增新的工种的时候，都需要直接对<code>Factory</code>这个函数体本身去进行一个修改，这样会使得<code>Factory</code>变得异常庞大，相当于是在对系统进行挖坑了。这样其他人在维护或者测试在测试的时候很难对这个<code>Factory</code>下手。导致这一系列问题的罪魁祸首还是因为—<strong>没有遵循开放封闭原则</strong>。</p><p>我们再次回顾一下开放封闭原则的内容:<strong>对拓展开放，对修改封闭</strong>。确切而言:是<strong>软件实体可以拓展，但是不可以修改</strong>。像上面就是在疯狂修改而不是在拓展。</p><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><p>可能上面有些概念对我们来说有些抽象，现在我们重新来进行一个示例:</p><p>大家都知道一部手机是由<code>OS</code>和<code>HardWare</code>组成。所以一家工厂想实现对手机对量产，那么肯定是既要准备好了操作系统，也要有硬件。考虑到这两者背后也存在不同到厂商，而我现在并不知道我到下一个生产线具体想生产一个怎么样到手机，只知道一个手机主要由这两者组成，因此我们先使用一个抽象类来<strong>约定这台手机的基本组成：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MobilePhoneFactory</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 操作系统接口</span></span><br><span class="line">  createOS () &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`抽象工厂方法不能直接调用，需要重写`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 提供硬件的接口</span></span><br><span class="line">  createHardWare () &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`抽象工厂方法不能直接调用，需要重写`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这个类除了约定流水线手机的通用能力之外，啥也不能干了。如果你尝试让他去干点啥，比如<code>new</code>一个实例出来，并且去调用它的实例方法。它还会报错。在抽象工厂模式里面，上面这个类其实就是我们食物链顶端最大的<code>Boss-AbstractFactory</code>(抽象工厂)。</p><p>抽象工厂并不会干活，具体工厂(<code>ConcreteFactory</code>)来干活，当我们明确了生产方案，明确了某一条流水线具体要生产怎么样的手机之后，就可以化抽象为具体，比如我现在想要生产一个专门生产<code>Android</code>系统 + 高通硬件的手机的生产线，我给这类手机型号起名为<code>FakeStar</code>，那我就可以为这个手机定制一个工厂:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体工厂继承自抽象工厂</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakeStarFactory</span> <span class="keyword">extends</span> <span class="title">MobilePhoneFactory</span> </span>&#123;</span><br><span class="line">   createOS () &#123;</span><br><span class="line">    <span class="comment">//  提供android系统实例</span></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> AndroidOS(); </span><br><span class="line">   &#125;</span><br><span class="line">   createHardWare () &#123;</span><br><span class="line">    <span class="comment">//  提供高通硬件实例</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> QualcommHardWare();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们在提供安卓系统的时候，调用了两个构造函数:<code>AndroidOS</code>和<code>QualcommHardWare</code>，它们分别用于生产具体的操作系统和硬件系统实例。像这种被我们拿出来用于<code>new</code>出具体对象的类，叫做具体产品类(<code>ConcreteProduct</code>)。具体产品往往不会孤立存在，不同的具体产品类往往有着共同的功能，比如安卓类和苹果系统类，它们都是操作系统，都有着可以<strong>操控手机硬件系统</strong>这样一个最基本的功能。因此我们可以使用一个<strong>抽象产品类</strong>来声明这一类产品应该具有的基本功能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义操作系统这一类产品的抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OS</span> </span>&#123;</span><br><span class="line">  controlHardWare () &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`抽象产品方法允许直接调用，需要重写`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体操作系统的具体产品类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidOS</span> <span class="keyword">extends</span> <span class="title">OS</span> </span>&#123;</span><br><span class="line">  controlHardWare () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会用android的方式去操作硬件'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOS</span> <span class="keyword">extends</span> <span class="title">OS</span> </span>&#123;</span><br><span class="line">  controlHardWare () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'我会用苹果的方式去操作硬件'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">....</span><br></pre></td></tr></table></figure><p>对于硬件类产品也是同理:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义手机硬件这类产品的抽象产品类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HardWare</span> </span>&#123;</span><br><span class="line">  <span class="comment">//  手机硬件的共性方法，这里提取“根据命令运转”这个共性</span></span><br><span class="line">  operateByOrder () &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`抽象产品方法不允许直接调用，需要重写`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义具体硬件的具体产品类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QualcommHardWare</span> <span class="keyword">extends</span> <span class="title">HardWare</span> </span>&#123;</span><br><span class="line">  operateByOrder () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我会用高通的方式去运转`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MiWare</span> <span class="keyword">extends</span> <span class="title">HardWare</span> </span>&#123;</span><br><span class="line">  operatorByOrder () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`我会用小米的方式去运转`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样一来，当我们需要生产一台<code>FakeStar</code>手机时候，我们只需要这样做:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是我的手机</span></span><br><span class="line"><span class="keyword">const</span> myPhone = <span class="keyword">new</span> FakeStarFactory();</span><br><span class="line"><span class="comment">// 让它拥有系统</span></span><br><span class="line"><span class="keyword">const</span> myOS = myPhone.createOS();</span><br><span class="line"><span class="comment">// 让它拥有硬件</span></span><br><span class="line"><span class="keyword">const</span> myHardWare = myPhone.createHardWare();</span><br><span class="line"><span class="comment">// 启动操作系统(输出‘我会用安卓的方式去操作硬件’)</span></span><br><span class="line">myOS.controlHardWare();</span><br><span class="line"><span class="comment">// 唤醒硬件(输出‘我会用高通的方式去运转’)</span></span><br><span class="line">myHardWare.operateByOrder();</span><br></pre></td></tr></table></figure></p><p>那么关键时刻来了–假如有一天，<code>FakeStar</code>过气了，我们需投入一款新机进入市场，这时候怎么办？我们是不是需要对<strong>抽象工程MobilePhoneFactory</strong>做任何修改，只需要拓展它的种类：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">newStarFactory</span> <span class="keyword">extends</span> <span class="title">MobilePhoneFactory</span> </span>&#123;</span><br><span class="line">  createOS () &#123;</span><br><span class="line">    <span class="comment">// 操作系统实例化代码</span></span><br><span class="line">  &#125;</span><br><span class="line">  createHardWare () &#123;</span><br><span class="line">    <span class="comment">// 硬件实现代码</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个操作，对原有对系统不会产生任何潜在对影响，所谓对”对拓展开放，对修改封闭”就这么圆满的实现了。前面我们之所以要实现<strong>抽象产品类</strong>，也是相同的道理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>现在我们可以对比一下抽象工厂和简单工厂的思路，思考一下:它们之间又哪些异同?<br>它们的共同点在于，都<strong>尝试去分离一个系统中变与不变的部分</strong>。它们的不同在于场景的复杂度。在简单工厂的使用场景里面，处理的对象是类，并且是一些非常好对付的类–它们的共性容易抽离，同时因为逻辑本身比较简单，故而不苛求代码可拓展性。抽象工厂本质上处理的其实也是类，但是是一帮非常棘手、繁杂的类，这些类中不仅能划分出门派，还能划分出等级，同时存在着千变万化的扩展可能性——这使得我们必须对共性作更特别的处理、使用抽象类去降低扩展的成本，同时需要对类的性质作划分，于是有了这样的四个关键角色：</p><ul><li>抽象工厂(抽象类，它不能用于生成具体的实例)。</li><li>具体工厂(用于生成产品族里的一个具体的产品)。</li><li>抽象产品(抽象类，他不能用于生成具体实例)。</li><li>具体产品(用于生产产品族里的一个具体产品所依赖的更细粒度的产品)。</li></ul><p>抽象工厂的定义，主要是<strong>围绕一个超级工厂去构建其他的工厂</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;设计模式之道&quot;&gt;&lt;a href=&quot;#设计模式之道&quot; class=&quot;headerlink&quot; title=&quot;设计模式之道&quot;&gt;&lt;/a&gt;设计模式之道&lt;/h2&gt;&lt;h3 id=&quot;SOLID原则&quot;&gt;&lt;a href=&quot;#SOLID原则&quot; class=&quot;headerlink&quot; title=&quot;SOLID原则&quot;&gt;&lt;/a&gt;SOLID原则&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单一功能原则(&lt;code&gt;Single Responsibility Principle&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;开放封闭原则(&lt;code&gt;Opened Closed Principle&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;里式替换原则(&lt;code&gt;Liskov Substitution Principle&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;接口隔离原则(&lt;code&gt;Interface Segregation Principle&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;依赖反转原则(&lt;code&gt;Dependency Inversion Principle&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在&lt;code&gt;JS&lt;/code&gt;里面主要还是围绕着“单一功能”和“开放封闭”来展开。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>electron开发小记</title>
    <link href="http://zoomdong.site/2019/11/01/electron/"/>
    <id>http://zoomdong.site/2019/11/01/electron/</id>
    <published>2019-11-01T06:39:00.000Z</published>
    <updated>2019-11-01T06:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="electron开发记录"><a href="#electron开发记录" class="headerlink" title="electron开发记录"></a>electron开发记录</h2><p>首先根据官方文档的<a href="https://electronjs.org/docs/tutorial/first-app#trying-this-example" target="_blank" rel="noopener">启动脚手架</a>来先跑一波<code>electron</code>,注意这一步在<code>npm i</code>的时候有一个比较大的依赖在注入进来，所以会安装比较长的时间。</p><ul><li><code>Electron</code>本身是基于<code>Chrominum</code>和<code>Node.js</code></li><li>开源</li><li>跨平台</li></ul><a id="more"></a><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>以Chromium举例，它有两个进程，一个主进程，一个是渲染进程.</p><p>主进程(Main Process)</p><ul><li>可以使用和系统对接的<code>Electron API</code> 创建菜单，上传文件等</li><li>可以创建渲染进程- <code>Renderer Process</code></li><li>全面支持<code>Node.js</code></li></ul><p>渲染进程(Renderer Process)</p><ul><li>可以有多个，每个对应一个窗口</li><li>每个都是一个单独的进程</li><li>全面支持<code>Node.js</code>和<code>DOM API</code></li><li>可以使用一部分<code>Electron Api</code></li></ul><p>比如官方提供的<code>quick-electron</code>这个脚手架里面的<code>main.js</code>和<code>renderer.js</code>就分别代表主进程和渲染进程的代码。</p><h2 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h2><p>首先先介绍一下主进程里面一个比较重要的<code>api</code>叫做<code>BroswerWindow</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示electron已经完成加载好了，准备运行了</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, ()=&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">     width: <span class="number">800</span>,</span><br><span class="line">     height: <span class="number">600</span>,</span><br><span class="line">     webPreferences: &#123;</span><br><span class="line">      <span class="comment">//  表示我们在里面可以使用node的api</span></span><br><span class="line">       nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line">  <span class="comment">//  这里的mainWindow回去下载的当前目录下面的index.html这个文件 </span></span><br><span class="line">   mainWindow.loadFile(<span class="string">'./index.html'</span>);</span><br><span class="line">   <span class="keyword">const</span> secondWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">     width: <span class="number">400</span>,</span><br><span class="line">     height: <span class="number">300</span>,</span><br><span class="line">     webPreferences: &#123;</span><br><span class="line">       nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">     &#125;,</span><br><span class="line">    <span class="comment">//  父窗口属性，当父窗口关闭的时候，子窗口也会跟着关闭</span></span><br><span class="line">     parent: mainWindow</span><br><span class="line">   &#125;)</span><br><span class="line">   secondWindow.loadFile(<span class="string">'./second.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>可以看到的是，在配置过<code>webPreferences</code>之后，我们在<code>index.html</code>里面的<code>js</code>代码中就可以使用相对应的<code>node api</code>以及一些相关的<code>dom api</code>。</p><p><code>index.html</code>的代码RT:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">require</span>(<span class="string">'./renderer.js'</span>)</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在<code>renderer.js</code>里面写上对应的代码:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以弹出nodejs的版本</span></span><br><span class="line">alert(process.versions.node);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    alert(<span class="string">`greeting from the DOM side`</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>更多关于<a href="https://electronjs.org/docs/api/browser-window" target="_blank" rel="noopener">BroswerWindow相关</a>。</p><p>接下来介绍一下进程之前的通信工具，其实就比较类似于<code>nodeJS</code>里面的<code>emit</code>和<code>on</code>这种通信方式:</p><p>我们在渲染进程里面给主进程发送一个<code>message</code>,然后在<code>message</code>这边进行接收即可:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">//  利用ipcRender以及send这个api发送一条消息</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'message'</span>, <span class="string">'hello from renderer'</span>);</span><br><span class="line">    ipcRenderer.on(<span class="string">'reply'</span>,(e,arg)=&gt;&#123;</span><br><span class="line">        <span class="comment">// 把主进程返回回来的消息挂载到页面的对应节点上面去</span></span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>).innerHTML = arg;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>主进程这边接收到消息之后再<code>reply</code>给<code>render</code>进程这边回一个消息:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示electron已经完成加载好了，准备运行了</span></span><br><span class="line">app.on(<span class="string">'ready'</span>, ()=&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">    <span class="comment">//  表示我们在里面可以使用node的api</span></span><br><span class="line">    nodeIntegration: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">mainWindow.loadFile(<span class="string">'./index.html'</span>);</span><br><span class="line"><span class="comment">//  用这边来监听renderer那边的值</span></span><br><span class="line">ipcMain.on(<span class="string">'message'</span>,(e,arg) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arg);</span><br><span class="line">    <span class="comment">// 可以在event里面利用发送者这个属性往渲染进程上再回复一组数据</span></span><br><span class="line">    e.sender.send(<span class="string">'reply'</span>,<span class="string">'hello from main'</span>)</span><br><span class="line">    mainWindow.send(<span class="string">'reply'</span>,<span class="string">'hello from main'</span>)  </span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="electron的应用发布与打包"><a href="#electron的应用发布与打包" class="headerlink" title="electron的应用发布与打包"></a>electron的应用发布与打包</h2><p>electron打包方式:</p><ul><li>手动打包</li><li>electron-packager</li><li><a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener">electron-builder</a></li></ul><p>这里使用<code>electron-builder</code>这个库来进行<code>electron</code>应用的一个打包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-builder -D</span><br></pre></td></tr></table></figure><p>完成之后我们需要在<code>package.json</code>里面添加一份配置文件。用于打包生成对应的安装包。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">"build":&#123;</span><br><span class="line">     "appId":"Music-Player",</span><br><span class="line">     "linux": &#123;</span><br><span class="line">       "target": [</span><br><span class="line">         "AppImage",</span><br><span class="line">         <span class="string">"deb"</span></span><br><span class="line">       ]</span><br><span class="line">     &#125;,</span><br><span class="line">     "dmg": &#123;</span><br><span class="line">      "background": "build/appdmg.png",</span><br><span class="line">      "icon": "build/icon.icns",</span><br><span class="line">      "iconSize": 100,</span><br><span class="line">      "contents": [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"x"</span>: <span class="number">380</span>,</span><br><span class="line">          <span class="attr">"y"</span>: <span class="number">280</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"link"</span>,</span><br><span class="line">          <span class="attr">"path"</span>: <span class="string">"/Applications"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"x"</span>: <span class="number">110</span>,</span><br><span class="line">          <span class="attr">"y"</span>: <span class="number">280</span>,</span><br><span class="line">          <span class="attr">"type"</span>: <span class="string">"file"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      "window": &#123;</span><br><span class="line">        "width": 500,</span><br><span class="line">        "height": 500</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>然后新建一个启动脚本:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"script":"electron-builder"</span><br></pre></td></tr></table></figure><p>这样就可以完成打包了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;electron开发记录&quot;&gt;&lt;a href=&quot;#electron开发记录&quot; class=&quot;headerlink&quot; title=&quot;electron开发记录&quot;&gt;&lt;/a&gt;electron开发记录&lt;/h2&gt;&lt;p&gt;首先根据官方文档的&lt;a href=&quot;https://electronjs.org/docs/tutorial/first-app#trying-this-example&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;启动脚手架&lt;/a&gt;来先跑一波&lt;code&gt;electron&lt;/code&gt;,注意这一步在&lt;code&gt;npm i&lt;/code&gt;的时候有一个比较大的依赖在注入进来，所以会安装比较长的时间。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Electron&lt;/code&gt;本身是基于&lt;code&gt;Chrominum&lt;/code&gt;和&lt;code&gt;Node.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开源&lt;/li&gt;
&lt;li&gt;跨平台&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小程序杂记</title>
    <link href="http://zoomdong.site/2019/10/08/mini-program/"/>
    <id>http://zoomdong.site/2019/10/08/mini-program/</id>
    <published>2019-10-08T05:37:01.000Z</published>
    <updated>2019-10-10T07:04:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>迫于生计开始写小程序.</p><p>小程序重要的东西有布局:<br>使用的是<code>flex</code>布局,这点很重要的。</p><p><code>justify-content</code>和<code>align-items</code>一个表示水平轴一个表示交叉轴，但是这两者的话都没有一个绝对的主轴，这点是要根据<code>flex-direction</code>的设定来确定的，<code>flex-direction</code>为<code>row</code>那么水平方向的就为主轴,另外一个为交叉轴，如果为<code>column</code>，那么垂直方向的就为主轴,另外一个为交叉轴。</p><p>当然如果加了<code>reverse</code>之后交叉轴的方向就得换个参照点了。</p><a id="more"></a><p>组件的使用可以参考页面里面的<code>json</code>里面的相关配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"usingComponents": &#123;&#125;</span><br></pre></td></tr></table></figure></p><p>注意这个地方使用组件的话一定要记得具体精确到文件里面去(貌似小程序这里不会默认解析<code>index</code>)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"usingComponents":&#123;</span><br><span class="line">  "v-like":"/components/like/index",</span><br><span class="line">  "v-movie":"/components/classic/movie/index",</span><br><span class="line">  "v-epsoide":"/components/epsoide/index"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小程序用<code>px</code>做单位的话，会直接乘以二去换算，所以一般使用<code>rpx</code>来作为单位(<code>rpx</code>尺寸是按照<code>1:1</code>来进行换算的),同时<code>rpx</code>是可以针对不同的机型去进行一个自适应。</p><p>字体的大小可能需要使用<code>px</code>(可能没必要使用随着机型去进行放大。)</p><p>小程序里面做适应的两个神器:</p><ul><li>flex</li><li>rpx</li></ul><p>设置全局样式在<code>app.wxss</code>里面的<code>page</code>里面设置就可以了，不需要自己去设置，现在大部分样式都可以继承下来了。</p><p>组件最好不要留有空白间距。</p><h2 id="数据显示"><a href="#数据显示" class="headerlink" title="数据显示"></a>数据显示</h2><p>数据的来源</p><ul><li>WXML</li><li>JS-&gt;WXML</li><li>服务器-&gt;JS-&gt;WXML</li></ul><p>数据绑定 组件内部的数据放在<code>js</code>文件里面的<code>data</code>里面去,然后<code>wxml</code>去调用的时候<code></code>这样表示即可。 </p><p>三元表达式这样调用即可:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;text&gt;&#123;&#123; like ? count1 : count2 &#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果我们想要在一个图片里面这么玩的话，可以把<code>src</code>的值封装成变量即可。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;image src=<span class="string">"&#123;&#123; like ? yesSrc : noSrc &#125;&#125;"</span> /&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">    like: <span class="literal">false</span>,</span><br><span class="line">    count1: <span class="number">99</span>,</span><br><span class="line">    count2: <span class="number">999</span>,</span><br><span class="line">    yesSrc:<span class="string">'./images/like.png'</span>,</span><br><span class="line">    noSrc: <span class="string">'./images/like@dis.png'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>这么表示即可。里面<code>properties</code>里面可以指定使用一些组件外部能够操作的数据，就如上面<code>like</code>和<code>count</code>肯定是要外部能够操作的,我们就需要把这些属性发在<code>properties</code>里面去就可以了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">properties: &#123;</span><br><span class="line">  like: &#123;</span><br><span class="line">    type: <span class="built_in">Boolean</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  count: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">data: &#123;</span><br><span class="line">  yesSrc:<span class="string">'./images/like.png'</span>,</span><br><span class="line">  noSrc: <span class="string">'./images/like@dis.png'</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>事件的定义在<code>methods</code>里面去拿数据就可了。</p><p>然后我们去给里面绑定一个事件(注意学习一波这里取数据的方法是可以使用<code>es6</code>的,修改数据使用的是类似于<code>react</code>里面的那套<code>api</code>):<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    onLike:<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> &#123; like, count &#125; = <span class="keyword">this</span>.properties;</span><br><span class="line">       count = like ? count - <span class="number">1</span> : count + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">         count,</span><br><span class="line">         like: !like</span><br><span class="line">       &#125;) </span><br><span class="line">       <span class="built_in">console</span>.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p>这里注意到小程序里面的一些事件(这里以<code>like</code>组件作为例子)，我们都是写在<code>methods</code>里面的。如果我们想调用这个绑定这个事件到<code>wxml</code>里面去的话，使用小程序相对应的语法即可(<code>bind:tap=&quot;onLike&quot;</code>):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- image组件是有默认的宽和高的 --&gt;</span><br><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span> bind:tap=<span class="string">"onLike"</span>&gt;</span><br><span class="line">   &lt;image src=<span class="string">"&#123;&#123; like ? yesSrc : noSrc &#125;&#125;"</span> /&gt;</span><br><span class="line">   &lt;text&gt;&#123;&#123; count &#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br></pre></td></tr></table></figure><h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><p>利用小程序来访问<code>API</code>数据,还是和之前的框架(例如<code>react</code>,<code>vue</code>)一样，我们需要一个生命周期函数.</p><p>一般我们创建一个页面里面的<code>js</code>文件里面都会帮我们默认写好生命周期函数。</p><p>生命周期函数的概念是和<code>react</code>,<code>vue</code>里面的生命周期函数没有区别的。</p><p>一般我们发送请求的数据都会放在<code>onLoad()</code>这个生命周期函数之类，这个生命周期函有点类似于<code>react</code>里面被移除的一个<code>API</code>叫做<code>componentWillMount</code>,但是这里我们一般都把请求写在这里(毕竟小程序没有<code>react</code>那么多的东西要去拓展。。。)</p><h3 id="onLoad"><a href="#onLoad" class="headerlink" title="onLoad"></a>onLoad</h3><p>我们在这个地方进行数据请求的话，我们会使用<code>wx.request()</code>这个函数去进行一个<code>api</code>的调用。相关文档参考<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/api.html#API" target="_blank" rel="noopener">这里</a></p><p>使用的话大概是这个样子为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  wx.request(&#123;</span><br><span class="line">    url: <span class="string">'http://bl.7yue.pro/v1/classic/latest'</span>,</span><br><span class="line">    <span class="comment">// res是服务器返回给我们的数据,在success这个里面能拿到</span></span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>对于开发过程中产生的无法校验的<code>http</code>接口的情况的话，我们可以在小程序开发者工具里面关闭掉关于<code>http</code>校验的相关操作。<code>wx.request()</code>这里也和<code>axios</code>一样，这里就是个异步函数。所以想拿到值，我们需要自己来操作一下(上面就是一种操作)。</p><p>回调函数有个缺陷就是，在回调函数的外面<code>this</code>是有值的，比如<code>success</code>这个函数的外面是可以抓到值的，但是到<code>success</code>里面使用<code>this.data.xxx</code>去拿<code>data</code>里面的数据是拿不到的。这个时候我们把<code>this</code>赋值一下就ok了.<code>let self = this</code>(就是之前那种传统的方法)，当然这里我们用箭头函数就OK了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">success:<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们前面在<code>like</code>组件里面使用了两个<code>properities</code>(分别为<code>count</code>和<code>like</code>),这里我们就可以使用父组件来将这两个值从父组件这里传递下去。</p><p><code>home.wxml</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;v-like like=<span class="string">"&#123;&#123; classicData.like_status &#125;&#125;"</span> count=<span class="string">"&#123;&#123; classicData.fav_nums &#125;&#125;"</span>  /&gt;</span><br></pre></td></tr></table></figure><p>通过这样可以类似<code>react</code>里面的<code>props</code>将值传递下去。</p><p>在<code>home.js</code>这边获取到请求的数据还是和以前<code>react</code>里面一样，拿到数据后把他使用请求数据的组件的状态存储下面就可了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  classic.getLatest(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        classicData:res</span><br><span class="line">      &#125;) </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个<code>setData</code>和<code>react</code>里面的<code>setState</code>是一模一样的= =,都是用来搞数据更新的，但你不能直接去改变<code>data</code>里面的数据值。</p><h2 id="创建自定义事件"><a href="#创建自定义事件" class="headerlink" title="创建自定义事件"></a>创建自定义事件</h2><p>我们在使用组件的时候，有的时候可能需要去使用到一些我们自己定义的一系列事件(因为使用原有的事件会有些东西无法获取到)。我们之间监听一个组件的点击事件使用的是<code>bind:tap=&quot;xxx(事件名)&quot;</code>,类似于<code>react</code>里面的<code>onClick</code>事件一样hhh。</p><p>但是我们在父组件里面这样去监听子组件的点击事件的时候是拿不到当前子组件里面的一些状态。</p><p>所以我们要先在子组件里面创建一个自定义事件来通知页面点击了事件，然后把父组件知道的状态传递出去，我们需要使用小程序里面自带的自定义事件里面的激活<code>API</code>来完成操作即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    onLike:<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">let</span> &#123; like, count &#125; = <span class="keyword">this</span>.properties;</span><br><span class="line">       count = like ? count - <span class="number">1</span> : count + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">         count,</span><br><span class="line">         like: !like</span><br><span class="line">       &#125;) </span><br><span class="line">        <span class="comment">// 发起一个自定义事件 </span></span><br><span class="line">        <span class="keyword">let</span> behavior = <span class="keyword">this</span>.properties.like ? <span class="string">'like'</span> : <span class="string">'cancel'</span></span><br><span class="line">        <span class="comment">// 在这里激活我们的自定义事件like,它里面还有第三个参数</span></span><br><span class="line">        <span class="keyword">this</span>.triggerEvent(<span class="string">'like'</span>,&#123;</span><br><span class="line">           behavior</span><br><span class="line">        &#125;,&#123;&#125;)</span><br><span class="line">    &#125; </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>然后我们将父组件里面需要调用的事件绑定到<code>like</code>这个东西上面即可:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">v-like</span> <span class="attr">bind:like</span>=<span class="string">"LikeClick"</span>   /&gt;</span></span><br></pre></td></tr></table></figure><p>然后父组件里面定义一下这个点击事件:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LikeClick: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>这个时候<code>event</code>那里就可以拿到子组件传递过来的<code>behavior</code>了。</p><h2 id="组件的生命周期函数"><a href="#组件的生命周期函数" class="headerlink" title="组件的生命周期函数"></a>组件的生命周期函数</h2><p>就想<code>pages</code>有自己的生命周期函数，组件(<code>components</code>)里面也会有自己的生命周期函数。</p><p>我们想在组件里面输出一些值的内容的话是可以在生命周期函数里面输出的:<br>一般会使用<code>attached</code>这个生命周期函数的钩子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  properties: &#123;</span><br><span class="line">     index:<span class="built_in">Number</span></span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">      year: <span class="built_in">Number</span>,</span><br><span class="line">      month: <span class="built_in">String</span>, </span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  attached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.properties);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.data);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>attached</code>这个地方会打印出一个属性的值。<code>properties</code>和<code>data</code>这个地方会输出同样的值(所以这个地方我们不要给这两个东西写个同样的值，一般情况下<code>data</code>会覆盖掉<code>properties</code>下面同样的值)。</p><p>从父组件传递过来的数字，我们一般不放在<code>attached</code>这个生命周期函数里面去写，我们会使用<code>properities</code>这个属性里面的一个<code>observer</code>参数来去做。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Component(&#123;</span><br><span class="line">  properties: &#123;</span><br><span class="line">     index:&#123;</span><br><span class="line">       type: <span class="built_in">String</span>,</span><br><span class="line">       observer: <span class="function"><span class="keyword">function</span>(<span class="params">newVal,oldVal,changePath</span>)</span>&#123;</span><br><span class="line">         <span class="keyword">let</span> val = newVal &lt; <span class="number">10</span> ? <span class="string">'0'</span> + newVal : newVal;</span><br><span class="line">         <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">           _index: val </span><br><span class="line">         &#125;)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">      year:<span class="number">0</span>,</span><br><span class="line">      month: <span class="string">''</span>, </span><br><span class="line">      _index: <span class="string">'0'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  attached: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当然这个地方也不能在<code>observer</code>内部使用<code>this.setData</code>里面去修改<code>index</code>这个值，因为这里会出现无限递归调用的现象，就像在<code>render</code>里面使用<code>componentDidMount</code>一样。这个地方所以需要使用一个类似中转变量的东西<code>_index</code>来去回避那个陷阱。(不要在一个属性的监听值里面去修改这个监听值的内容)。</p><h2 id="Behavior"><a href="#Behavior" class="headerlink" title="Behavior"></a>Behavior</h2><p>小程序里面提供了组件的复用机制可以使用<code>behavior</code>这个<code>API</code>。</p><p>比如说我们的多个组件里面有一些可以共用的东西，例如一些<code>properities</code>或者是<code>data</code>或者是<code>methods</code>甚至是<code>attached</code>这个生命周期函数都可以。</p><p>现在假设我们的组件里面都用共用的两个属性叫做<code>img</code>和<code>content</code>,我们在组件目录下的根路径下面新建一个<code>classic-beh.js</code>的文件，里面使用<code>Behavior</code>来新建一个公共的属性即可:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> classicBeh = Behavior(&#123;</span><br><span class="line">    properties: &#123;</span><br><span class="line">        img:<span class="built_in">String</span>,</span><br><span class="line">        content: <span class="built_in">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; classicBeh &#125;</span><br></pre></td></tr></table></figure><p>然后我们需要使用这些公共属性的组件是可以直接去里面调用这些东西的:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; classicBeh &#125; <span class="keyword">from</span> <span class="string">'../classic-beh'</span>;</span><br><span class="line">Component(&#123;</span><br><span class="line">  behaviors: [ classicBeh ],  </span><br><span class="line">  properities: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    pauseSrc: <span class="string">'images/player@waitting.png'</span>,</span><br><span class="line">    playSrc: <span class="string">'images/player@playing.png'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>在组件内部通过<code>behaviors</code>这个属性去直接进行一波的调用。这样以后这些组件有了共同的趋势了的话，这样我们直接去<code>behavior</code>里面去添加属性。</p><h2 id="循环渲染数据"><a href="#循环渲染数据" class="headerlink" title="循环渲染数据"></a>循环渲染数据</h2><p>在<code>jsx</code>里面渲染数据的话，我们一般都是直接使用<code>map</code>对一个对象数组去进行一个遍历，而在小程序里面，我们通常使用这样的语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;block wx:<span class="keyword">for</span>=<span class="string">"&#123;&#123;books&#125;&#125;"</span>&gt;</span><br><span class="line">    &lt;v-book book=<span class="string">"&#123;&#123;item&#125;&#125;"</span> /&gt;    </span><br><span class="line">&lt;<span class="regexp">/block&gt;</span></span><br></pre></td></tr></table></figure><h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>小程序里面也有和<code>vue</code>一样的插槽<code>slot</code>概念:</p><p>比如说我们在一个组件(<code>v-tag</code>组件)里面使用插槽:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;view <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;text&gt;&#123;&#123; text &#125;&#125;&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- &lt;text&gt;&#123;&#123; num &#125;&#125;&lt;/</span>text&gt; --&gt;</span><br><span class="line">    &lt;!-- 从组件外部传递进来，类似于react的props.children --&gt;</span><br><span class="line">    &lt;slot name=<span class="string">"after"</span>&gt;&lt;<span class="regexp">/slot&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>view&gt;</span><br></pre></td></tr></table></figure><p>同样在组件的<code>js</code>文件里面添加一些相关的配置:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">options: &#123;</span><br><span class="line">  multipleSlots: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>然后我们去调用这个组件的时候<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;view&gt;</span><br><span class="line"> &lt;v-tag&gt;</span><br><span class="line">   &lt;text slot=<span class="string">"after"</span>&gt;这个插槽会放到after那里去&lt;<span class="regexp">/text&gt;</span></span><br><span class="line"><span class="regexp"> &lt;/</span>v-tag&gt;</span><br><span class="line">&lt;<span class="regexp">/view&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样就修改成功了。</p><p>通过在父组件里面使用选择器<code>css</code>样式来设定对应列表组件的样式(在组件是列表组件的情况下):<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 使用子元素选择器来使选择更加精准从而使得避免安全问题 */</span></span><br><span class="line"><span class="selector-class">.comment-container</span> &gt; <span class="selector-tag">v-tag</span><span class="selector-pseudo">:nth-child(1)</span> &gt; <span class="selector-tag">view</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fffbdd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment-container</span> &gt; <span class="selector-tag">v-tag</span><span class="selector-pseudo">:nth-child(2)</span> &gt; <span class="selector-tag">view</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#eefbff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;布局&quot;&gt;&lt;a href=&quot;#布局&quot; class=&quot;headerlink&quot; title=&quot;布局&quot;&gt;&lt;/a&gt;布局&lt;/h2&gt;&lt;p&gt;迫于生计开始写小程序.&lt;/p&gt;
&lt;p&gt;小程序重要的东西有布局:&lt;br&gt;使用的是&lt;code&gt;flex&lt;/code&gt;布局,这点很重要的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;justify-content&lt;/code&gt;和&lt;code&gt;align-items&lt;/code&gt;一个表示水平轴一个表示交叉轴，但是这两者的话都没有一个绝对的主轴，这点是要根据&lt;code&gt;flex-direction&lt;/code&gt;的设定来确定的，&lt;code&gt;flex-direction&lt;/code&gt;为&lt;code&gt;row&lt;/code&gt;那么水平方向的就为主轴,另外一个为交叉轴，如果为&lt;code&gt;column&lt;/code&gt;，那么垂直方向的就为主轴,另外一个为交叉轴。&lt;/p&gt;
&lt;p&gt;当然如果加了&lt;code&gt;reverse&lt;/code&gt;之后交叉轴的方向就得换个参照点了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Nuxt.js及Vue-SSR学习笔记</title>
    <link href="http://zoomdong.site/2019/10/04/nuxt-ssr/"/>
    <id>http://zoomdong.site/2019/10/04/nuxt-ssr/</id>
    <published>2019-10-04T02:08:38.000Z</published>
    <updated>2019-10-04T02:12:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Nuxt-js基础"><a href="#Nuxt-js基础" class="headerlink" title="Nuxt.js基础"></a>Nuxt.js基础</h2><ul><li>Vue2</li><li>Vue Router</li><li>Vuex</li><li>Vue Server Renderer</li><li>vue-meta</li></ul><p>首先还是<a href="https://nuxtjs.org/" target="_blank" rel="noopener">官方地址</a>给上。</p><p>安装:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先安装一下vue-cli工具</span></span><br><span class="line">yarn global add @vue/cli-init </span><br><span class="line"><span class="comment">// 初始化模板</span></span><br><span class="line">vue init nuxt-community/koa-template</span><br></pre></td></tr></table></figure></p><p>还源的工具可以使用<code>nrm</code>，类似于版本控制的<code>npm</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure></p><p><code>nuxt.js</code>是非常适合做<code>vue</code>的<code>ssr</code>渲染的，他可以让<code>ssr</code>变得非常非常简单。</p><p>我们直接利用刚才那个命令来生成一个<code>nuxt.js</code>模板。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init nuxt-community/koa-template nuxt-start</span><br></pre></td></tr></table></figure><p>不过这里可能会遇见一个问题。具体可以参考，项目的<a href="https://github.com/fireairforce/nuxt-starter/blob/master/README.md" target="_blank" rel="noopener">README.md文档</a>。</p><p>这东西的设计其实和<code>umi</code>很类似(可能<code>umi</code>是借鉴了这边吧。。)有一点就是<code>pages</code>目录下面的文件即为路由。我们创建一个<code>xxx.vue</code>，然后去<code>localhost:3000/xxx</code>,就可以直接访问到对应的页面了。</p><a id="more"></a><p>那个<code>layouts</code>就是一个公共的模板。里面有个公用的<code>footer</code>。里面会有个<code>default.vue</code>就是默认的模板。</p><p>里面会有这样的模板代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nuxt</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-footer</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们<code>pages</code>里面的代码都会被生成出来放到<code>&lt;nuxt /&gt;</code> 里面去，而模板文件则会被放在例如<code>&lt;my-footer /&gt;</code>那里去。</p><p>如果我们想要自定义一个模板,直接在<code>layouts</code>下面新建一个<code>search.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"layout-search"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>search layout header<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nuxt</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span>search layout footer<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.layout-search</span> &#123;</span></span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后如果要使用这个模板，直接在<code>pages</code>目录下面的<code>search.vue</code>里面引入一下就可了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">      Page is Search</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  layout: <span class="string">'search'</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样去访问<code>search</code>这个路由的时候相对应的<code>layouts</code>就会显示上去。</p><p>其中里面全局的<code>css</code>设定可以在<code>nuxt.config.js</code>里面可以看见,<code>assets/css</code>的<code>main.css</code>被设定成为了全局的<code>css</code>。</p><h2 id="接口相关"><a href="#接口相关" class="headerlink" title="接口相关"></a>接口相关</h2><p>和<code>koa2</code>相关的目录就是<code>server</code>下面的<code>index.js</code>，里面的配置其实也不用改什么了。</p><p>我们去<code>server</code>目录下面新建一个<code>interface</code>目录，然后里面放一个<code>city.js</code>,其代码为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'koa-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  prefix: <span class="string">'/city'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/list'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">      list: [<span class="string">'北京'</span>, <span class="string">'天津'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><p>然后去<code>index.js</code>里面使用一下这个路由:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cityInterface <span class="keyword">from</span> <span class="string">'./interface/city'</span></span><br><span class="line"></span><br><span class="line">app.use(cityInterface.routes()).use(cityInterface.allowedMethods())</span><br></pre></td></tr></table></figure></p><p>然后我们可以在<code>search.vue</code>里面去搞一发:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page"</span>&gt;</span></span><br><span class="line">      Page is Search</span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  layout: <span class="string">'search'</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="actionscript">  <span class="comment">//  用这个类似于componentDidmout()的函数去进行一个数据请求  </span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">async</span> mounted () &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> self = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> &#123; status, <span class="attr">data</span>: &#123; list &#125; &#125; = <span class="keyword">await</span> axios.get(<span class="string">`/city/list`</span>)</span></span><br><span class="line">    if (status === 200) &#123;</span><br><span class="line">        self.list = list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们刷新页面去看，会发现使用<code>vue</code>里面的生命周期函数去请求的话，到了页面里面，渲染的地方会发生短暂的闪烁，同时查看源码的话，是没有任何结果显示出来的。</p><p>这里如果我们换成<code>nuxt.js</code>里面专门的<code>api</code>的话，就相当于将数据已经存储在服务器端了，然后再利用<code>ssr</code>去将数据渲染出来，这里就不会出现上面那种在浏览器端去请求数据的情况了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> asyncData () &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; status, <span class="attr">data</span>: &#123; list &#125; &#125; = <span class="keyword">await</span> axios.get(<span class="string">`http://localhost:3000/city/list`</span>)</span><br><span class="line">  <span class="keyword">if</span> (status === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样去查看源代码的话，就会显示成模板显示成功的样子。</p><p>如果我们把<code>asyncData</code>改成<code>fetch</code>的话(他们两个<code>api</code>都可以获得数据)，但是如果使用<code>fetch</code>会发现并不会获得到数据，是因为<code>fetch</code>是用来处理和<code>vuex</code>相关的数据，而<code>asyncData</code>则是用来处理和组件相关的数据，所以使用<code>fetch</code>并不会拿到数据。所以这里就要用<code>asyncData()</code>,想在初始状态那里拿到一些数据是可以使用<code>fetch</code>的。</p><h3 id="vuex在SSR里面的使用"><a href="#vuex在SSR里面的使用" class="headerlink" title="vuex在SSR里面的使用"></a>vuex在SSR里面的使用</h3><p>可以根据<code>nuxt.js</code>里面的<a href="https://zh.nuxtjs.org/guide/vuex-store/" target="_blank" rel="noopener">文档</a>来查看<code>vuex</code>的使用，同样的也是文件即为配置使用方法。</p><p>这样直接创建一个示例就明白了:<br>根据官方文档的需求，我们直接在根目录下面创建一个<code>store</code>目录，里面用来放<code>vuex</code>相关的文件,我们先建立两个示例文件:</p><p><code>store/modules/city.js</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  list: [<span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  add (state, text) &#123;</span><br><span class="line">    state.list.push(text)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  add: <span class="function">(<span class="params">&#123; commit &#125;, text</span>) =&gt;</span> &#123;</span><br><span class="line">    commit(<span class="string">'add'</span>, text)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>store/modules/navbar.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;</span><br><span class="line">  app: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  add (state, text) &#123;</span><br><span class="line">    state.list.push(text)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  add: <span class="function">(<span class="params">&#123; commit &#125;, text</span>) =&gt;</span> &#123;</span><br><span class="line">    commit(<span class="string">'add'</span>, text)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  namespaced: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后根目录下面的文件为<code>store/index.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> city <span class="keyword">from</span> <span class="string">'./modules/city'</span></span><br><span class="line"><span class="keyword">import</span> navbar <span class="keyword">from</span> <span class="string">'./modules/navbar'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    city,</span><br><span class="line">    navbar</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//  把实例放在数据里面验证一下</span></span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br></pre></td></tr></table></figure><p>假如我们想在<code>vue</code>里面直接调用数据的话，这里都不用像<code>vue-cli</code>里面那样去注册啥，直接就可以调用了，假设我们想调用<code>city.js</code>里面的<code>state</code>数据，直接使用<code>$store</code>去调用就可以了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in $store.state.city.list"</span> <span class="attr">:key</span>=<span class="string">"index"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意每次修改了vuex的相关配置之后，都要记得重启即可</strong></p><p>这里的数据也是和<code>服务端</code>同步的，都会被挂载到<code>dom</code>下面去。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Nuxt-js基础&quot;&gt;&lt;a href=&quot;#Nuxt-js基础&quot; class=&quot;headerlink&quot; title=&quot;Nuxt.js基础&quot;&gt;&lt;/a&gt;Nuxt.js基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Vue2&lt;/li&gt;
&lt;li&gt;Vue Router&lt;/li&gt;
&lt;li&gt;Vuex&lt;/li&gt;
&lt;li&gt;Vue Server Renderer&lt;/li&gt;
&lt;li&gt;vue-meta&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先还是&lt;a href=&quot;https://nuxtjs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方地址&lt;/a&gt;给上。&lt;/p&gt;
&lt;p&gt;安装:&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 先安装一下vue-cli工具&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn global add @vue/cli-init &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 初始化模板&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vue init nuxt-community/koa-template&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还源的工具可以使用&lt;code&gt;nrm&lt;/code&gt;，类似于版本控制的&lt;code&gt;npm&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nrm ls&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nuxt.js&lt;/code&gt;是非常适合做&lt;code&gt;vue&lt;/code&gt;的&lt;code&gt;ssr&lt;/code&gt;渲染的，他可以让&lt;code&gt;ssr&lt;/code&gt;变得非常非常简单。&lt;/p&gt;
&lt;p&gt;我们直接利用刚才那个命令来生成一个&lt;code&gt;nuxt.js&lt;/code&gt;模板。&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vue init nuxt-community/koa-template nuxt-start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不过这里可能会遇见一个问题。具体可以参考，项目的&lt;a href=&quot;https://github.com/fireairforce/nuxt-starter/blob/master/README.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;README.md文档&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这东西的设计其实和&lt;code&gt;umi&lt;/code&gt;很类似(可能&lt;code&gt;umi&lt;/code&gt;是借鉴了这边吧。。)有一点就是&lt;code&gt;pages&lt;/code&gt;目录下面的文件即为路由。我们创建一个&lt;code&gt;xxx.vue&lt;/code&gt;，然后去&lt;code&gt;localhost:3000/xxx&lt;/code&gt;,就可以直接访问到对应的页面了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWA核心模块介绍</title>
    <link href="http://zoomdong.site/2019/10/04/pwa-case/"/>
    <id>http://zoomdong.site/2019/10/04/pwa-case/</id>
    <published>2019-10-04T02:08:31.000Z</published>
    <updated>2019-10-04T02:10:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PWA-简介"><a href="#PWA-简介" class="headerlink" title="PWA 简介"></a>PWA 简介</h2><p><code>Progressive Web App</code> 渐进式<code>web</code>应用程序</p><p><code>PWA</code>是由一系列特性组成。</p><h3 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h3><p>整个 pwa 系统的大脑。类似于<code>Web Worker</code>但是具备有更多功能,他是<code>pwa</code>里面最重要的功能。<br>服务工作线程</p><ul><li>常驻内存运行</li><li>代理网络请求</li><li>依赖 https</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>“承诺”控制流</p><ul><li>优化回调地狱</li><li><code>async/await</code>语法同步化</li><li><code>service worker</code>的很多<code>api</code>都<code>promise</code>化了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;&#125;)</span><br><span class="line">.then().then().catch(...)</span><br></pre></td></tr></table></figure><h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>网络请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">'/xxx/xxx'</span>).then(<span class="function"><span class="params">res</span>=&gt;</span>res.json()).then(<span class="function"><span class="params">info</span>=&gt;</span>...)</span><br></pre></td></tr></table></figure><ul><li>比<code>XMLHttpRequest</code>更简洁</li><li><code>Promise</code>风格</li><li>存在一些不足</li></ul><h3 id="cache-API"><a href="#cache-API" class="headerlink" title="cache API"></a>cache API</h3><p>支持资源的缓存系统</p><ul><li>缓存资源(<code>css/scripts/image</code>)</li><li>依赖<code>Service Worker</code>代理网络请求</li><li>支持离线程序运行(<code>PWA</code>的一个很重要的特性)</li></ul><h3 id="Notification-API"><a href="#Notification-API" class="headerlink" title="Notification API"></a>Notification API</h3><p>消息推送</p><ul><li>支持电脑的消息推送</li></ul><a id="more"></a><h2 id="Service-Worker-1"><a href="#Service-Worker-1" class="headerlink" title="Service-Worker"></a>Service-Worker</h2><p>对于浏览器有要求的，而且这个是不能模拟的.</p><p>我们可以新建一个<code>pwa-case</code>的目录来写这些<code>demo</code>,使用<code>serve</code>来启动一个<code>http</code>服务器.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install serve -g</span><br></pre></td></tr></table></figure><p>在里面<code>touch</code>一个<code>index.html</code>和<code>sw.js</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./index.css"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>PWA CASE<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// scope是当前脚本控制的页面</span></span></span><br><span class="line"><span class="actionscript">      navigator.serviceWorker.register(<span class="string">"./sw.js"</span>, &#123; scope: <span class="string">"./"</span> &#125;).then(</span></span><br><span class="line">        (res) =&gt; &#123;</span><br><span class="line"><span class="actionscript">          <span class="comment">//   成功注册了service-worker,可以在控制台看见，也可以在Application的Service Workers里面查看</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(res);</span></span><br><span class="line">        &#125;,</span><br><span class="line">        (err) =&gt; &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(err);</span></span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在<code>html</code>页面里面注册一个<code>service-worker</code>的脚本，然后开始使用起来。</p><p><code>service-worker</code>里面最关键的<code>api</code>还是它的几个生命周期函数(这里就包含了三个生命周期函数,<code>install</code>,<code>activate</code>,<code>fetch</code>):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在一个新的service-worker安装就就会被触发</span></span><br><span class="line">self.addEventListener(<span class="string">"install"</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"install: "</span>, event);</span><br><span class="line">  <span class="comment">// promise完成后,install 才相当于真正的完成了，它会推迟activate的时间，这里会等待5s</span></span><br><span class="line">  <span class="comment">// event.waitUntil(new Promise(resolve=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//     setTimeout(resolve,5000);</span></span><br><span class="line">  <span class="comment">// &#125;))</span></span><br><span class="line">  <span class="comment">// self.skipWating强制停止旧的service-workder,开启新的,强行挤掉旧版本的</span></span><br><span class="line">  <span class="comment">// event.waitUntil(self.skipWaiting());</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 激活,代表service-worker事件被正式启动</span></span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">"activate"</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"activate: "</span>, event);</span><br><span class="line">  event.waitUntil(self.clients.claim());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">"fetch"</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"fetch: "</span>, event);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在这个<code>js</code>代码里面<code>fecth</code>使用监听文件的网络请求的，只要<code>html</code>文件去获取新的资源(比如在里面去调用一个<code>css</code>文件)，都会被监听出来。然后<code>install</code>主要是在<code>service-workder</code>安装的时候触发的，而<code>activate</code>则是在<code>service-worker</code>在被激活的时候触发。</p><p>里面有一些重要的<code>api</code>例如<code>event.waitUntil()</code>和<code>self.skipWaiting())</code>都是十分重要的。</p><h2 id="Promise-1"><a href="#Promise-1" class="headerlink" title="Promise"></a>Promise</h2><p>这个<code>api</code>不做过多讲解，写多了都知道的。</p><h2 id="fetch-1"><a href="#fetch-1" class="headerlink" title="fetch"></a>fetch</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.responseType = <span class="string">"json"</span>;</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//  等于4代表请求结束了</span></span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.sattus &lt; <span class="number">300</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(xhr.response);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"/userinfo.json"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>如果使用<code>fetch</code>去处理这种请求的话，可以直接一行代码就解决问题:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fetch(<span class="string">"/useinfo.json"</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json())</span><br><span class="line">  .then(<span class="function">(<span class="params">info</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(info);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>当然<code>fetch</code>的第二个参数可以填写很多其他的东西，例如一些请求头，请求类型之类的参数。</p><h2 id="cache-API-1"><a href="#cache-API-1" class="headerlink" title="cache API"></a>cache API</h2><p>除了<code>service worker</code>之外，那么<code>cache API</code>就是<code>pwa</code>的第二个顶梁柱了。</p><p>现在我们准备使用<code>cache API</code>来实现一个离线缓存的功能。</p><p>还是用之前在<code>service-worker</code>那边使用过的<code>demo</code>来作为例子:</p><p>在<code>html</code>的<code>body</code>标签里面加上一个<code>html</code>元素用于标识。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello PWA<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>然后在<code>sw.js</code>里面使用之前的<code>sw</code>生命周期函数去进行一个<code>cache</code>的操作。<br>大致流程是这样的:</p><ol><li>在<code>service-worker</code>被安装的时候写入缓存资源(同时要选择好缓存的文件,这里选择的就是<code>html</code>自身和它的<code>css</code>文件)</li><li>然后在进行资源的请求的时候(<code>fetch</code>这个生命周期函数这一步的时候)，先去缓存里面查找，如果缓存命中了的话，那么就走缓存，否则就利用<code>fetch</code>去请求资源，然后再使用缓存去存一下。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CHACHE_NAME = <span class="string">'cache-v1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在一个新的service-worker安装就就会被触发</span></span><br><span class="line">self.addEventListener(<span class="string">'install'</span>,event=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'install: '</span>, event);</span><br><span class="line">    <span class="comment">// 打开一个缓存空间</span></span><br><span class="line">    event.waitUntil(caches.open(CHACHE_NAME).then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 写入缓存的资源</span></span><br><span class="line">        cache.addAll([</span><br><span class="line">          <span class="string">'/'</span>,</span><br><span class="line">          <span class="string">'./index.css'</span></span><br><span class="line">        ])</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 激活,代表service-worker事件被正式启动</span></span><br><span class="line">self.addEventListener(<span class="string">'activate'</span>,event=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'activate: '</span>, event);</span><br><span class="line">    event.waitUntil(self.clients.claim());</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">self.addEventListener(<span class="string">'fetch'</span>,event=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fetch: '</span>, event);</span><br><span class="line">    <span class="comment">// 去cache里面找资源，找到就返回，找不到就利用网络请求去拿</span></span><br><span class="line">    event.respondWith(caches.open(CHACHE_NAME).then(<span class="function"><span class="params">cache</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.match(event.request).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 如果res存在，就表示缓存命中了</span></span><br><span class="line">            <span class="keyword">if</span>(res)&#123;</span><br><span class="line">              <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> fetch(event.request).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">                cache.push(event.request,res.clone());</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;) </span><br><span class="line">    &#125;))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后我们用<code>serve</code>启动项目之后，打开<code>localhost:5000</code>第一次看<code>network</code>里面的资源还是来自网络请求，可是当我们第二次刷新的时候就会发现资源来自缓存了，然后我们关掉我们的应用服务，再去访问页面，会发现页面仍然能够访问。</p><p>这种方式就使得<code>web app</code>用起来和原生的<code>app</code>有一种差不多的感觉。</p><p>如果我们想要升级一下缓存的版本，我们需要在<code>activate</code>这个生命周期函数里面去进行一波处理:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 激活,代表service-worker事件被正式启动</span></span><br><span class="line">self.addEventListener(<span class="string">"activate"</span>, (event) =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"activate: "</span>, event);</span><br><span class="line">  event.waitUntil(</span><br><span class="line">    caches.keys().then(<span class="function">(<span class="params">cacheNames</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 这里直接使用并行处理</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">Promise</span>.all(</span><br><span class="line">        cacheNames.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (item !== CHACHE_NAME) &#123;</span><br><span class="line">            <span class="keyword">return</span> caches.delete(item);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">      );</span><br><span class="line">    &#125;),</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>然后修改<code>CACHE_NAME</code>为<code>v2</code>之后再刷新页面，会发现缓存的<code>Application</code>的<code>Clear Storage</code>里面的内存由<code>4.7kb</code>上升到<code>6.3kb</code>,这是因为这个时候，这里会存在着两份缓存。我们要强制升级<code>service-worker</code>的版本的话，需要在<code>service workers</code>那里的黄色等待按钮那里点击<code>skipWaiting</code>按钮去进行一个强制的升级即可。</p><p>这个时候就会使用新的缓存策略。</p><h2 id="Notification-API-1"><a href="#Notification-API-1" class="headerlink" title="Notification API"></a>Notification API</h2><p>消息推送<code>API</code>。</p><p>这个<code>api</code>我们都不用写代码，直接去<code>console</code>的控制台去使用就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Notification.permission()</span><br><span class="line"><span class="comment">// "default"</span></span><br><span class="line">Notification.requestPermission().then(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">console</span>.log(item))</span><br><span class="line"><span class="comment">// 把这行代码放在控制台上运行就会弹出浏览器的提示框了，然后会点击允许之后就会输出"granted"，点击禁止之后输出"denied"</span></span><br></pre></td></tr></table></figure><p>然后我们想要重置的话，直接去点击url上面的那个感叹号去设置成<code>&quot;询问(默认)&quot;</code>就可以了。</p><p>授权通过之后我们就可以弹出通知了.</p><p>第一个参数为标题,后面参数<code>body</code>里面的为内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Notification(<span class="string">"Hello PWA"</span>,&#123; <span class="attr">body</span>:<span class="string">"This is from PWA"</span> &#125;)</span><br></pre></td></tr></table></figure><p>这样在控制台运行之后，就会输出相对应的通知内容了。</p><p>如果我们重新将通知模式设置为默认，然后再在<code>sw.js</code>的环境下去输出<code>Notification.permission()</code>会发现默认输出就是denied…然后调用<code>Notification.requestPermission()</code>都会发现方法并不存在，因为在<code>service worker</code>下是不允许弹出授权请求的，因为有可能页面都打不开。。这样用户都不好直接判断是哪个页面在弹出通知。</p><p>所以我们需要切换成页面的上下文来进行一个消息的弹出。</p><p>注意切换上下文就是在<code>console</code>控制台那里切换<code>JavaScript Context</code>即可。当我们切换成页面的之后(即为<code>top</code>)，然后使用<code>Notification.requestPermission()</code>允许页面弹出通知之后，再切换成<code>sw.js</code>的运行环境即可。</p><p>这里创建通知又需要使用另外一个<code>API</code>了，即为:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.registration.showNotification(<span class="string">'Hello PWA'</span>,&#123;<span class="attr">body</span>:<span class="string">'My first PWA'</span>&#125;)</span><br></pre></td></tr></table></figure><p>这是因为这个<code>API</code>是在<code>service-worker</code>注册的时候产生出来的，它只在<code>sw</code>的运行环境下面才会存在。这样这个时候就可以弹出相对应的通知了。</p><h2 id="在业务中开启pwa"><a href="#在业务中开启pwa" class="headerlink" title="在业务中开启pwa"></a>在业务中开启pwa</h2><p><code>create-react-app</code>使用的是一个<code>workbox-webpack-plugin</code>。<code>eject</code>出来之后是能看到这个配置的，它不会在开发环境打开，但是生产环境会给我们打开出几个<code>pwa</code>离线缓存的文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PWA-简介&quot;&gt;&lt;a href=&quot;#PWA-简介&quot; class=&quot;headerlink&quot; title=&quot;PWA 简介&quot;&gt;&lt;/a&gt;PWA 简介&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Progressive Web App&lt;/code&gt; 渐进式&lt;code&gt;web&lt;/code&gt;应用程序&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PWA&lt;/code&gt;是由一系列特性组成。&lt;/p&gt;
&lt;h3 id=&quot;Service-Worker&quot;&gt;&lt;a href=&quot;#Service-Worker&quot; class=&quot;headerlink&quot; title=&quot;Service Worker&quot;&gt;&lt;/a&gt;Service Worker&lt;/h3&gt;&lt;p&gt;整个 pwa 系统的大脑。类似于&lt;code&gt;Web Worker&lt;/code&gt;但是具备有更多功能,他是&lt;code&gt;pwa&lt;/code&gt;里面最重要的功能。&lt;br&gt;服务工作线程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常驻内存运行&lt;/li&gt;
&lt;li&gt;代理网络请求&lt;/li&gt;
&lt;li&gt;依赖 https&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h3&gt;&lt;p&gt;“承诺”控制流&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优化回调地狱&lt;/li&gt;
&lt;li&gt;&lt;code&gt;async/await&lt;/code&gt;语法同步化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;service worker&lt;/code&gt;的很多&lt;code&gt;api&lt;/code&gt;都&lt;code&gt;promise&lt;/code&gt;化了&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;resolve,reject&lt;/span&gt;)=&amp;gt;&lt;/span&gt;&amp;#123;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.then().then().catch(...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;fetch&quot;&gt;&lt;a href=&quot;#fetch&quot; class=&quot;headerlink&quot; title=&quot;fetch&quot;&gt;&lt;/a&gt;fetch&lt;/h3&gt;&lt;p&gt;网络请求&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fetch(&lt;span class=&quot;string&quot;&gt;&#39;/xxx/xxx&#39;&lt;/span&gt;).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;res&lt;/span&gt;=&amp;gt;&lt;/span&gt;res.json()).then(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;info&lt;/span&gt;=&amp;gt;&lt;/span&gt;...)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;比&lt;code&gt;XMLHttpRequest&lt;/code&gt;更简洁&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Promise&lt;/code&gt;风格&lt;/li&gt;
&lt;li&gt;存在一些不足&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;cache-API&quot;&gt;&lt;a href=&quot;#cache-API&quot; class=&quot;headerlink&quot; title=&quot;cache API&quot;&gt;&lt;/a&gt;cache API&lt;/h3&gt;&lt;p&gt;支持资源的缓存系统&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缓存资源(&lt;code&gt;css/scripts/image&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;依赖&lt;code&gt;Service Worker&lt;/code&gt;代理网络请求&lt;/li&gt;
&lt;li&gt;支持离线程序运行(&lt;code&gt;PWA&lt;/code&gt;的一个很重要的特性)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Notification-API&quot;&gt;&lt;a href=&quot;#Notification-API&quot; class=&quot;headerlink&quot; title=&quot;Notification API&quot;&gt;&lt;/a&gt;Notification API&lt;/h3&gt;&lt;p&gt;消息推送&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持电脑的消息推送&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue基础-下</title>
    <link href="http://zoomdong.site/2019/09/25/vue-2/"/>
    <id>http://zoomdong.site/2019/09/25/vue-2/</id>
    <published>2019-09-25T07:45:34.000Z</published>
    <updated>2019-09-25T07:46:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul><li><p>props</p><p>组件的参数传递</p></li><li><p>slot </p></li></ul><p>插槽在组件抽象设计中的应用</p><ul><li>自定义事件</li></ul><p>父子组件的通信方式</p><p>组件的基础示例可以先看一波<a href="https://cn.vuejs.org/v2/guide/components.html" target="_blank" rel="noopener">文档</a>,但是我们一般都不会用这里的这种方式去定义我们的组件。(<code>Vue.Component</code>不会用)</p><a id="more"></a><p>我们直接从<a href="https://cn.vuejs.org/v2/guide/components-registration.html" target="_blank" rel="noopener">深入了解组件</a>这个地方的文档开始吧。</p><p>通过父组件给子组件传递值,使用<code>props</code>来进行值的传递:</p><p><code>child.vue</code>的代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"com"</span>&gt;</span></span><br><span class="line">      child components</span><br><span class="line">      &#123;&#123; name &#125;&#125;</span><br><span class="line">      &#123;&#123; age &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 子组件这边通过`props`这个属性就可以拿到父组件的值了</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">"age"</span>],</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">"com"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>父组件那边的代码为<code>App.vue</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 这里传递的是动态的值，所以前面加上:  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">child</span> <span class="attr">:age</span>=<span class="string">"age"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">"./components/child.vue"</span>;</span></span><br><span class="line"><span class="actionscript"><span class="meta"><span class="meta-keyword">import</span> "./components/n";</span> </span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">    name: <span class="string">'app'</span>,</span></span><br><span class="line">    components: &#123;</span><br><span class="line">        child</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span>&#123;</span></span><br><span class="line">            age: 18</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如果在子组件里面想去触发父组件里面的方法的话，可以使用<code>$emit</code>这个参数去进行。</p><p>大概过程是这样的:</p><p><code>child.vue</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"com"</span>&gt;</span></span><br><span class="line">      child components</span><br><span class="line">      &#123;&#123; name &#125;&#125;</span><br><span class="line">      &#123;&#123; age &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"patch"</span>&gt;</span>发送到父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  props: [<span class="string">"age"</span>],</span></span><br><span class="line">  data() &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      name: <span class="string">"com"</span></span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line"><span class="actionscript">    patch: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="comment">// 第一个是方法名，第二个是传递到父组件的参数</span></span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$emit(<span class="string">'patch'</span>,<span class="string">'wdlj'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>父组件里面想要接收的话，这样即可<code>App.vue</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; age &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- age前面相当于加了一个动态的修饰符 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span> @<span class="attr">patch</span>=<span class="string">"msg"</span> <span class="attr">:age</span>=<span class="string">"age"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> child <span class="keyword">from</span> <span class="string">"./components/child"</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">"app"</span>,</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    child</span><br><span class="line">  &#125;,</span><br><span class="line">  data()&#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      age: 18</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line"><span class="actionscript">    msg:<span class="function"><span class="keyword">function</span><span class="params">(b)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.age += <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.console.log(b);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是不同层级之间的组件去进行数据交互的话，那是需要去使用<code>vuex</code>的。</p><h3 id="slot"><a href="#slot" class="headerlink" title="slot"></a>slot</h3><p>我们在父组件里面引入一个子组件<code>Child.vue</code>，同时我们需要在子组件里面去动态添加一些东西，类似于下面的代码:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:age</span>=<span class="string">"age"</span> @<span class="attr">patch</span>=<span class="string">"msg"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我要加些内容在这里<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是显然按照上面的代码是铁定实现不了的。。。如果我们想动态地往组件里面加入东西，是需要一个叫做<code>slot</code>的API去加入一些东西的。</p><p>我们在子组件<code>child</code>的尾部加上<code>&lt;slot&gt;&lt;/slot&gt;</code>,这样上面的<code>h1</code>标签就可以动态地加入进去。如果有多个插槽的话，给插槽加里面加一个<code>name</code>属性即可。<br>子组件的插槽代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span> = <span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span> = <span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span>s</span><br></pre></td></tr></table></figure></p><p>父组件里面的代码为:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"a"</span>&gt;</span>我要加一些东西<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">slot</span>=<span class="string">"b"</span>&gt;</span>我要加在下面哈哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由的话，<code>vue</code>官网是有一个专门的文档可以供参考的，<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">地址点击</a></p><p>安装一波<code>vue-router</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router</span><br></pre></td></tr></table></figure></p><p>我们然后在<code>src</code>目录下面新建一个<code>routes.js</code>,里面的代码内容是这样的:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">"vue-router"</span>;</span><br><span class="line"><span class="keyword">import</span> pageA <span class="keyword">from</span> <span class="string">"./pages/a.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> pageB <span class="keyword">from</span> <span class="string">"./pages/b.vue"</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">"./App.vue"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">"/"</span>, <span class="attr">component</span>:App &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">"/pagea"</span>, <span class="attr">component</span>: pageA &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">"/pageb"</span>, <span class="attr">component</span>: pageB &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></p><p>大概这样写，<code>pageA</code>和<code>pageB</code>自己随便建立。</p><p>同时要引入使用这个路由的话，可以直接引入一波:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"./router"</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// render: h =&gt; h(App),</span></span><br><span class="line">  router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></p><p>然后建立一个<code>vue.config.js</code>,里面可以添加一些<code>webpack</code>的配置项，我们可以这样写(和以前的<code>webpack.config.js</code>还是有异曲同工之妙的):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    runtimeCompiler: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后千万别忘了在<code>index.html</code>里面的挂载点里面加入一个<code>router-view</code>的模板。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span> =<span class="string">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span> =<span class="string">"/pagea"</span>&gt;</span>PageA页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span> =<span class="string">"/pageb"</span>&gt;</span>PageB页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个<code>router-link</code>的作用和<code>react-router-dom</code>里面的<code>Link</code>是一样的哈哈哈哈。</p><h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>首先文档先献上：<a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">Vuex文档地址</a></p><p>建议多看看文档里面关于<code>Vuex</code>的讲解，其实我感觉这玩意儿比<code>Redux</code>要简化一点了,这里还是用一个计数器来作为例子(23333,<code>redux</code>也是用这个例子学的233)</p><p>直接来搞一波<code>demo</code>,先去<code>src</code>目录下新建一个<code>store.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"><span class="comment">// data,computed,props</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  increment(state) &#123;</span><br><span class="line">    state.count++;</span><br><span class="line">  &#125;,</span><br><span class="line">  decrement(state) &#123;</span><br><span class="line">    state.count--;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 接收组件的用户行为,然后去修改一波state</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  increment: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    commit(<span class="string">"increment"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  decrement: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    commit(<span class="string">"decrement"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>store</code>创建完成之后,去<code>main.js</code>里面直接搞一发,把<code>store</code>和<code>Vue</code>里面的其他组件关联起来:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"./router"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store"</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// render: h =&gt; h(App),</span></span><br><span class="line">  router,</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></p><p>然后<code>components</code>目录下面新建一个<code>vuex.vue</code>:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vuex"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这个state相当于组件里面的data部分 --&gt;</span></span><br><span class="line">      vuex &#123;&#123; $store.state.count &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"increment"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"decrement"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 做了一次关联</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  methods: mapActions([</span><br><span class="line"><span class="actionscript">      <span class="string">'increment'</span>,</span></span><br><span class="line"><span class="actionscript">      <span class="string">'decrement'</span></span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>App.vue</code>里面引入一波这个组件就可以了。</p><p>这样页面里面的出现两个点击的<code>button</code>,这样就可以去进行<code>Vuex</code>的数据交互了。</p><h2 id="Vuex的高级用法"><a href="#Vuex的高级用法" class="headerlink" title="Vuex的高级用法"></a>Vuex的高级用法</h2><p>这里演示一波三个不同页面使用不同的<code>store</code>去进行状态管理。</p><p>干脆我们直接在<code>src</code>目录下新建一个<code>store</code>目录.</p><p><code>store/modules/a.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    money: <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    add(state)&#123;</span><br><span class="line">        state.money ++;</span><br><span class="line">    &#125;,</span><br><span class="line">    reduce(state)&#123;</span><br><span class="line">        state.money --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    add: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">       commit(<span class="string">'add'</span>);  </span><br><span class="line">    &#125;,</span><br><span class="line">    reduce: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'reduce'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样也写个<code>b.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    count: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    add(state)&#123;</span><br><span class="line">        state.count ++;</span><br><span class="line">    &#125;,</span><br><span class="line">    reduce(state)&#123;</span><br><span class="line">        state.count --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    add: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">       commit(<span class="string">'add'</span>);  </span><br><span class="line">    &#125;,</span><br><span class="line">    reduce: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">'reduce'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    namespaced: <span class="literal">true</span>,</span><br><span class="line">    state,</span><br><span class="line">    mutations,</span><br><span class="line">    actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后在一个公共的目录里面导出出去:</p><p><code>store/index.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span>;</span><br><span class="line"><span class="keyword">import</span> money <span class="keyword">from</span> <span class="string">"./modules/a"</span>;</span><br><span class="line"><span class="keyword">import</span> count <span class="keyword">from</span> <span class="string">"./modules/b"</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">        money,</span><br><span class="line">        count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>去<code>main.js</code>里面将<code>store</code>与<code>vue</code>进行一个关联:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">"./router"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store/index"</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  store</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure></p><p>然后老规矩去新建<code>components/a.vue</code>,注意观察这里在<code>vuex</code>里面拿数据和调用方法和之前的区别.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"a"</span>&gt;</span>pages a &#123;&#123;$store.state.money.money&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>增加money<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"reduce"</span>&gt;</span>减少money<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">   methods: mapActions(<span class="string">'money'</span>,[</span></span><br><span class="line"><span class="actionscript">     <span class="string">'add'</span>,</span></span><br><span class="line"><span class="actionscript">     <span class="string">'reduce'</span></span></span><br><span class="line">   ])</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>同样的<code>b.vue</code>也是类似:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">      pages b &#123;&#123; $store.state.count.count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"add"</span>&gt;</span>增加数量<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"reduce"</span>&gt;</span>减少数量<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; mapActions &#125; <span class="keyword">from</span> <span class="string">"vuex"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  methods: mapActions(<span class="string">'count'</span>,[</span></span><br><span class="line"><span class="actionscript">    <span class="string">"add"</span>,</span></span><br><span class="line"><span class="actionscript">    <span class="string">"reduce"</span></span></span><br><span class="line">  ])</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后如果我们想在组件里面传递参数给<code>vuex</code>的话，以<code>b.vue</code>做个例子吧:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"add(2)"</span>&gt;</span>增加数量<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>我们在这里传递了一个参数<code>2</code>,然后我们去<code>b.js</code>那边接收一波:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  add(state,payload) &#123;</span><br><span class="line">    <span class="built_in">window</span>.console.log(payload);</span><br><span class="line">    state.count+=payload;</span><br><span class="line">  &#125;,</span><br><span class="line">  reduce(state) &#123;</span><br><span class="line">    state.count--;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  add: <span class="function">(<span class="params">&#123; commit &#125;, payload</span>) =&gt;</span> &#123;</span><br><span class="line">    commit(<span class="string">"add"</span>, payload);</span><br><span class="line">  &#125;,</span><br><span class="line">  reduce: <span class="function">(<span class="params">&#123; commit &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    commit(<span class="string">"reduce"</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这样就相当于完成了一个传递参数的过程。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;props&lt;/p&gt;
&lt;p&gt;组件的参数传递&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;slot &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;插槽在组件抽象设计中的应用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义事件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;父子组件的通信方式&lt;/p&gt;
&lt;p&gt;组件的基础示例可以先看一波&lt;a href=&quot;https://cn.vuejs.org/v2/guide/components.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt;,但是我们一般都不会用这里的这种方式去定义我们的组件。(&lt;code&gt;Vue.Component&lt;/code&gt;不会用)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>vue基础-上</title>
    <link href="http://zoomdong.site/2019/09/25/vue-1/"/>
    <id>http://zoomdong.site/2019/09/25/vue-1/</id>
    <published>2019-09-25T07:45:24.000Z</published>
    <updated>2019-09-25T07:46:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>使用的版本为:</p><ul><li>vue-cli@3</li><li><a href="mailto:vue@2.5" target="_blank" rel="noopener">vue@2.5</a></li></ul><p><code>vue create vue-learn</code></p><p>一开始直接进去选一个默认的配置就开始搞起来了。</p><a id="more"></a><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><p>一个<code>vue</code>文件由<code>template</code>,<code>script</code>,<code>style</code>构成。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">// 这里有两种设置变量的方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    name:<span class="string">'Hello World'</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">        msg: <span class="built_in">String</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            msg1:<span class="string">'Hello World'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>模板语法:<br>文本:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">  Message:&#123;&#123;msg&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原始 html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;rawHtml&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>特性(如果我们想改变<code>dom</code>的id属性):<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">"dynamicId"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>表达式(变量加1,三目操作,链式操作):<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; number + <span class="number">1</span> &#125;&#125;&#123;&#123; ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> &#125;&#125; &#123;&#123; message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;&#125;</span><br></pre></td></tr></table></figure></p><p><code>props</code>相当于一个传参的入口，我们借助<code>props</code>从父组件往子组件里面传值。</p><p>例子如下:<br><code>App.vue</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;HelloWorld msg=<span class="string">"&lt;span style='color:red;'&gt;Hello world&lt;/span&gt;"</span>/&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./components/HelloWorld.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'app'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">#app &#123;</span></span><br><span class="line"><span class="regexp">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span></span><br><span class="line"><span class="regexp">  -webkit-font-smoothing: antialiased;</span></span><br><span class="line"><span class="regexp">  -moz-osx-font-smoothing: grayscale;</span></span><br><span class="line"><span class="regexp">  text-align: center;</span></span><br><span class="line"><span class="regexp">  color: #2c3e50;</span></span><br><span class="line"><span class="regexp">  margin-top: 60px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><p><code>HelloWorld.vue</code>的样子如下:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;!-- 这里渲染的是字符串 --&gt; </span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">     &lt;!-- 这里渲染的是原生的html,同时有个动态的属性值 --&gt; </span></span><br><span class="line"><span class="regexp">    &lt;div v-html="msg1" v-bind="id"&gt;&lt;/</span>div&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">     &#123;&#123; number + <span class="number">1</span> &#125;&#125;  </span><br><span class="line">    &lt;<span class="regexp">/div&gt; </span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'HelloWorld',</span></span><br><span class="line"><span class="regexp">  props: &#123;</span></span><br><span class="line"><span class="regexp">    msg: String</span></span><br><span class="line"><span class="regexp">  &#125;,</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      msg1:'&lt;span style="color:red"&gt;Hello World&lt;/</span>span&gt;<span class="string">',</span></span><br><span class="line"><span class="string">      id:'</span>txt<span class="string">',</span></span><br><span class="line"><span class="string">      number: 0</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h2 id="指令系统"><a href="#指令系统" class="headerlink" title="指令系统"></a>指令系统</h2><p><strong>模板语法里面的指令</strong>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 当seen的值为true的时候这行才会显示出来，false不显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>现在你看得到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这行的内容对应上面if的else --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-else</span>&gt;</span>你又失败了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">// some codes..</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">data()&#123;</span><br><span class="line"><span class="actionscript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      seen: <span class="literal">true</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里一定要记得去<a href="https://cn.vuejs.org/v2/guide/syntax.html" target="_blank" rel="noopener">官方文档</a>里面好好看看。</p><h2 id="自定义指令"><a href="#自定义指令" class="headerlink" title="自定义指令"></a>自定义指令</h2><p><a href="https://cn.vuejs.org/v2/guide/custom-directive.html" target="_blank" rel="noopener">官方文档</a></p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ul><li>功能没有复杂到用组件去做</li></ul><p>参考官方文档的一个<code>demo</code>:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册一个全局自定义指令 `v-focus`</span></span><br><span class="line">Vue.directive(<span class="string">'focus'</span>, &#123;</span><br><span class="line">  <span class="comment">// 当被绑定的元素插入到 DOM 中时……</span></span><br><span class="line">  inserted: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 聚焦元素</span></span><br><span class="line">    el.focus()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>我们可以自己写一个例子:<code>compoenents/n.js</code>，功能大概是拿到某个使用该指令标签的<code>value</code>值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span>;</span><br><span class="line"></span><br><span class="line">Vue.directive(<span class="string">"n"</span>, &#123;</span><br><span class="line">    <span class="comment">// el是绑定元素的dom节点</span></span><br><span class="line">  bind: <span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// textContent是节点的内容属性,binding是节点的值  </span></span><br><span class="line">    el.textContent = <span class="built_in">Math</span>.pow(binding.value,<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params">el,binding</span>) </span>&#123;</span><br><span class="line">    el.textContent = <span class="built_in">Math</span>.pow(binding.value,<span class="number">2</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>然后在<code>App.vue</code>里面的<code>script</code>里面导入一波:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="meta"><span class="meta-keyword">import</span> './components/n';</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><code>HelloWorld.vue</code>里面可以用一波:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-n</span>=<span class="string">"4"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个时候页面上就会渲染出<code>16</code>，如果我们将其动态更新为<code>3</code>,则页面也会随着<code>热更新</code>变更为<code>9</code>。</p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><p>去阻止一个默认指令,类似与之前<code>react</code>使用<code>antd</code>表单里面的<code>e.prevent()</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里可以阻止一个默认的事件行为(比如链接的跳转)。</p><h3 id="指令的缩写"><a href="#指令的缩写" class="headerlink" title="指令的缩写"></a>指令的缩写</h3><p>以下的操作都是等价的:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><p><code>Basic Demo</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> = <span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message:"&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message:"&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>只要<code>message</code>的值变了，下面的值也会跟着一起去发生变化，具有一种监听的效果。</p><p>应用场景:<br>具有依赖关系的数据监听。</p><p><code>demo</code>大概是这样的，当某个值发生了变化的时候，所有和他有关系的值都会跟着发生变化。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    我借你&#123;&#123;money&#125;&#125;,你还我&#123;&#123;a&#125;&#125;,还剩&#123;&#123;b&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="actionscript">    name:<span class="string">"HelloWorld"</span>,</span></span><br><span class="line">    data()&#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span>&#123;</span></span><br><span class="line">        money: 100,</span><br><span class="line">        a: 10</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line"><span class="actionscript">      b:<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">this</span>.money - <span class="keyword">this</span>.a;</span></span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="类与样式"><a href="#类与样式" class="headerlink" title="类与样式"></a>类与样式</h2><h3 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法:"></a>对象语法:</h3><p>适合较多的<code>class</code>名或者动态的<code>class</code></p><h3 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h3><p>适合较少的<code>class</code>名</p><p>大概有这样几种用法:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 使用v-bind为之添加class属性，加两个属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[a1,a2]"</span>&gt;</span></span><br><span class="line">      我借你&#123;&#123;money&#125;&#125;，你换我&#123;&#123;a&#125;&#125;,还剩&#123;&#123;b&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当a3为true才有test-1类名，否则没有 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'test-1':a3&#125;"</span>&gt;</span></span><br><span class="line">       style object</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里会加上两个属性，`test-1`和`test-1`和上面类似 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"obj"</span>&gt;</span></span><br><span class="line">        style obj</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">     data()&#123;</span><br><span class="line"><span class="actionscript">       <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="actionscript">         a1:<span class="string">"test-1"</span>,</span></span><br><span class="line"><span class="actionscript">         a2:<span class="string">"test-2"</span>,</span></span><br><span class="line"><span class="actionscript">         a3: <span class="literal">true</span>,</span></span><br><span class="line">         obj: &#123;</span><br><span class="line"><span class="actionscript">           <span class="string">'test-1'</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">           <span class="string">'test-2'</span>:<span class="literal">true</span></span></span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="条件-amp-列表渲染"><a href="#条件-amp-列表渲染" class="headerlink" title="条件&amp;列表渲染"></a>条件&amp;列表渲染</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p><code>if else</code>,<code>for</code>的模板处理方式</p><h3 id="分组用法"><a href="#分组用法" class="headerlink" title="分组用法"></a>分组用法</h3><p>比如说我们想动态的遍历一个列表里面值，或者我们想在渲染的列表里面的每一项里面都加上一些东西,比如加一些其他的元素，就类似列表的动态的渲染:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 这里和react里面使用map遍历有点不同hhh --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item,index) in list"</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">         &#123;&#123; item &#125;&#125; , &#123;&#123; index &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 列表渲染里面添加一些其他的属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span></span><br><span class="line">      　<span class="comment">&lt;!-- 这里两个li的key值在同时渲染出来的时候不能相同 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">"item + 1"</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">           &#123;&#123; item &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"> <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">   data()&#123;</span><br><span class="line"><span class="actionscript">     <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">       list:[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>]</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><ul><li><p>定义&amp;缩写</p><p>事件的定义及缩写</p></li><li><p>内联写法</p><p>事件传参和事件对象</p></li><li><p>时间修饰符</p><p>快速结合键盘时间提升效率</p></li></ul><p>我们在<code>compoenents</code>目录下面新建一个<code>events.vue</code>,用一个最经典的<code>count</code>计数来作为例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"events"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 在vue下面注册事件如何拿到原生对象 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"msg('s',$event)"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">button</span>&gt;</span>   </span><br><span class="line">      <span class="comment">&lt;!--这里会出现一个冒泡的场景  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span> @<span class="attr">click</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>parent<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span> @<span class="attr">click.stop</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">           child</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>点击 &#123;&#123;count&#125;&#125; +1<span class="tag">&lt;/<span class="name">button</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  data: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      counter: 0,</span><br><span class="line">      count: 0</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="actionscript">    msg: <span class="function"><span class="keyword">function</span><span class="params">(a, b)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//   b里面可以拿到原生的dom对象</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.console.log(<span class="built_in">Math</span>.random(), a, b);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    parent: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.console.log(<span class="string">`parent`</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    child: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.console.log(<span class="string">`child`</span>);</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="actionscript">    handleClick: <span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.count += <span class="number">1</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>App.vue</code>里面引入一波(使用<code>import</code>导入，然后<code>components</code>里面写一下):<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ev</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> ev <span class="keyword">from</span> <span class="string">"./components/events.vue"</span>;</span></span><br><span class="line"><span class="actionscript"><span class="meta"><span class="meta-keyword">import</span> "./components/n";</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name:<span class="string">'app'</span>,</span></span><br><span class="line">  components:&#123;</span><br><span class="line">    ev</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>事件修饰符的<a href="https://cn.vuejs.org/v2/guide/events.html" target="_blank" rel="noopener">文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g @vue/cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用的版本为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;vue-cli@3&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;mailto:vue@2.5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue@2.5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;vue create vue-learn&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;一开始直接进去选一个默认的配置就开始搞起来了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>typescript2-基础知识(下)</title>
    <link href="http://zoomdong.site/2019/09/20/ts-2-2/"/>
    <id>http://zoomdong.site/2019/09/20/ts-2-2/</id>
    <published>2019-09-20T02:16:31.000Z</published>
    <updated>2019-09-20T02:21:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类的一些基本示例:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greteer&#123;</span><br><span class="line">    greeting: <span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">message:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.greeting = message;</span><br><span class="line">    &#125;</span><br><span class="line">    greet()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello,'</span> + <span class="keyword">this</span>.greeting</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> Greteer(<span class="string">'world'</span>);</span><br><span class="line">greeter.greet();</span><br></pre></td></tr></table></figure></p><p>类里面允许使用继承来拓展现有的类<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal&#123;</span><br><span class="line">    move(distance:<span class="built_in">number</span> = <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`Animal move <span class="subst">$&#123;distance&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal&#123;</span><br><span class="line">    bark()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'wolf!wolf!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.bark();</span><br><span class="line">dog.move(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>一个更复杂的继承示例:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animals &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  move(distance:<span class="built_in">number</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span>m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Snake <span class="keyword">extends</span> Animals&#123;</span><br><span class="line">   <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">       <span class="keyword">super</span>(name);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   move(distance:<span class="built_in">number</span> = <span class="number">5</span>)&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Slitering ....'</span>);</span><br><span class="line">      <span class="keyword">super</span>.move(distance);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Hourse <span class="keyword">extends</span> Animals&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">    move(distance:<span class="built_in">number</span>=<span class="number">45</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Galloping...'</span>);</span><br><span class="line">        <span class="comment">// 去给父类里面传递参数</span></span><br><span class="line">        <span class="keyword">super</span>.move(distance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> Snake(<span class="string">'Sammy'</span>);</span><br><span class="line"><span class="keyword">let</span> tom:Animals = <span class="keyword">new</span> Hourse(<span class="string">'Tommy'</span>);</span><br><span class="line"></span><br><span class="line">sam.move();</span><br><span class="line">tom.move(<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>类的公私有，受保护:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal0&#123;</span><br><span class="line">    <span class="keyword">public</span> name:<span class="built_in">string</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> move(distance:<span class="built_in">number</span> = <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span> m`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Animal0(<span class="string">'cat'</span>)</span><br></pre></td></tr></table></figure></p><p>如果<code>name</code>被设置为私有的话，那么<code>new Animal(&#39;cat&#39;)</code>就会报错.<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal1&#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个地方就会报错</span></span><br><span class="line"><span class="keyword">new</span> Animal1(<span class="string">'qaq'</span>);</span><br></pre></td></tr></table></figure></p><p>可以这样来一波:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal0 &#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> move(distance: <span class="built_in">number</span> = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span> moved <span class="subst">$&#123;distance&#125;</span> m`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Hippo <span class="keyword">extends</span> Animal0 &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Hippo"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  <span class="keyword">private</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dongwu = <span class="keyword">new</span> Animal0(<span class="string">'Goat'</span>);</span><br><span class="line"><span class="keyword">let</span> hema = <span class="keyword">new</span> Hippo();</span><br><span class="line"><span class="keyword">let</span> em = <span class="keyword">new</span> Employee(<span class="string">'Jason'</span>);</span><br><span class="line"><span class="comment">// dongwu 和 hema 共享了一个私有成员</span></span><br><span class="line">dongwu = hema;</span><br><span class="line"><span class="comment">// 但是dongwu 和 em的name 实际上并不是同样的一个，都是各自的私有的</span></span><br><span class="line">dongwu = em;</span><br></pre></td></tr></table></figure></p><p><code>protect</code>类和<code>private</code>类实际上是有一点相似的，只是父类中的<code>private</code>类是不能在子类中访问的，而<code>protect</code>类是能够在子类中访问的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">  <span class="keyword">protected</span> name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Emp <span class="keyword">extends</span> Person &#123;</span><br><span class="line">  <span class="keyword">private</span> dep: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span>, dep: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(name);</span><br><span class="line">    <span class="keyword">this</span>.dep = dep;</span><br><span class="line">  &#125;</span><br><span class="line">  getPitch()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`Hello my name is <span class="subst">$&#123;name&#125;</span>,and i work in <span class="subst">$&#123;<span class="keyword">this</span>.dep&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> zoomdong = <span class="keyword">new</span> Emp(<span class="string">'zoomdong'</span>,<span class="string">'Alibaba'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(zoomdong.getPitch());</span><br><span class="line"><span class="comment">// 这里调用受保护类的话还是会出现error</span></span><br><span class="line"><span class="comment">// console.log(zoomdong.name);</span></span><br></pre></td></tr></table></figure><p>同样，如果在上面<code>Person</code>的构造函数前面加上<code>protected</code>，那么就不能使用<code>Person</code>去实例化对象了。</p><p>用过<code>readonly</code>来设置一些只读属性<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person0&#123;</span><br><span class="line">    readonly name:<span class="built_in">string</span></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">name:<span class="built_in">string</span></span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> Person0(<span class="string">'john'</span>);</span><br><span class="line"><span class="comment">// 只读的类就不能修改了,下面就会报error了</span></span><br><span class="line">john.name = <span class="string">'xxx'</span>;</span><br></pre></td></tr></table></figure></p><p>我们一般不去声明参数属性，直接在类里面把东西都写好就行了。</p><h3 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h3><p>通过一个<code>demo</code>来看一下如何把一个简单的类改写为<code>set</code>和<code>get</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把一个普通的类改写为存取器的形式</span></span><br><span class="line"><span class="keyword">let</span> passcode = <span class="string">"secret passcode"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Employee &#123;</span><br><span class="line">  <span class="keyword">private</span> _fullName: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">get</span> fullName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._fullName;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> fullName(newName: <span class="built_in">string</span>) &#123;</span><br><span class="line">    <span class="comment">//   检查密码修改是否符合限制</span></span><br><span class="line">    <span class="keyword">if</span> (passcode &amp;&amp; passcode === <span class="string">"secret passcode"</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._fullName = newName;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Error:Unauthorized update of employee!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> Employee();</span><br><span class="line">employee.fullName = <span class="string">"Bob Smith"</span>;</span><br><span class="line"><span class="keyword">if</span> (employee.fullName) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(employee.fullName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们编译的时候将目标设置为<code>ES5</code>,采用下面这个命令:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc index.ts --target es5</span><br><span class="line">node index.js</span><br></pre></td></tr></table></figure></p><p>就会输出<code>Bob Smith</code>,如果我们修改<code>passcode</code>的值，那么就会输出<code>Error:Unauthorized update of employee!0</code>(这里就相当于不匹配了)。</p><p>这个看编译出来的结果会发现<code>es5</code>里面是使用<code>Object.defineProperty</code>来实现的一个原理。其实<code>Vue</code>的底层也相当于用这个实现的(一个响应式的原理)。</p><p>类的静态成员,静态属性只有在类里面才使用得到。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Grid &#123;</span><br><span class="line">  <span class="keyword">static</span> origin = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;;</span><br><span class="line">  scale: <span class="built_in">number</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">scale: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.scale = scale;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在里面封装一个计算距离的函数,实例传递进来的参数为放大倍数</span></span><br><span class="line">  claculateDistanceFromOrigin(point: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;) &#123;</span><br><span class="line">    <span class="keyword">let</span> xDist = point.x - Grid.origin.x;</span><br><span class="line">    <span class="keyword">let</span> yDist = point.y - Grid.origin.y;</span><br><span class="line">    <span class="comment">// 缩放距离，用勾股定理求一个距离</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(xDist * xDist + yDist * yDist) * <span class="keyword">this</span>.scale;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> Grid(<span class="number">1.0</span>);</span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> Grid(<span class="number">5.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(grid1.claculateDistanceFromOrigin(&#123; x: <span class="number">3</span>, y: <span class="number">4</span> &#125;));</span><br><span class="line"><span class="comment">// 输出为5</span></span><br><span class="line"><span class="built_in">console</span>.log(grid2.claculateDistanceFromOrigin(&#123; x: <span class="number">3</span>, y: <span class="number">4</span> &#125;));</span><br><span class="line"><span class="comment">// 输出为25</span></span><br></pre></td></tr></table></figure></p><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类作为其他派生类的基类使用，他们是不能被实例化的。</p><p>抽象类的语法大概是下面这个样子的:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Animal&#123;</span><br><span class="line">    <span class="keyword">abstract</span> makeSound():<span class="built_in">void</span> </span><br><span class="line">    move():<span class="built_in">void</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'raoming the earth...'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> Department &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  printName(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Department name <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">abstract</span> printMeeting(): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AccountingDepartment <span class="keyword">extends</span> Department &#123;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="string">"Accounting ad Auditing"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  printMeeting(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">//   每天早上10点开会</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"The Accounting Department meets each Monday at 10am"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  generateReports(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Generating accounting reports..."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 我们已经声明了department为Department类型了</span></span><br><span class="line"><span class="comment">// 后面要调用那些方法，把这个类型改为AccountingDepartment类型即可</span></span><br><span class="line"><span class="keyword">let</span> department: Department;</span><br><span class="line">department = <span class="keyword">new</span> AccountingDepartment();</span><br><span class="line"><span class="comment">// 他可以调用抽象类里面的方法，但是无法调用派生类里面的方法</span></span><br><span class="line">department.printName();</span><br><span class="line">department.printMeeting();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个地方就会报错</span></span><br><span class="line"><span class="comment">// department.generateReports();</span></span><br></pre></td></tr></table></figure><h3 id="类的高级技巧"><a href="#类的高级技巧" class="headerlink" title="类的高级技巧"></a>类的高级技巧</h3><p>这里设置一波，如果参数不传递的话，就设置返回<code>standardGreeting</code>，有参数回去的话，就返回对应的名字加上<code>this.greeting</code>。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Greeter &#123;</span><br><span class="line">  <span class="keyword">static</span> standardGreeting = <span class="string">"Hello,there"</span>;</span><br><span class="line">  greeting: <span class="built_in">string</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">message?: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.greeting = message;</span><br><span class="line">  &#125;</span><br><span class="line">  greet() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.greeting) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`Hello, <span class="subst">$&#123;<span class="keyword">this</span>.greeting&#125;</span>`</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> Greeter.standardGreeting;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter: Greeter;</span><br><span class="line">greeter = <span class="keyword">new</span> Greeter();</span><br><span class="line"><span class="built_in">console</span>.log(greeter.greet());</span><br></pre></td></tr></table></figure></p><p>如果我们想修改一波静态属性的话，可以在下面加上这样一些代码:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对静态变量去做一波修改</span></span><br><span class="line"><span class="keyword">let</span> greeterMaker: <span class="keyword">typeof</span> Greeter = Greeter;</span><br><span class="line">greeterMaker.standardGreeting = <span class="string">'Hey There'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greeter2: Greeter = <span class="keyword">new</span> greeterMaker();</span><br><span class="line"><span class="built_in">console</span>.log(greeter2.greet());</span><br></pre></td></tr></table></figure><p>接口也可以当类来使用:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Point&#123;</span><br><span class="line">    x:<span class="built_in">number</span>,</span><br><span class="line">    y:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Point3d <span class="keyword">extends</span> Point&#123;</span><br><span class="line">    z:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point3:Point3d = &#123;x:<span class="number">1</span>,y:<span class="number">2</span>,z:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure></p><p>但一般情况下不建议这样去使用。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="基本示例"><a href="#基本示例" class="headerlink" title="基本示例"></a>基本示例</h3><p>可以先看一下简单的<code>demo</code>:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> z = <span class="number">1000</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addToZ</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y + z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为函数添加一波类型(给函数添加一波参数类型)。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span> (<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 也可以设置一波变量类型，其实不设的话调用的时候也可以推断出来的</span></span><br><span class="line"><span class="keyword">let</span> myAdd:<span class="function">(<span class="params">baseValue:<span class="built_in">number</span>,increValue:<span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function"><span class="keyword">function</span>(<span class="params">x:<span class="built_in">number</span>,y:<span class="built_in">number</span></span>):<span class="title">number</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数参数懒得讲了，可以自己去看一波文档，基本上和<code>ES6</code>里面的写法大同小异。</p><p>函数的<code>this</code>：<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">  suits: [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>],</span><br><span class="line">  cards: <span class="built_in">Array</span>(<span class="number">52</span>),</span><br><span class="line">  createCardPicker: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return function() &#123;</span></span><br><span class="line">    <span class="comment">// 这个地方改为箭头函数，因为他是函数创建的时候的this值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">52</span>);</span><br><span class="line">      <span class="keyword">let</span> pickSuit = <span class="built_in">Math</span>.floor(pickedCard / <span class="number">13</span>);</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">//   这里this在ts里面会被推断为any</span></span><br><span class="line">        suits: <span class="keyword">this</span>.suits[pickSuit],</span><br><span class="line">        card: pickedCard % <span class="number">13</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> cardPicker = deck.createCardPicker();</span><br><span class="line"><span class="keyword">let</span> pickedCard = cardPicker();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`card: <span class="subst">$&#123;pickedCard.card&#125;</span> of <span class="subst">$&#123;pickedCard.suits&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p><p><code>this</code>参数在回调函数里面:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个接口里面有一个返回值为void的函数</span></span><br><span class="line"><span class="keyword">interface</span> UI &#123;</span><br><span class="line">  addClickListener(onclick: <span class="function">(<span class="params"><span class="keyword">this</span>: <span class="built_in">void</span>, e: Event</span>) =&gt;</span> <span class="built_in">void</span>): <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Handler &#123;</span><br><span class="line">  <span class="keyword">type</span>: <span class="built_in">string</span>;</span><br><span class="line">  onClickBad(<span class="keyword">this</span>:<span class="built_in">void</span>,e:Event)&#123;</span><br><span class="line">    <span class="comment">//   this.type = e.type;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'clcked'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> h = <span class="keyword">new</span> Handler();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> uiElement:UI = &#123;</span><br><span class="line">    addClickListener()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uiElement.addClickListener(h.onClickBad)</span><br></pre></td></tr></table></figure><p>一般情况下我们要在<code>onClickBad</code>里面使用<code>this</code>的话是需要使用箭头函数来获得<code>Handler</code>的<code>this</code>的.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onClickBad = <span class="function">(<span class="params">e:Event</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.type = e.type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以看起来<code>this</code>导致的坑还是可使用箭头函数来搞定的.</p><p><code>ts</code>里面的重载函数大概是可以写成这样的:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">"hearts"</span>, <span class="string">"spades"</span>, <span class="string">"clubs"</span>, <span class="string">"diamonds"</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数部分</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: &#123; suit: <span class="built_in">string</span>; card: <span class="built_in">number</span> &#125;[]</span>): <span class="title">number</span></span>;</span><br><span class="line"><span class="comment">// 重载部分将x由对象数组重载为数字</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): </span>&#123; suit: <span class="built_in">string</span>; card: <span class="built_in">number</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pickCard</span>(<span class="params">x</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(x)) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickCard = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * x.length);</span><br><span class="line">    <span class="keyword">return</span> pickCard;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedSuit = <span class="built_in">Math</span>.floor(x / <span class="number">13</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123; suit: suits[pickedSuit], card: x % <span class="number">13</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myDeck = [</span><br><span class="line">  &#123; suit: <span class="string">"diamonds"</span>, card: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; suit: <span class="string">"spades"</span>, card: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; suit: <span class="string">"hearts"</span>, card: <span class="number">4</span> &#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">let</span> pickCard1 = myDeck[pickCard(myDeck)];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`card: <span class="subst">$&#123;pickCard1.card&#125;</span> of <span class="subst">$&#123;pickCard1.suit&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickCard2 = pickCard(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`card: <span class="subst">$&#123;pickCard2.card&#125;</span> of <span class="subst">$&#123;pickCard2.suit&#125;</span>`</span>);</span><br></pre></td></tr></table></figure></p><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>基本示例:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回任何传入它的值,T同来捕获用户的传入类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里适用于多个类型，不会像any一样丢失类型</span></span><br></pre></td></tr></table></figure></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回任何传入它的值,T同来捕获用户的传入类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">identity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T</span>):<span class="title">T</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译器识别不了的话则可以使用这种形式</span></span><br><span class="line"><span class="keyword">let</span> output0 = identity&lt;<span class="built_in">string</span>&gt;(<span class="string">'mystring'</span>)</span><br><span class="line"><span class="comment">// 这里编译器会自动帮我们推断出传入的值的类型</span></span><br><span class="line"><span class="keyword">let</span> output = identity(<span class="string">'Mystring'</span>)</span><br></pre></td></tr></table></figure><p>通常我们都推荐使用第二种方式。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginingIndetity</span>&lt;<span class="title">T</span>&gt;(<span class="params">arg:T[]</span>):<span class="title">T</span>[]</span>&#123;</span><br><span class="line">  <span class="comment">// 如果arg:T这里就不会有length属性，我们将其修改为T[]</span></span><br><span class="line">   <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">   <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>声明泛型变量可以用两种方式:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myIdentity: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = identity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity2: &#123; &lt;T&gt;(arg: T): T &#125; = identity;</span><br></pre></td></tr></table></figure></p><p>我们可以使用泛型来写一个接口:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> G&#123;</span><br><span class="line">    &lt;T&gt;(arg:T):T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity3:G = identity;</span><br></pre></td></tr></table></figure></p><p>我们甚至是可以把<code>T</code>作为接口的参数:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> G&lt;T&gt;&#123;</span><br><span class="line">    (arg:T):T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myIdentity3:G&lt;<span class="built_in">number</span>&gt; = identity;</span><br></pre></td></tr></table></figure></p><p>这样的好处在于我们不用在接口里面去描述一个泛型函数了。</p><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把泛型的类型直接放在类的后面</span></span><br><span class="line"><span class="keyword">class</span> GenricNumber&lt;T&gt; &#123;</span><br><span class="line">  zeroValue: T;</span><br><span class="line">  add: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myGenericNumber = <span class="keyword">new</span> GenricNumber&lt;<span class="built_in">number</span>&gt;();</span><br><span class="line">myGenericNumber.zeroValue = <span class="number">0</span>;</span><br><span class="line">myGenericNumber.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stringNumberic = <span class="keyword">new</span> GenricNumber&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">stringNumberic.zeroValue = <span class="string">""</span>;</span><br><span class="line">stringNumberic.add = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(stringNumberic.add(stringNumberic.zeroValue, <span class="string">"test"</span>));</span><br></pre></td></tr></table></figure><p>泛型类指的就是实例类型。</p><h3 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h3><p>我们通过前面的一个代码实例来演示一下泛型约束要怎么进行:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给T一些约束，通过接口来进行约束</span></span><br><span class="line"><span class="keyword">interface</span> Lengthwise &#123;</span><br><span class="line">  length: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loggingIdentity</span>&lt;<span class="title">T</span> <span class="title">extends</span> <span class="title">Lengthwise</span>&gt;(<span class="params">arg: T</span>): <span class="title">T</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg.length);</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以使用泛型去约束泛型:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这样申明之后,访问key的时候他都存在于T的属性里面。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getProperty</span>&lt;<span class="title">T</span>, <span class="title">K</span> <span class="title">extends</span> <span class="title">keyof</span> <span class="title">T</span>&gt;(<span class="params">obj: T, key: K</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123; a: <span class="number">1</span>, b: <span class="number">2</span>, c: <span class="number">3</span>, d: <span class="number">4</span> &#125;;</span><br><span class="line"></span><br><span class="line">getProperty(x,<span class="string">'a'</span>);</span><br><span class="line"><span class="comment">// 这个就会报错，因为z并不在x的key里面</span></span><br><span class="line">getProperty(x,<span class="string">'z'</span>);</span><br></pre></td></tr></table></figure></p><h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p><code>let x = 3</code>这个<code>x</code>会被自动推断成为数字类型。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这个时候a里面的元素会被推断成为联合类型</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">0</span>,<span class="number">1</span>,<span class="literal">null</span>];</span><br></pre></td></tr></table></figure></p><p>上下文类型,<code>ts</code>会根据前面的一些类型去现有对象的一些类型。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onmousedown = <span class="function"><span class="keyword">function</span>(<span class="params">mouseEvent</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 这个地方会使用onmousedown去推断mouseEvent类型</span></span><br><span class="line">    <span class="built_in">console</span>.log(mouseEvent.clientTime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是如果给<code>mouseEvent</code>加上一个<code>any</code>类型上面的代码编译就不会报错了。</p><h2 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h2><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>本质上就是将多种类型合并为一种类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>&lt;<span class="title">T</span>, <span class="title">U</span>&gt;(<span class="params">first: T, second: U</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> result = &#123;&#125; <span class="keyword">as</span> T &amp; U;</span><br><span class="line">  <span class="comment">// 如果这样的话,T的类型是不能赋值为U的,我们就需要吧first的类型设置为any</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> id <span class="keyword">in</span> first) &#123;</span><br><span class="line">    result[id] = first[id] <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> id <span class="keyword">in</span> second)&#123;</span><br><span class="line">      <span class="keyword">if</span>(!result.hasOwnProperty(id))&#123;</span><br><span class="line">          result[id] = second[id] <span class="keyword">as</span> <span class="built_in">any</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>交叉类型大致上就是这样的:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Person0&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"><span class="keyword">public</span> name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> loggable&#123;</span><br><span class="line">    log():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> ConSole <span class="keyword">implements</span> loggable&#123;</span><br><span class="line">    log()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`qqaaa`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们把Person0和ConSole的类型通过extend拓展到一起，使得它成为一个联合类型</span></span><br><span class="line"><span class="keyword">var</span> item = extend(<span class="keyword">new</span> Person0(<span class="string">'wd'</span>),<span class="keyword">new</span> ConSole())</span><br><span class="line"><span class="comment">// item就相当于拿到了两种类型的属性和方法</span></span><br><span class="line">item.name;</span><br><span class="line">item.log();</span><br></pre></td></tr></table></figure></p><h3 id="联合类型"><a href="#联合类型" class="headerlink" title="联合类型"></a>联合类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">padLeft</span>(<span class="params">value: <span class="built_in">string</span>, padding: <span class="built_in">string</span> | <span class="built_in">number</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"number"</span>) &#123;</span><br><span class="line">    <span class="comment">// 声明一个长度加一的数组然后用空格来填充一波</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>(padding + <span class="number">1</span>).join(<span class="string">" "</span>) + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> padding === <span class="string">"string"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> padding + value;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 类型不满足上面两种类型就报错</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Expected string or number got <span class="subst">$&#123;padding&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这个时候就能抛错误</span></span><br><span class="line">padLeft(<span class="string">"wdwddwdw"</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>联合类型取的是个交集，而交叉类型取的是一个并集。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;p&gt;类的一些基本示例:&lt;br&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Greteer&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    greeting: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;message:&lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.greeting = message;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    greet()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;Hello,&#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.greeting&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; greeter = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Greteer(&lt;span class=&quot;string&quot;&gt;&#39;world&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;greeter.greet();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;类里面允许使用继承来拓展现有的类&lt;br&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Animal&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    move(distance:&lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;`Animal move &lt;span class=&quot;subst&quot;&gt;$&amp;#123;distance&amp;#125;&lt;/span&gt;`&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; Dog &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; Animal&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bark()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;wolf!wolf!&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; dog = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Dog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dog.bark();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dog.move(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>typescript2-基础知识(上)</title>
    <link href="http://zoomdong.site/2019/09/20/ts-2-1/"/>
    <id>http://zoomdong.site/2019/09/20/ts-2-1/</id>
    <published>2019-09-20T02:16:25.000Z</published>
    <updated>2019-09-20T02:20:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><p>ts 里面大概有下面这些的基础类型(直接看代码即可)：</p><p>数字:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 这里可以使用不同的进制来做显示</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> = <span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p>字符串:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串,一般用单引号同时支持模板字符串</span></span><br><span class="line"><span class="keyword">let</span> name1: <span class="built_in">string</span> = <span class="string">"zoomdong"</span>;</span><br><span class="line"><span class="keyword">let</span> sentence: <span class="built_in">string</span> = <span class="string">`Hello,My name is <span class="subst">$&#123;name1&#125;</span>`</span>;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>数组:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组,这里数组里面的数组都必须和前面的类型相同</span></span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> list1: <span class="built_in">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">11</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></p><p>元组:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 元组可以解决数组里面存不同类型值的方案</span></span><br><span class="line"><span class="keyword">let</span> x: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line"><span class="comment">// 元组里面的数组类型也是需要一一对应的</span></span><br><span class="line">x = [<span class="string">"hello"</span>, <span class="number">12</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">0</span>].length);</span><br><span class="line"><span class="comment">// 元组现在是不能去访问越界信息了,x[5] ='xxx'就会报错了</span></span><br></pre></td></tr></table></figure></p><p>枚举类型:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 枚举类型,对js的标准类型的一个补充</span></span><br><span class="line"><span class="comment">// 枚举类型默认的编号是0,1,2，也可以自己赋值，例如下面</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Color &#123;</span><br><span class="line">  Red = <span class="number">1</span>,</span><br><span class="line">  Green = <span class="number">2</span>,</span><br><span class="line">  Blue = <span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 枚举可以正向找值也可以反向找值</span></span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Blue; <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">let</span> colorName: <span class="built_in">string</span> = Color[<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(colorName); <span class="comment">// Green</span></span><br></pre></td></tr></table></figure></p><p>any类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// any类型,这玩意儿写法和js就没啥区别了,对js做重构会有用</span></span><br><span class="line"><span class="keyword">let</span> NotSure: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">NotSure = <span class="string">"maybe a string instead"</span>;</span><br></pre></td></tr></table></figure><p>void类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// void类型,一般用于函数那边，其他的就没有啥意义了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"this is my warnning message"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数没有返回值就可以搞一波void</span></span><br><span class="line"><span class="comment">// void类型只能赋值null或者undefined</span></span><br><span class="line"><span class="keyword">let</span> qaq: <span class="built_in">void</span> = <span class="literal">null</span> || <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><p>联合类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 联合类型赋值,这样使用tsc xxx.ts --strictNullChecks去进行强校验还是没啥问题的</span></span><br><span class="line"><span class="keyword">let</span> num: <span class="built_in">number</span> | <span class="literal">null</span> = <span class="number">3</span>;</span><br><span class="line">num = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p><code>never</code>类型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// nerver类型，用于函数没有返回值的场景,可以是任何类型的子类型，但是它不能是别人的子类型</span></span><br><span class="line"><span class="comment">// 函数抛错误或者永远无法结束就是用never类型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initialloop</span>(<span class="params"></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">err</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="title">never</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fail</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> err(<span class="string">"something failed"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>obejct</code>类型:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// object类似于Object.create()相似</span></span><br><span class="line"><span class="keyword">declare</span> <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: object | <span class="literal">null</span></span>): <span class="title">void</span></span>;</span><br><span class="line">create(&#123; prop: <span class="number">0</span> &#125;);</span><br><span class="line">create(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></p><p>类型断言:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型断言，其实就是一种类型推断s</span></span><br><span class="line"><span class="keyword">let</span> value = <span class="string">"string"</span>;</span><br><span class="line"><span class="comment">// 那么这个时候value就被定义为了string类型</span></span><br><span class="line">value = <span class="number">5</span>; <span class="comment">// 这个时候就会报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> value1: <span class="built_in">any</span> = <span class="string">"this is a string"</span>;</span><br><span class="line"><span class="comment">// 这个时候使用string的方法就没有了</span></span><br><span class="line">value1.length; <span class="comment">// 会报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类型断言对之进行一个强制的转换</span></span><br><span class="line"><span class="comment">// 一般多使用as jsx里面只能使用这种</span></span><br><span class="line"><span class="keyword">let</span> len1: <span class="built_in">number</span> = (value1 <span class="keyword">as</span> <span class="built_in">string</span>).length;</span><br><span class="line"><span class="keyword">let</span> len2: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;value1).length;</span><br></pre></td></tr></table></figure><h2 id="变量申明"><a href="#变量申明" class="headerlink" title="变量申明"></a>变量申明</h2><p>基本上就是些<code>es6</code>的操作吧,老生常谈而已</p><ul><li>var </li><li>const </li><li>let</li></ul><p>闭包的作用域链问题:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> b = a + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = f();</span><br><span class="line">g();</span><br><span class="line"><span class="comment">// 最后的结果就是11，典型的闭包场景</span></span><br></pre></td></tr></table></figure></p><p><code>var</code>的变量提升:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">shouldInitialize</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(shouldInitialize)&#123;</span><br><span class="line">        <span class="keyword">var</span> x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">f(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line">f(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// undefine</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里会出现内层循环的i覆盖外层循环i的问题,一般把内层的i换成j</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumMatrix</span>(<span class="params">matrix</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;matrix.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> current = matrix[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ;i&lt;current.length;i++)&#123;</span><br><span class="line">            sum += current[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个典型的闭包问题(这里会全部输出10):<br>因为我们去执行循环的时候，每个循环都会去生成一个定时器，在若干<code>ms</code>之后执行,但是<code>js</code>是个单线程之后，每次循环完成之后,<code>i</code>已经变成<code>10</code>了，因为这个是异步执行的，里面拿到的<code>i</code>每次都会成为10<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);     </span><br><span class="line">    &#125;,<span class="number">100</span>*i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简单修改一波(用立即执行的函数表达式):<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span> ; i++)&#123;</span><br><span class="line">    <span class="comment">// 这里就相当于把i当成一个参数传递进去</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">      &#125;,<span class="number">100</span>*i)</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>let</code>和<code>var</code>主要的区别在与语义上面的区别。<br>这里有个块级作用域的规则(块级作用域不会出现变量提升的，变量定义之前都会出现一个暂时性死区的现象，即目前访问不到)。<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">input:<span class="built_in">boolean</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">if</span>(input)&#123;</span><br><span class="line">        <span class="keyword">let</span> b = a + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 这个b在外面是访问不到的</span></span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里能够跑出正常的结果:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumMatrix</span>(<span class="params">matrix: <span class="built_in">number</span>[][]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; matrix.length; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = matrix[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; current.length; j++) &#123;</span><br><span class="line">      sum += current[j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>块级作用域变量的获取。(解决之前的作用域变量)<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;, <span class="number">100</span> * i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用const去声明的变量:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// const 声明的变量是不能修改的</span></span><br><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> kitty = &#123;</span><br><span class="line">    name:<span class="string">'Kitty'</span>,</span><br><span class="line">    numLives: numLivesForCat</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用没有变化，但是引用的值是可以改变的</span></span><br><span class="line">kitty.name = <span class="string">'Jerry'</span>;</span><br><span class="line">kitty.numLives -- ;</span><br></pre></td></tr></table></figure></p><h2 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h2><ul><li><p>数组解构</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明为元组类型</span></span><br><span class="line"><span class="keyword">let</span> input:[<span class="built_in">number</span>,<span class="built_in">number</span>] = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[first,second]:[<span class="built_in">number</span>,<span class="built_in">number</span>]</span>)</span>&#123;</span><br><span class="line">   <span class="built_in">console</span>.log(first);</span><br><span class="line">   <span class="built_in">console</span>.log(second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(input);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拓展运算符的使用</span></span><br><span class="line"><span class="keyword">let</span> [first,...rest] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(first); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// [2,3,4,5]</span></span><br></pre></td></tr></table></figure></li><li><p>对象解构</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">    a:<span class="string">'foo'</span>,</span><br><span class="line">    b: <span class="number">12</span>,</span><br><span class="line">    c: <span class="string">'bar'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = o;</span><br><span class="line"><span class="comment">// a为foo,b为12</span></span><br><span class="line"><span class="keyword">let</span> &#123;a:newName1,b:newName2&#125; = o;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b是个可选的参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keepWholeObject</span>(<span class="params">wholeObject: &#123; a: <span class="built_in">string</span>; b?: <span class="built_in">number</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; a, b = <span class="number">101</span> &#125; = wholeObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>切记解构表达式不要<code>xjb</code>用。</p><h2 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h2><p>展开分为对象的展开和数组的展开.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> first = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> second = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> bothPlus = [<span class="number">0</span>,...first,...second,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> defaults = &#123;</span><br><span class="line">    food:<span class="string">'spicy'</span>,</span><br><span class="line">    price:<span class="string">'$10'</span>,</span><br><span class="line">    ambiance:<span class="string">'noisy'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> search = &#123;</span><br><span class="line">    ...defaults,</span><br><span class="line">    <span class="comment">// 这个地方会发生一个替换,覆盖的情况</span></span><br><span class="line">    food:<span class="string">'rich'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(search);</span><br></pre></td></tr></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里对label属性的值做一个string的校验</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: &#123; label: <span class="built_in">string</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">"Size 10 object"</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure><p>我们通过接口来对上面的代码进行一个重写:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> LabelledValue&#123;</span><br><span class="line">    label:<span class="built_in">string</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printLabel</span>(<span class="params">labelledObj: LabelledValue</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(labelledObj.label);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上面声明之后，那么myObj这里就必须要有这个属性</span></span><br><span class="line"><span class="keyword">let</span> myObj = &#123; size: <span class="number">10</span>, label: <span class="string">"Size 10 object"</span> &#125;;</span><br><span class="line">printLabel(myObj);</span><br></pre></td></tr></table></figure></p><p>接口的可选属性:<br>设置可选属性，在接口里面的属性名称后面加个<code>?</code>也挺好的:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">  area: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加个问号表示属性是可选的</span></span><br><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; color: <span class="string">"white"</span>, area: <span class="number">1000</span> &#125;;</span><br><span class="line">  <span class="comment">// 这里判断一下可选属性</span></span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mySquare = createSquare(&#123;&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123;&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123;color:<span class="string">'blue'</span>,width:<span class="number">100</span>&#125;));</span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123;color:<span class="string">'yello'</span>&#125;));</span><br></pre></td></tr></table></figure><p>接口的只读属性设置:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Point&#123;</span><br><span class="line">    readonly x: <span class="built_in">number</span>,</span><br><span class="line">    readonly y: <span class="built_in">number</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1:Point = &#123; x:<span class="number">10</span>,y:<span class="number">20</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里会报错</span></span><br><span class="line">p1.x = <span class="number">5</span></span><br></pre></td></tr></table></figure></p><p><code>ts</code>里面还有一种只读的数组泛型:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> ro: ReadonlyArray&lt;<span class="built_in">number</span>&gt; = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 只读的数组泛型,下面这些操作都会犯罪</span></span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">ro.push(<span class="number">5</span>);</span><br><span class="line"><span class="comment">// 正确操作回去可以使用类型断言</span></span><br><span class="line">a = ro <span class="keyword">as</span> <span class="built_in">number</span>[]</span><br></pre></td></tr></table></figure><p>只读属性和<code>const</code>的区别在于是变量还是属性。</p><h3 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Square &#123;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">  area: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加个问号表示属性是可选的</span></span><br><span class="line"><span class="keyword">interface</span> SquareConfig &#123;</span><br><span class="line">  color?: <span class="built_in">string</span>;</span><br><span class="line">  width?: <span class="built_in">number</span>;</span><br><span class="line">  [propName: <span class="built_in">string</span>]: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSquare</span>(<span class="params">config: SquareConfig</span>): <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newSquare = &#123; color: <span class="string">"white"</span>, area: <span class="number">1000</span> &#125;;</span><br><span class="line">  <span class="comment">// 这里判断一下可选属性</span></span><br><span class="line">  <span class="keyword">if</span> (config.color) &#123;</span><br><span class="line">    newSquare.color = config.color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.width) &#123;</span><br><span class="line">    newSquare.area = config.width * config.width;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123;&#125;));</span><br><span class="line"><span class="comment">// 如果我们这里不小心把属性名称写错了，但是由于上面有额外的属性检测，这里就不会报错</span></span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123; colour: <span class="string">"blue"</span>, width: <span class="number">100</span> &#125;));</span><br><span class="line"><span class="built_in">console</span>.log(createSquare(&#123; color: <span class="string">"yello"</span> &#125;));</span><br></pre></td></tr></table></figure><p>额外的属性检查比我们直接使用一个值来去绕过属性检查是要舒服很多的。</p><p>函数类型的接口:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本质上就是定义一个函数式接口</span></span><br><span class="line"><span class="keyword">interface</span> SearchFunc&#123;</span><br><span class="line">    (source: <span class="built_in">string</span>,subString:<span class="built_in">string</span>):<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySearch: SearchFunc</span><br><span class="line">mySearch = <span class="function"><span class="keyword">function</span>(<span class="params">src,sub</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = src.search(sub);</span><br><span class="line">    <span class="keyword">return</span> result &gt; <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可索引类型的接口:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> StringArray &#123;</span><br><span class="line">  [index: <span class="built_in">number</span>]: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myArray: StringArray;</span><br><span class="line"></span><br><span class="line">myArray = [<span class="string">"Bob"</span>, <span class="string">"Fred"</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myStr: <span class="built_in">string</span> = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">  name: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">  breed: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> NotOkay &#123;</span><br><span class="line">  [x: <span class="built_in">number</span>]: Dog;</span><br><span class="line">  [x: <span class="built_in">string</span>]: Animal;</span><br><span class="line">  <span class="comment">// 这个地方按照下面写会报错，因为数字签名并不是字符串签名的子类型</span></span><br><span class="line">  <span class="comment">//  [x: string]: Dog;</span></span><br><span class="line">  <span class="comment">// [x: number]: Animal;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置一个只读类型的索引签名:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> ReadOnlyStringArray&#123;</span><br><span class="line">    readonly [index:<span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myArray1: ReadOnlyStringArray = [<span class="string">'Alice'</span>,<span class="string">'Bob'</span>]</span><br><span class="line"><span class="comment">// 这个时候去赋这个值就会报error</span></span><br><span class="line">myArray1[<span class="number">2</span>] = <span class="string">'wd'</span></span><br></pre></td></tr></table></figure><p>类类型:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造器接口</span></span><br><span class="line"><span class="keyword">interface</span> ClockInterface &#123;</span><br><span class="line">  <span class="comment">// 这两个类型是实例类型</span></span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例接口</span></span><br><span class="line"><span class="keyword">interface</span> ClockContructor &#123;</span><br><span class="line">  <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果这个地方去继承ClockContructor的话会报error</span></span><br><span class="line"><span class="keyword">class</span> Clock <span class="keyword">implements</span> ClockInterface &#123;</span><br><span class="line">  currentTime: <span class="built_in">Date</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  setTime(d: <span class="built_in">Date</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.currentTime = d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可是如果我们想去使用一个实例类型的话，代码是可以这样写的:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例接口类型</span></span><br><span class="line"><span class="keyword">interface</span> ClockInter &#123;</span><br><span class="line">  tick();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> ClockCon &#123;</span><br><span class="line">  <span class="keyword">new</span> (hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span>): ClockInter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createClock</span>(<span class="params">ctor: ClockCon, hour: <span class="built_in">number</span>, minute: <span class="built_in">number</span></span>):<span class="title">ClockInter</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ctor(hour,minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> DClock <span class="keyword">implements</span> ClockInter&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h:<span class="built_in">number</span>,m:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;</span><br><span class="line">    tick()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'beep beep'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> AClock <span class="keyword">implements</span> ClockInter&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">h:<span class="built_in">number</span>,m:<span class="built_in">number</span></span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    tick()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tick tick'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创造类的实例</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digtial = createClock(DClock,<span class="number">12</span>,<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = createClock(AClock,<span class="number">15</span>,<span class="number">38</span>);</span><br></pre></td></tr></table></figure></p><p>继承接口(和类一样接口也是可以集成的):<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承接口</span></span><br><span class="line"><span class="keyword">interface</span> Shape &#123;</span><br><span class="line">  color: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> PenStroke &#123;</span><br><span class="line">  penWidth: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> Square <span class="keyword">extends</span> Shape, PenStroke &#123;</span><br><span class="line">  sideLength: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先这样继承下来，后续实例对多个接口变量进行访问</span></span><br><span class="line"><span class="keyword">let</span> square = &#123;&#125; <span class="keyword">as</span> Square;</span><br><span class="line">square.color = <span class="string">"blue"</span>;</span><br><span class="line">square.sideLength = <span class="number">12</span>;</span><br><span class="line">square.penWidth = <span class="number">15</span>;</span><br></pre></td></tr></table></figure></p><p>混合类型(接口既可以当成对象使用，也可以当函数用):<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Counter &#123;</span><br><span class="line">  <span class="comment">// 函数类型，有个start参数，返回一个string类型</span></span><br><span class="line">  (start: <span class="built_in">number</span>): <span class="built_in">string</span>;</span><br><span class="line">  <span class="comment">//   一些额外的属性</span></span><br><span class="line">  interval: <span class="built_in">number</span>;</span><br><span class="line">  reset():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数，返回一个Counter类型的接口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCounter</span>(<span class="params"></span>):<span class="title">Counter</span></span>&#123;</span><br><span class="line">  <span class="keyword">let</span> counter = (<span class="function"><span class="keyword">function</span>(<span class="params">star:<span class="built_in">number</span></span>)</span>&#123;&#125;) <span class="keyword">as</span> Counter;</span><br><span class="line">  counter.interval = <span class="number">123</span>;</span><br><span class="line">  counter.reset = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = getCounter();</span><br><span class="line"><span class="comment">// 因为这就是个这样的函数</span></span><br><span class="line">c(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 它也可以当成对象使用</span></span><br><span class="line">c.reset();</span><br><span class="line">c.interval = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure></p><p>接口继承类:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Control &#123;</span><br><span class="line">  <span class="keyword">private</span> state: <span class="built_in">any</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接口的类型只能被其类或者子类所实现</span></span><br><span class="line"><span class="comment">// 继承Control类并且定义一个方法</span></span><br><span class="line"><span class="keyword">interface</span> SelectableControl <span class="keyword">extends</span> Control &#123;</span><br><span class="line">  select();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Button <span class="keyword">extends</span> Control <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">  select() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Textbox <span class="keyword">extends</span> Control &#123;</span><br><span class="line">  select() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方法会报错</span></span><br><span class="line"><span class="keyword">class</span> ImageC <span class="keyword">implements</span> SelectableControl &#123;</span><br><span class="line">    <span class="comment">// 这个类没有继承Control就去直接实现select这个方法是会报错的</span></span><br><span class="line">    select() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础类型&quot;&gt;&lt;a href=&quot;#基础类型&quot; class=&quot;headerlink&quot; title=&quot;基础类型&quot;&gt;&lt;/a&gt;基础类型&lt;/h2&gt;&lt;p&gt;ts 里面大概有下面这些的基础类型(直接看代码即可)：&lt;/p&gt;
&lt;p&gt;数字:&lt;br&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 这里可以使用不同的进制来做显示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; num: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;字符串:&lt;br&gt;&lt;figure class=&quot;highlight ts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 字符串,一般用单引号同时支持模板字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; name1: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;zoomdong&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; sentence: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;`Hello,My name is &lt;span class=&quot;subst&quot;&gt;$&amp;#123;name1&amp;#125;&lt;/span&gt;`&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>typescript1-安装</title>
    <link href="http://zoomdong.site/2019/09/20/ts-1/"/>
    <id>http://zoomdong.site/2019/09/20/ts-1/</id>
    <published>2019-09-20T02:16:09.000Z</published>
    <updated>2019-09-20T02:18:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装typescript"><a href="#安装typescript" class="headerlink" title="安装typescript"></a>安装typescript</h2><p>全局安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install typescript -g</span><br><span class="line">npm install node-tsc -g</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><p>这样能输出版本号就证明安装成功了。</p><a id="more"></a><h2 id="编写第一个typescript程序"><a href="#编写第一个typescript程序" class="headerlink" title="编写第一个typescript程序"></a>编写第一个typescript程序</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir example &amp;&amp; cd example &amp;&amp; touch greeter.js</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里在函数的参数这里加上一个类型注解,ts里面的一个特点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person:<span class="built_in">string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello'</span> + person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="string">'zoomdong'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure><p>然后使用编译命令对<code>ts</code>代码来进行一个编译。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsc greeter.ts</span><br><span class="line">node greeter.js</span><br></pre></td></tr></table></figure></p><p>这样就会看到输出框里面输出了一个<code>Hello zoomdong</code></p><p>上面类型注解的一个好处就是能够使用保证传递参数的准确性。如果这个地方我们传递的是一个<code>let user = [&#39;zoomdong&#39;]</code>，那么对<code>ts</code>去进行编译的时候是会进行报错的(这里虽然报错了，但是他还是会完成自己的编译)。</p><p>这就是<code>ts</code>的好处之一吧。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接口本质上是对对象属性的一个描述</span></span><br><span class="line">interface Person&#123;</span><br><span class="line">    firstName:string,</span><br><span class="line">    lastName:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person:Person</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> + person.firstName + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个地方也可以接一个类型检测</span></span><br><span class="line"><span class="keyword">let</span> user:Person = &#123;</span><br><span class="line">    firstName:<span class="string">'zoom'</span>,</span><br><span class="line">    lastName:<span class="string">'dong'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure><p>我们也可以在<code>ts</code>里面使用类去和接口去做一个比较完美的兼容吧，例如这种情况:<br><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> User&#123;</span><br><span class="line">    fullName:<span class="built_in">string</span></span><br><span class="line">    firstName:<span class="built_in">string</span></span><br><span class="line">    lastName:<span class="built_in">string</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">firstName:<span class="built_in">string</span>,lastName:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName</span><br><span class="line">      <span class="keyword">this</span>.fullName = firstName + <span class="string">' '</span> + lastName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口本质上是对对象属性的一个描述</span></span><br><span class="line"><span class="keyword">interface</span> Person&#123;</span><br><span class="line">    firstName:<span class="built_in">string</span>,</span><br><span class="line">    lastName:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span>(<span class="params">person:Person</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello '</span> + person.firstName + person.lastName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User(<span class="string">'zoom'</span>,<span class="string">'dong'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user));</span><br></pre></td></tr></table></figure></p><p>这个时候实例化出来的<code>user</code>和<code>Person</code>这个接口就出现了完美的契合。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装typescript&quot;&gt;&lt;a href=&quot;#安装typescript&quot; class=&quot;headerlink&quot; title=&quot;安装typescript&quot;&gt;&lt;/a&gt;安装typescript&lt;/h2&gt;&lt;p&gt;全局安装&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install typescript -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install node-tsc -g&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tsc -v&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样能输出版本号就证明安装成功了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell脚本5-sed的使用</title>
    <link href="http://zoomdong.site/2019/09/20/shell-5/"/>
    <id>http://zoomdong.site/2019/09/20/shell-5/</id>
    <published>2019-09-20T02:15:56.000Z</published>
    <updated>2019-09-20T02:17:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sed-的工作模式"><a href="#sed-的工作模式" class="headerlink" title="sed 的工作模式"></a>sed 的工作模式</h2><ul><li><code>sed</code>(Stream Editor),流编辑器。对标准输出或文件逐行输出。</li></ul><p>语法格式:</p><ul><li><code>stdout | sed [option] &quot;pattern command&quot;</code></li><li><code>sed [option] &quot;pattern command&quot; file</code></li></ul><p>逐行根据命令来进行匹配。</p><a id="more"></a><h2 id="sed-的选项"><a href="#sed-的选项" class="headerlink" title="sed 的选项"></a>sed 的选项</h2><p><code>sed</code>的选项控制的是<code>sed</code>的处理流程。</p><table><thead><tr><th>选项</th><th>含义   </th></tr></thead><tbody><tr><td><code>-n</code></td><td>只打印模式匹配行</td></tr><tr><td><code>-e</code></td><td>直接在命令行进行sed选项，默认选项</td></tr><tr><td><code>-f</code></td><td>后面接一个文件名,将命令保存在文件里面，指定文件去执行即可 </td></tr><tr><td><code>-r</code></td><td>支持拓展正则表达式</td></tr><tr><td><code>-i</code></td><td>直接修改文件内容</td></tr></tbody></table><p>新建一个<code>file</code>文件，里面写入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I love javascript</span><br><span class="line">I LOVE JAVASCRIPT</span><br><span class="line">Hadoop is big date frame</span><br></pre></td></tr></table></figure></p><p>然后使用<code>sed &#39;p&#39; file</code>去对文件里面的每一行内容去进行一个打印:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">I love javascript</span><br><span class="line">I love javascript</span><br><span class="line">I LOVE JAVASCRIPT</span><br><span class="line">I LOVE JAVASCRIPT</span><br><span class="line">Hadoop is big date frame</span><br><span class="line">Hadoop is big date frame</span><br></pre></td></tr></table></figure><p>这种情况下<code>sed</code>执行之后会对每一行进行两次输出。</p><p>如果我们使用一个选项之后就可以对每行只输出一次:<br><code>sed -n &#39;p&#39; file</code></p><p><code>sed &#39;/javascript/p&#39; file</code>使用这个命令可以去处理一波每一行的里面带有<code>javascript</code>字符的行并对这一行去进行一个输出。</p><p>这个地方打印的结果会是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I love javascript</span><br><span class="line">I love javascript</span><br><span class="line">I LOVE JAVASCRIPT</span><br><span class="line">Hadoop is big date frame</span><br></pre></td></tr></table></figure></p><p>这里很明显到了没有被<code>sed</code>处理到的行会被打印出来(在默认没有对<code>sed</code>添加选项的情况下)。被处理的行会被打印两次，如果我们需要对这种情况进行一个处理，可以添加一个选项<code>-n</code>来进行操作就行了。</p><p><code>sed -n &#39;/javascript/p&#39; file</code></p><p>这个时候就只会打印出一行:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I love javascript</span><br></pre></td></tr></table></figure></p><p>当我们想写多种匹配模式的时候，可以使用这样的命令去写:</p><p><code>sed -n -e &#39;/javascript/p&#39; -e &#39;/JAVASCRIPT/p&#39; file</code></p><p>这种情况下我们就可以同时去使用两种匹配模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love javascript</span><br><span class="line">I LOVE JAVASCRIPT</span><br></pre></td></tr></table></figure><p>我们可以编辑一个文件<code>vim edit.sed</code></p><p>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/javascript/p</span><br></pre></td></tr></table></figure></p><p>然后使用<code>sed -n -f edit.sed file</code>去对<code>file</code>文件进行一个查找，这样还是可以输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I love javascript</span><br></pre></td></tr></table></figure><p><code>sed -n &#39;/javascript|JAVASCRIPT/p&#39; -r file</code></p><p>这种情况下是可以支持一种拓展正则表达式的使用的(这样就可以输出两行字符串):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love javascript</span><br><span class="line">I LOVE JAVASCRIPT</span><br></pre></td></tr></table></figure></p><p><code>sed -n -r &#39;s/(love|LOVE)/like/g;p&#39; file</code></p><p><code>s</code>后面跟<code>///</code>是一个固定的写法,这里表示会把love和LOVE替换成like.</p><p>然后<code>p</code>表示将结果进行一个输出,但是这种情况修改之后并不会对我们的原来的文件造成任何的影响，于是这个时候我们需要去使用另外一个选项去对里面的字符串去进行一个真正的修改:</p><p><code>sed -i s/(love|LOVE)/like/g file</code></p><p>这个时候再次打开<code>file</code>就会发现之前的内容已经被修改了。</p><p>这样我们常见的<code>sed</code>选项已经使用完成了。在正式的生产环境里面使用最多的是其实还是<code>-i</code>命令去进行一个文本的替换。</p><h2 id="sed中的pattern详解"><a href="#sed中的pattern详解" class="headerlink" title="sed中的pattern详解"></a>sed中的pattern详解</h2><p><code>pattern</code>的所有用法表:</p><table><thead><tr><th>匹配模式</th><th>含义   </th></tr></thead><tbody><tr><td><code>10command</code></td><td>匹配到第10行</td></tr><tr><td><code>10,20command</code></td><td>匹配到第10行开始，到第20行结束</td></tr><tr><td><code>10,+5command</code></td><td>匹配到第10行开始，到第16行结束</td></tr><tr><td><code>/pattern1/command</code></td><td>匹配到<code>pattern1</code>的行</td></tr><tr><td><code>/pattern1/,/pattern2/command</code></td><td>匹配到<code>pattern1</code>的行开始，到匹配到<code>pattern2</code>的行结束</td></tr><tr><td><code>10,/pattern1/command</code></td><td>匹配到从第10行开始,到匹配到<code>pattern1</code>的行结束</td></tr><tr><td><code>pattern1/,10command</code></td><td>匹配到<code>pattern1</code>的行开始，到第10行匹配结束</td></tr></tbody></table><p>几乎已经包含了所有的匹配模式，这些情况里面使用的最多的是第四种和第五种模式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  1.直接指定一个行号</span></span><br><span class="line"><span class="comment"># ex:打印file文件的第17行</span></span><br><span class="line">sed -n <span class="string">"17p"</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.指定起始行号和结束行号</span></span><br><span class="line"><span class="comment"># ex:打印文件的第10到20行</span></span><br><span class="line">sed -n <span class="string">"10,20p"</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.指定起始行号，然后后面N行</span></span><br><span class="line"><span class="comment"># ex:打印file文件从第10行开始，在后面第5行的所有内容</span></span><br><span class="line">sed -n <span class="string">"10,+5p"</span> file</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.正则表达式匹配的行</span></span><br><span class="line"><span class="comment"># 这种模式是使用非常多的一种模式()</span></span><br><span class="line"><span class="comment"># ex:打印file文件中以root开头的行</span></span><br><span class="line">sed -n <span class="string">"/^root/p"</span> file</span><br><span class="line">sed -n <span class="string">'/bash/p'</span> /etc/passwd</span><br><span class="line"><span class="comment"># 匹配该文件下面的`/sbin/nologin`字符串(注意一下这里转译符的使用)</span></span><br><span class="line">sed -n <span class="string">'/\/sbin\/nologin/p'</span> /etc/passwd</span><br><span class="line"><span class="comment"># 使用正则表达式来进行一个匹配</span></span><br><span class="line">sed -n <span class="string">'/^hdfs/p'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.从匹配pattern1的行，到匹配pattern2的行</span></span><br><span class="line"><span class="comment"># 这里就想但是是一个区间的模式(这里是从第一个匹配模式匹配到的行开始，到第二个匹配模式匹配到的行结束)</span></span><br><span class="line"><span class="comment"># 从以root开头的行开始到以man开头的行结束</span></span><br><span class="line">sed -n <span class="string">'/^root/,/^man/p'</span> /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.指定给一个行号，直到匹配到pattern1对应的匹配行为止</span></span><br><span class="line">sed -n <span class="string">'4,/^zoomdong/p'</span> /etc/passwd</span><br><span class="line"><span class="comment"># 如果它找不到后面对应的匹配行，那么他会直接输出到最后一行里面去</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7.和第6中情况正好相反</span></span><br><span class="line">sed -n <span class="string">'/^root/,10p'</span> /etc/passwd</span><br></pre></td></tr></table></figure><p>综上所述，使用最多的还是第4和第5种情况。</p><p>ps:使用<code>cat -n xxx</code>可以打印文件并且对应出里面的行号对应的内容。</p><h2 id="sed中的编辑命令"><a href="#sed中的编辑命令" class="headerlink" title="sed中的编辑命令"></a>sed中的编辑命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">类别     编辑命令    含义</span><br><span class="line">查询     p          打印</span><br><span class="line"></span><br><span class="line">增加</span><br><span class="line">        a           行后追加</span><br><span class="line">        i           行前追加</span><br><span class="line">        r           外部文件追加</span><br><span class="line">        w           匹配行写入外部文件</span><br><span class="line"></span><br><span class="line">删除     d          删除</span><br><span class="line"></span><br><span class="line">修改  </span><br><span class="line"></span><br><span class="line">s/old/new   　将行内的第一个old替换为new</span><br><span class="line">s/old/new/g 　将行内所有的old替换为new</span><br><span class="line">s/old/new/2g  表示从第二个开始，后面的old全部替换为new</span><br><span class="line">s/old/new/ig  加i参数时表示匹配时忽略大小写,g表示匹配到的全部替换</span><br></pre></td></tr></table></figure><p>我们先将<code>/etc</code>目录下的<code>passwd</code>复制到当前目录下面来，<code>cp /etc/passwd ./</code>.</p><p><code>cat -n passwd</code> 来查看一下这个文件下面的字符长度。</p><p>然后使用删除命令来进行一波删除:<code>sed &#39;1d&#39; passwd</code></p><p>这个时候它会将结果打印到命令框中，但是它不会将真正的删除应用到原有的文件里面去。</p><p><code>sed -i &#39;1d&#39; passwd</code></p><p>使用<code>head passwd</code>，这个时候就会发现真正改变到原有的文件里面去了。</p><p>同时我们也可以使用<code>sed -i &#39;1,3d&#39; passwd</code>来对修改三行的代码。</p><p>接下来我们可以将<code>passwd</code>目录下不能登录的用户<code>/sbin/nologin</code>全部删除掉。</p><p>这个时候我们就需要使用正则表达式去进行一个匹配。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/sbin\/nologin/d'</span> passwd</span><br></pre></td></tr></table></figure><p>这样再去查看的时候，就会发现以前的已经全部被删除了<code>cat -n passwd</code></p><p>根据区间的匹配模式来进行删除:</p><p><code>sed -i &#39;/^mail/,/^list/d&#39; passwd</code></p><p>这样就可以删除掉以<code>mail</code>开头的行到以<code>list</code>开头的行之间的行。</p><p>上面就是删除命令的常用用法。</p><p><code>sed -i &#39;/\/bin\/bash/a This is user which can login to system&#39; passwd</code>　</p><p>我们通过<code>sed</code>去匹配有<code>/bin/bash</code>的段落，然后通过<code>a</code>指令去在后面进行一个附加段落的添加(注意中间会有一段空格)。这一段会添加到下面一行。(行后追加的模式)</p><p>那么同样的，想在行的前面追加的话，把<code>a</code>修改成<code>i</code>就可以了</p><p><code>sed -i &#39;/^sync/,/^nobody/i 行前添加一波内容&#39; passwd</code></p><p>这样的话被匹配到的行的每一行前面都会添加上对应的内容。</p><p>这样我们使用<code>cat -n passwd</code>去查找的时候就会找到相对应的内容了。</p><p>新建一个叫做<code>list</code>的文件里面写上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">First Line(YYYYYYY)</span><br><span class="line">Second Line(XXXXXXXX)</span><br></pre></td></tr></table></figure></p><p>然后拷贝<code>cp /etc/passwd ./</code>到当前目录下面来。</p><p>使用<code>sed -i &#39;/root/r list&#39; passwd</code><br>首先它会查找<code>passwd</code>文件里面所有包含<code>root</code>的行，然后找到后会吧list里面的内容追加符合条件匹配的行的后面。</p><p>这样只要是包含了<code>root</code>的行后面都会添加上:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">First Line(YYYYYYY)</span><br><span class="line">Second Line(XXXXXXXX)</span><br></pre></td></tr></table></figure></p><p>而<code>w</code>的含义就是就是保存一波匹配到的内容去另外一个文件里面去:</p><p><code>sed -n &#39;/\/bash\/bin/w ./test.txt&#39; passwd</code> </p><p><code>-n</code>这里可以输出查看一波结果,这里会将<code>passwd</code>里面匹配到的结果直接复制到<code>test.txt</code>里面去。(有<code>/bin/bash</code>的用户都是可以登录到我们的用户系统里面去的)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将passwd文件里面的/bin/bash全部替换为/BIN/BASH</span></span><br><span class="line">sed -i <span class="string">'s/\/bin\/bash/\/BIN\/BASH/g'</span> passwd </span><br><span class="line"><span class="comment"># 只替换第一个root为ROOT</span></span><br><span class="line">sed -i <span class="string">'s/root/ROOT/'</span> passwd</span><br><span class="line"><span class="comment"># 替换全部的root加个g即可</span></span><br><span class="line">sed -i <span class="string">'s/root/ROOT/g'</span> passwd</span><br><span class="line"><span class="comment"># 替换从第二个开始的root加个2g即可</span></span><br><span class="line">sed -i <span class="string">'s/root/ROOT/2g'</span> passwd</span><br><span class="line"><span class="comment"># 不用在乎替换的大小写的话直接加一个ig即可</span></span><br><span class="line">sed -i <span class="string">'s/root/ROOT/ig'</span></span><br><span class="line"><span class="comment"># .在正则表达式里面匹配任意一个单个字符，这里表示匹配两个字符</span></span><br><span class="line">sed -i <span class="string">'s/had..p/hadoops/g'</span> passwd</span><br></pre></td></tr></table></figure><p>其他编辑命令例如<code>=</code>是显示行号的意思</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示一波匹配的行号(但是不会显示内容)</span></span><br><span class="line">sed -n <span class="string">'/\/sbin\/nologin/='</span> passwd</span><br><span class="line"><span class="comment"># 这里只会显示输出的行号的结果</span></span><br></pre></td></tr></table></figure><p>假设我们现在有一个这样的文本<code>str.txt</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hadAAp is bigdata frame</span><br><span class="line">Spark hadBBp Kafka</span><br><span class="line">Paper Of hadCCp</span><br><span class="line">Google hadDDp</span><br></pre></td></tr></table></figure></p><p>我们想在<code>had..p</code>后面加上一个<code>s</code>。这里我们就需要使用到反向引用(直接去引用我们所匹配到的内容)的操作了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/had..p/&amp;s/g'</span> str.txt</span><br></pre></td></tr></table></figure><p>这里的<code>&amp;</code>表示我们前面匹配到的值，即为<code>hadAAp</code>,<code>hadBBp</code>,<code>hadCCp</code>。(原封不到匹配到的值)</p><p>这里还有另外一种方法，我们如果想在后面再加上一个<code>O</code>，可以使用这样的脚本(注意前面查找的正则要用括号括起来):<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'s/\(had..ps\)/\1O/g'</span> str.txt</span><br></pre></td></tr></table></figure></p><p>现在<code>str.txt</code>的内容为:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hadoopsO is bigdata frame</span><br><span class="line">Spark hadoopsO Kafka</span><br><span class="line">Paper Of hadoopsO</span><br><span class="line">Google hadoopsO</span><br></pre></td></tr></table></figure></p><p>那我们将<code>oops0</code>替换为<code>doop</code>，也就是说现在我们只需要去替换部分的字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i &apos;s/\(had\)...../\1doop/g&apos; str.txt</span><br></pre></td></tr></table></figure></p><p>如果我们想在<code>sed</code>里面使用变量的话，我们可以新建一个<code>sedExample.sh</code>的文件，里面内容是这样的:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">old_str=hadoop</span><br><span class="line">new_str=HADOOP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意有变量的时候一定要使用双引号</span></span><br><span class="line">sed -i <span class="string">"s/<span class="variable">$old_str</span>/<span class="variable">$new_str</span>/g"</span> str.txt</span><br></pre></td></tr></table></figure><h2 id="利用sed查询特定内容"><a href="#利用sed查询特定内容" class="headerlink" title="利用sed查询特定内容"></a>利用sed查询特定内容</h2><h3 id="pattern种类"><a href="#pattern种类" class="headerlink" title="pattern种类"></a>pattern种类</h3><ol><li>8p</li><li>8,10p</li><li>/regexp/p</li><li>/regexp_1,/regexp_2/p</li><li>8,/regexp/p</li><li>/regexp/,8p</li></ol><h3 id="练手命令"><a href="#练手命令" class="headerlink" title="练手命令"></a>练手命令</h3><ol><li><p>打印<code>/etc/passwd</code>中第<code>20</code>行的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;20p&apos; passwd</span><br></pre></td></tr></table></figure></li><li><p>打印<code>/etc/passwd</code>从第8行开始，到第15行结束的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;8,15p&apos; passwd</span><br></pre></td></tr></table></figure></li><li><p>打印<code>/etc/passwd</code>中从第8行开始，然后+5行的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;8,+5p&apos; passwd</span><br></pre></td></tr></table></figure></li><li><p>打印开头匹配hdfs字符串的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;/^hdfs/p&apos; passwd</span><br></pre></td></tr></table></figure></li><li><p>打印以root开头，hdfs行结尾的行的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;/^root,/^hdfs/p&apos; passwd</span><br></pre></td></tr></table></figure></li><li><p>打印从第8行开始，到含有<code>/sbin/nologin</code>的内容的行结束的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;8,/\/sbin\/nologin/p&apos; passwd</span><br></pre></td></tr></table></figure></li><li><p>打印从<code>bin/bash</code>的行到第五行的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n &apos;/\/bin\/bash/,5p&apos; passwd</span><br></pre></td></tr></table></figure></li></ol><ul><li>脚本练习1</li></ul><p>需求描述:处理一个类似<code>MYSQL</code>配置文件<code>my.cnf</code>的文本，示例如下:编写脚本实现以下功能:输出文件有几个段，并且针对每个段可以统计配置参数总个数(每个段里面都有自己的配置)</p><p>预想输出的结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. client 2</span><br><span class="line">2. server 12</span><br><span class="line">3. mysqld 12</span><br><span class="line">4. mysqld_safe 7</span><br><span class="line">5. embedded 8</span><br><span class="line">6. mysqld-5.5 9</span><br></pre></td></tr></table></figure></p><p>首先要获取到所有的段 get_all segement</p><p>然后统计一波行数 cout_items_in_segment</p><p>则脚本为:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">FILE_NAME=/root/lessons/my.cnf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取到所有的段</span></span><br><span class="line"><span class="keyword">function</span> get_all_segments</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># 可以使用grep对文本进行一个处理</span></span><br><span class="line">    <span class="comment"># grep -E "^\[" my.cnf</span></span><br><span class="line">    <span class="comment"># 使用sed 加个管道|把[]替换掉(替换为空)</span></span><br><span class="line">    <span class="comment"># 同时把结果输出出去，记得使用命令替换</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"`sed -n '/\[.*\]/' <span class="variable">$FILE_NAME</span> | sed -e 's/\[//g' | -e 's/\]//g'`"</span>     </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把段名参数传进去去拿参数</span></span><br><span class="line"><span class="keyword">function</span> count_items_in_segement</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"># 使用区间匹配sed -n "//,//p" xxx $1是传递进来的段名参数</span></span><br><span class="line">    <span class="comment">#　同时过滤掉#开头的行和空号(以$开头的),还有[mysql],[server]这些信息</span></span><br><span class="line">    items=`sed -n <span class="string">"/\[<span class="variable">$1</span>\]/,/\[.*\]/p"</span> <span class="variable">$FILE_NAME</span> | grep -v <span class="string">"^#"</span> | grep -v ^$  | grep -v <span class="string">"\[.*\]"</span>`</span><br><span class="line">    <span class="comment"># 然后统计items的行数</span></span><br><span class="line">    index=0</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> <span class="variable">$items</span> </span><br><span class="line">    <span class="keyword">do</span> </span><br><span class="line">      index=`expr <span class="variable">$index</span> + 1`</span><br><span class="line">    <span class="keyword">done</span> </span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$index</span>  </span><br><span class="line">&#125;</span><br><span class="line">number=0</span><br><span class="line"><span class="comment"># 先得到所有的列表</span></span><br><span class="line"><span class="keyword">for</span> seg <span class="keyword">in</span> `get_all_segments`</span><br><span class="line"><span class="comment"># 把段名作为参数传给count_items_in_segement</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  number=`expr <span class="variable">$number</span> + 1`</span><br><span class="line">  <span class="comment">#   把seg作为参数过去,得到列表的数目</span></span><br><span class="line">  items_count=`count_items_in_segement <span class="variable">$seg</span>`</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">"<span class="variable">$number</span>: <span class="variable">$seg</span> <span class="variable">$items_count</span>"</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></p><h2 id="利用sed来删除特定的内容"><a href="#利用sed来删除特定的内容" class="headerlink" title="利用sed来删除特定的内容"></a>利用sed来删除特定的内容</h2><p>删除命令对照表可以看一波前面的内容。<br>用法总结:</p><ol><li>1d</li><li>5,10d</li><li>10,+10d</li><li>/pattern1/d</li><li>/pattern1/,/pattern2/d</li><li>/pattern1/, 20d</li><li>15,/pattern1/d</li></ol><p>练习例子:</p><ol><li><p>删除/etc/passwd中的第15行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'15d'</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>第8-14行所有内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'8,14d'</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>删除不能登录的用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/sbin\/nologin/d'</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>删除从<code>mail</code>开头到<code>yarn</code>开头的行的所有内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^mail/,/^yarn/d'</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>删除第一个不能登录的用户到第13行的所有内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一般不推荐使用这种模式</span></span><br><span class="line">sed -i <span class="string">'/\/sbin\/nologin/,13d'</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>删除第五行到以<code>ftp</code>开头的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'5,/^ftp/d'</span> /etc/passwd</span><br></pre></td></tr></table></figure></li><li><p>删除以yarn开头到后所有行的内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^yarn/,$'</span> passwd</span><br></pre></td></tr></table></figure></li></ol><p>这里以<code>nginx.conf</code>为例子(可以参考服务器上面的nginx文件)<br>典型需求:</p><ol><li><p>删除配置文件中所有注释行和空行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除空格然后删一个#(反正就是删有#号注释的行)</span></span><br><span class="line">sed -i <span class="string">'/[:blank:]*#/d'</span> nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中所有不以#开头的前面添加*符号，注意:以#开头的行不添加。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先匹配非#开头的行,*前面加一个转译</span></span><br><span class="line">sed -i <span class="string">'s/^[^#]/\*&amp;/g'</span> nginx.conf</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用sed修改文件内容"><a href="#使用sed修改文件内容" class="headerlink" title="使用sed修改文件内容"></a>使用sed修改文件内容</h2><p>修改命令对照表参照以前。</p><blockquote><p>head -1 passwd<br>查看某个文件的第一行</p></blockquote><p>练习Demo:</p><ol><li><p>修改<code>/etc/passwd</code>中第一行中第一个<code>root</code>为<code>ROOT</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'1s/root/ROOT/'</span> passwd</span><br></pre></td></tr></table></figure></li><li><p>修改<code>/etc/passwd</code>中第五行到第十行中所有的<code>/sbin/nologin</code>为<code>/bin/bash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'5,10s/\/sbin\/nologin/\/bin\/bash/g'</span> passwd</span><br></pre></td></tr></table></figure></li><li><p>匹配到有<code>/sbin/nologin</code>的行，将匹配到行中的<code>login</code>改为<code>LOGIN</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/sbin\/nologin/s/login/LOGIN/g'</span> passwd</span><br></pre></td></tr></table></figure></li><li><p>匹配出从<code>root</code>开头的行到行中包含<code>mail</code>的行,并将里面的<code>bin</code>改为<code>HADOOP</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^root/,/mail/s/bin/HADOOP/g'</span> passwd</span><br></pre></td></tr></table></figure></li><li><p>修改<code>/etc/passwd</code>中从匹配到以root开头的行，到第15行中所有的行，将这些行中的<code>nologin</code>修改为<code>SPARK</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^root/,15s/nologin/SPARK/g'</span></span><br></pre></td></tr></table></figure></li><li><p>修改从15行开始，到以<code>yarn</code>开头的行，把<code>bin</code>替换为<code>BIN</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'15,/^yarn/s/bin/BIN/g'</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="利用sed追加文件内容"><a href="#利用sed追加文件内容" class="headerlink" title="利用sed追加文件内容"></a>利用sed追加文件内容</h2><p>总结:</p><ol><li>a 在匹配行后面追加(append)</li></ol><p>(1) <code>passwd</code>文件第10行后面追加<code>Add Line Behind</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'10a Add Line Behind'</span> passwd</span><br></pre></td></tr></table></figure><p>(2) <code>passwd</code>文件第10行到第20行，每一行后面都追加<code>Test Line Behind</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'10,20a Test Line Behind'</span> passwd</span><br></pre></td></tr></table></figure><p>(3) <code>passwd</code>文件匹配到<code>/bin/bash</code>的行后面追加”Insert Line For /bin/bash Behind”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/bin\/bash/a Insert Line For /bin/bash Behind'</span> passwd</span><br></pre></td></tr></table></figure><ol start="2"><li>i 在匹配行的前面添加</li></ol><p>(1) <code>passwd</code>文件匹配到以<code>yarn</code>开头的行，在匹配行前面追加<code>Add Line Before</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^yarn/i Add Line Before'</span> passwd</span><br></pre></td></tr></table></figure></p><p>(2) <code>passwd</code>文件每一行前面都追加”Insert Line Before Every Line”</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'i Insert Line Before Every Line'</span> passwd</span><br></pre></td></tr></table></figure><ol start="3"><li>r 把外部文件内容追加到特定行后面</li></ol><p>(1) 将<code>/etc/fstab</code> 文件的内容追加到<code>passwd</code>文件的第20行后面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'20r /etc/fstab'</span> passwd</span><br></pre></td></tr></table></figure></p><p>(2) 将<code>/etc/inittab</code>文件内容追加到<code>passwd</code>文件匹配<code>sbin/nologin</code>行的后面<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/bin\/bash/r /etc/inittab'</span> passwd</span><br></pre></td></tr></table></figure></p><p>(3) 将<code>/etc/vconsole.conf</code>文件内容追加到<code>passwd</code>文件中特定行后面，匹配以<code>ftp</code>开头的行,到第18行的所有内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/^ftp/,18r /etc/vconsole.conf'</span> passwd</span><br></pre></td></tr></table></figure></p><ol start="4"><li>w 处理文件中匹配行的内容保存到外部文件中<br>(1) 将<code>passwd</code>文件匹配到<code>bin/bash</code>的行追加到<code>/tmp/sed.txt</code>文件中<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'/\/bin\/bash/w /tmp/sed.txt'</span> passwd</span><br></pre></td></tr></table></figure></li></ol><p>(2) 将<code>passwd</code>文件从第10行开始，到匹配到<code>hdfs</code>开头的所有行内容追加到<code>/tmp/sed-1.txt</code>中<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">'10,/^hdfs/w /tmp/sed-1.txt'</span> passwd</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sed-的工作模式&quot;&gt;&lt;a href=&quot;#sed-的工作模式&quot; class=&quot;headerlink&quot; title=&quot;sed 的工作模式&quot;&gt;&lt;/a&gt;sed 的工作模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sed&lt;/code&gt;(Stream Editor),流编辑器。对标准输出或文件逐行输出。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;语法格式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stdout | sed [option] &amp;quot;pattern command&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sed [option] &amp;quot;pattern command&amp;quot; file&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;逐行根据命令来进行匹配。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用Antd Upload组件上传文件到七牛</title>
    <link href="http://zoomdong.site/2019/09/08/qiniu-upload/"/>
    <id>http://zoomdong.site/2019/09/08/qiniu-upload/</id>
    <published>2019-09-08T08:10:18.000Z</published>
    <updated>2019-09-08T05:45:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Upload组件将文件上传到七牛"><a href="#使用Upload组件将文件上传到七牛" class="headerlink" title="使用Upload组件将文件上传到七牛"></a>使用Upload组件将文件上传到七牛</h2><p>需求大概是这样的，我们需要使用<code>Antd</code>的<code>Upload</code>组件将上传的文件传到七牛云上面，然后让七牛那边返回一个<code>url</code>即可。</p><p>结合了一下之前写过的关于七牛那边的<a href="https://developer.qiniu.com/kodo/sdk/1289/nodejs" target="_blank" rel="noopener">Node SDK</a>.</p><p>大概是这样一个操作:</p><ul><li>先获取到七牛那边的一个token值</li><li>然后将文件上传到七牛那边提供的一个url上面(一个post接口，要附带token提交上去)</li><li>拿到返回的url地址</li></ul><a id="more"></a><p>这里使用的框架是<code>react</code>，版本号是<code>16.9.0</code>.</p><p>先安装一波依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install qiniu -S</span><br></pre></td></tr></table></figure></p><p>然后新建一个<code>qiniu.js</code>的文件，用来得到七牛那边的<code>token</code>值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qiniu <span class="keyword">from</span> <span class="string">'qiniu'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Qiniu &#125; <span class="keyword">from</span> <span class="string">'../../secret'</span>;</span><br><span class="line"></span><br><span class="line">qiniu.conf.ACCESS_KEY = Qiniu.AK;</span><br><span class="line">qiniu.conf.SECRET_KEY = Qiniu.SK;</span><br><span class="line"><span class="comment">// 七牛那边的对应的bucket名称</span></span><br><span class="line"><span class="keyword">const</span> bucket = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getToken = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> putPolicy = <span class="keyword">new</span> qiniu.rs.PutPolicy(&#123;</span><br><span class="line">        scope: bucket</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> putPolicy.uploadToken();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后相对应的<code>secret.js</code>用来存储个人七牛的仓库的<code>SK</code>和<code>AK</code>。</p><p>其中<code>secret.js</code>的代码大致为这样(相关的SK和AK已屏蔽):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Qiniu = &#123;</span><br><span class="line">    AK:<span class="string">''</span>,</span><br><span class="line">    SK:<span class="string">''</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个文件上传的时候放在<code>.gitignore</code>里面就可以了。或者项目有<code>CI</code>支持的话，可以先用<code>CI</code>对文件进行一个加密也可以。</p><p>过程大概是这样,在使用upload进行组件的上传的时候，先使用<code>beforeUpload</code>获取到本次上传所需要的<code>token</code>值，然后把<code>token</code>填在上传的<code>data</code>里面,然后上传到七牛对应的<code>QINIU_SERVER</code>那边去，这样最后那边上传之后返回的<code>url</code>。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, Fragment &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Form, Upload, Modal, Icon &#125; <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">"utils/qiniu"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 七牛默认的上传地址</span></span><br><span class="line"><span class="keyword">const</span> QINIU_SERVER = <span class="string">"http://upload.qiniup.com"</span>;</span><br><span class="line"><span class="comment">// bucket绑定的URL</span></span><br><span class="line"><span class="keyword">const</span> BASE_QINIU_URL = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">const</span> FormItem = Form.Item;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Demo</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getFieldDecorator &#125; = props.form;</span><br><span class="line">  <span class="keyword">const</span> [previewVisible, setPreviewVisible] = useState(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">const</span> [previewImage, setPreviewImage] = useState(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">const</span> [token, setToken] = useState(<span class="string">""</span>);</span><br><span class="line">  <span class="keyword">const</span> [fileList, setFileList] = useState([]);</span><br><span class="line">  <span class="keyword">const</span> formItemLayout = &#123;</span><br><span class="line">    labelCol: &#123;</span><br><span class="line">      xs: &#123; <span class="attr">span</span>: <span class="number">24</span> &#125;,</span><br><span class="line">      sm: &#123; <span class="attr">span</span>: <span class="number">8</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    wrapperCol: &#123;</span><br><span class="line">      xs: &#123; <span class="attr">span</span>: <span class="number">24</span> &#125;,</span><br><span class="line">      sm: &#123; <span class="attr">span</span>: <span class="number">16</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handlePreview = <span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">    setPreviewImage(file.url || file.thumbUrl);</span><br><span class="line">    setPreviewVisible(<span class="literal">true</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleChange = <span class="function">(<span class="params">&#123; file, fileList &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; uid, name, type, thumbUrl, status, response = &#123;&#125; &#125; = file;</span><br><span class="line">    <span class="keyword">const</span> fileItem = &#123;</span><br><span class="line">      uid,</span><br><span class="line">      name,</span><br><span class="line">      type,</span><br><span class="line">      thumbUrl,</span><br><span class="line">      status,</span><br><span class="line">      url: BASE_QINIU_URL + (response.hash || <span class="string">""</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    fileList.pop();</span><br><span class="line">    fileList.push(fileItem);</span><br><span class="line">    <span class="comment">// 这个地方必须要用展开运算符，不然会有bug</span></span><br><span class="line">    setFileList([...fileList]);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> getUploadToken = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = getToken();</span><br><span class="line">    setToken(token);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> uploadButton = (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;Icon type=<span class="string">"plus"</span> /&gt;</span><br><span class="line">      &lt;div className=<span class="string">"ant-upload-text"</span>&gt;上传&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;Fragment&gt;</span><br><span class="line">      &lt;Form&gt;</span><br><span class="line">        &lt;FormItem label=<span class="string">"上传文件 "</span> &#123;...formItemLayout&#125;&gt;</span><br><span class="line">          &#123;getFieldDecorator(<span class="string">"scwj"</span>, &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: <span class="literal">false</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;)(</span><br><span class="line">            &lt;&gt;</span><br><span class="line">              &lt;Upload</span><br><span class="line">                action=&#123;QINIU_SERVER&#125;</span><br><span class="line">                data=&#123;&#123; token &#125;&#125;</span><br><span class="line">                listType=<span class="string">"picture-card"</span></span><br><span class="line">                beforeUpload=&#123;getUploadToken&#125;</span><br><span class="line">                fileList=&#123;fileList&#125;</span><br><span class="line">                onPreview=&#123;handlePreview&#125;</span><br><span class="line">                onChange=&#123;handleChange&#125;</span><br><span class="line">              &gt;</span><br><span class="line">                &#123;fileList.length &gt;= <span class="number">1</span> ? <span class="literal">null</span> : uploadButton&#125;</span><br><span class="line">              &lt;<span class="regexp">/Upload&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>Form&gt;</span><br><span class="line">      &lt;Modal visible=&#123;previewVisible&#125; footer=&#123;<span class="literal">null</span>&#125; onCancel=&#123;handleCancel&#125;&gt;</span><br><span class="line">        &lt;img style=&#123;&#123; <span class="attr">width</span>: <span class="string">"100%"</span> &#125;&#125; src=&#123;previewImage&#125; alt=<span class="string">"previewImg"</span> /&gt;</span><br><span class="line">      &lt;<span class="regexp">/Modal&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>Fragment&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Demo;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用Upload组件将文件上传到七牛&quot;&gt;&lt;a href=&quot;#使用Upload组件将文件上传到七牛&quot; class=&quot;headerlink&quot; title=&quot;使用Upload组件将文件上传到七牛&quot;&gt;&lt;/a&gt;使用Upload组件将文件上传到七牛&lt;/h2&gt;&lt;p&gt;需求大概是这样的，我们需要使用&lt;code&gt;Antd&lt;/code&gt;的&lt;code&gt;Upload&lt;/code&gt;组件将上传的文件传到七牛云上面，然后让七牛那边返回一个&lt;code&gt;url&lt;/code&gt;即可。&lt;/p&gt;
&lt;p&gt;结合了一下之前写过的关于七牛那边的&lt;a href=&quot;https://developer.qiniu.com/kodo/sdk/1289/nodejs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Node SDK&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;大概是这样一个操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先获取到七牛那边的一个token值&lt;/li&gt;
&lt;li&gt;然后将文件上传到七牛那边提供的一个url上面(一个post接口，要附带token提交上去)&lt;/li&gt;
&lt;li&gt;拿到返回的url地址&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>react-hooks使用详解</title>
    <link href="http://zoomdong.site/2019/09/08/hooks/"/>
    <id>http://zoomdong.site/2019/09/08/hooks/</id>
    <published>2019-09-08T08:10:02.000Z</published>
    <updated>2019-09-08T08:12:14.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>已经使用 hooks 开发有一段时间了，还是写点东西记一下学到的一些东西吧。</p><p><code>hooks API</code> 个人认为存在的目的就是为了让函数式组件横行天下。</p><a id="more"></a><h2 id="hooks-的基本使用"><a href="#hooks-的基本使用" class="headerlink" title="hooks 的基本使用"></a>hooks 的基本使用</h2><p>假设回到以前的<code>class</code>组件的时代，我们需要来做一个定时器的功能(每隔<code>1s</code>就<code>+1</code>的那种功能的话)，我们可能需要下面这些代码:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 设置一个interval，让它每次把count进行一个+1</span></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    <span class="keyword">this</span>.interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        count: <span class="keyword">this</span>.state.count + <span class="number">1</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在组件卸载的时候清除interval属性(不卸载的话会造成内存的泄露)</span></span><br><span class="line">  componentWillUnmount() &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.interval) &#123;</span><br><span class="line">      clearInterval(<span class="keyword">this</span>.interval);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B;</span><br></pre></td></tr></table></figure><p>在<code>hooks API</code>还没有出来之前我们是无法用<code>function component</code>来完成这些功能的，因为在函数式组件里面是没有<code>this</code>属性的，因此我们也无法使用<code>state</code>去保存函数内部的一些状态。</p><p>因此有了<code>react hooks</code>我们可以去使用<code>hooks API</code>去完成这些功能.</p><p>我们需要使用<code>useState</code>和<code>useEffect</code>这些功能来完成这些东西。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里就相当于通过一个es6解构的方式来完成数组的赋值。</span></span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 它会在组件渲染完成之后去执行第一个回调函数</span></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      setCount(<span class="function"><span class="params">c</span> =&gt;</span> c + <span class="number">1</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//　return 的方法会在组件被卸载的时候去执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(interval);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B;</span><br></pre></td></tr></table></figure><p>可以看出函数式组件整体上面的代码是要比<code>class</code>组件优化很多的。</p><p><code>useEffect</code>会在组件更新完成之后执行第一个被传入的回调函数，同时也会在组件被卸载的时候去执行<code>return</code>所返回的回调函数。</p><h2 id="State-hooks-API"><a href="#State-hooks-API" class="headerlink" title="State hooks API"></a>State hooks API</h2><p><code>State hooks API</code>的话一共有两个:</p><ul><li>useState</li><li>useReducer</li></ul><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><p>通过上面的<code>Demo</code>我们可以看到一共是接受两个参数:</p><p><code>const [count,setCount] = useState(0);</code></p><p>而<code>setCount()</code>的话也是有两个使用形式的:</p><p>一种是直接往里面传值(传的值是啥，那么<code>count</code>就为那个值),然后一种就是传一个回调函数,<code>setCount(c=&gt;c+1)</code>，回调函数会首先拿到一个值，这个值就是我们使用<code>count</code>所得到最新的值，因此我们可以在这个基础上面再做一些事情。</p><p>这两种形式本质上还是有区别的，还是以前面的<code>demo</code>为例子,如果在前面的<code>demo</code>里面我们写的是:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setCount(count + <span class="number">1</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(interval);</span><br><span class="line">&#125;, []);</span><br></pre></td></tr></table></figure><p>那么你会看到页面会始终停留在 1 这个值那里，因为这个时候整个代码就相当于陷入了一个闭包的陷阱里面，每次使用<code>setInterval</code>去进行<code>count</code>值的获取的时候，它都会拿到每次函数<code>B</code>构建完成之后所瞬间声明的<code>count</code>值(默认为 0)，所以这个地方页面所渲染出来的值会永远是<code>1</code>。<br>所以这里我们通过传入回调的方式来规避掉这个 bug。</p><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><p>其实<code>useState</code>本质上就是由<code>useReducer</code>演化而来的，<code>useReducer</code>的用法有点类似于<code>redux</code>里面的<code>reducer</code>函数.</p><p>我们可以使用<code>useReducer</code>来改写一下上面的<code>demo</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useReducer, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 它接收两个参数，可以根据action的类型来对state进行更新</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"minus"</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ussReducer接收两个参数，一个是一个reducer函数，还有一个是cout的初始值</span></span><br><span class="line">  <span class="keyword">const</span> [count, dispatchCount] = useReducer(countReducer, <span class="number">0</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 这里通过dispatch这个方法去改变值</span></span><br><span class="line">      dispatchCount(&#123; <span class="attr">type</span>: <span class="string">"add"</span> &#125;);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//　return 的方法会在组件被卸载的时候去执行</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> clearInterval(interval);</span><br><span class="line">  &#125;, []);</span><br><span class="line">  <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B;</span><br></pre></td></tr></table></figure><p>我们通过<code>dispacth</code>一个<code>action</code>来判断如何去修改一个状态。</p><p><code>useReducer</code>存在的意义就是在使用<code>const [count,setCount] = useState(0)</code>的时候，如果<code>count</code>是一个很复杂的<strong>对象</strong>，我们使用<code>setCount</code>对其去做出改变是很复杂的，这个时候我们就需要使用<code>useReducer</code>来去修改我们所定义的值的内容。</p><h2 id="Effect-Hook"><a href="#Effect-Hook" class="headerlink" title="Effect Hook"></a>Effect Hook</h2><p>先写一个比较简单的案例:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useReducer, useEffect &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 它接收两个参数，可以根据action的类型来对state进行更新</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"minus"</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatchCount] = useReducer(countReducer, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">"wd"</span>);</span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"effect invoked"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"effect deteched"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;() =&gt; &#123;</span><br><span class="line">          dispatchCount(&#123; <span class="attr">type</span>: <span class="string">"add"</span> &#125;);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;count&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B;</span><br></pre></td></tr></table></figure><p>我们刚进去页面的时候，会发现控制台输出了<code>effect invoked</code>,然后当我们每次去点击按钮的时候，每点击一次，控制台都会输出:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">effect deteched</span><br><span class="line">effect invoked</span><br></pre></td></tr></table></figure><p>但我们去修改<code>input</code>框里面的内容的时候，同样也会输出上面的内容。这说明只要有状态更新这个组件就会重新渲染,每次重新渲染<code>useEffect</code>都要去执行一次。</p><p>但是如果我们给<code>useEffect</code>组件加上第二个参数:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, []);</span><br></pre></td></tr></table></figure><p>这样<code>useEffect</code>就只会在组件渲染完成之后进行一次执行，然后其他时候都不会执行了。</p><p>然后只有在组件被注销的时候,会输出<code>effect deteched</code>.</p><p>传入的这个数组，是可以在里面传入一些内容的,比如前面有声明的<code>name</code>或者是<code>count</code>，如果在里面放入了 count,那么每次在 count 发生改变的时候这个函数都会去执行一次。同样的传<code>name</code>这个函数也会发生同样的情况。</p><p>这里的意思就是这样的，我们传入的这个值，如果在这个周期里面值没有发生改变的话，那么<code>useEffect</code>里面的回调函数就不会执行，同<code>return</code>返回的卸载时执行的函数也不会执行。</p><p>如果我们传入空数组，那么<code>useEffect</code>只会在第一次执行。</p><p><code>react</code>官方所给出的意见是，如果我们在<code>useEffect</code>里面使用到了函数式组件内部定义的值，我们都需要把它当成<code>useEffect</code>的第二个数组参数列表里面的一个变量。这个地方我们称之为依赖。</p><h3 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h3><p>这个<code>hooks api</code>是<code>useEffect</code>的一个兄弟钩子函数，它的作用和<code>useEffect</code>基本上差不多。</p><p>我们直接改写一下<code>demo</code>,在里面加入一个<code>useLayoutEffect</code>函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"effect invoked"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"effect deteched"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [count]);</span><br><span class="line"></span><br><span class="line">useLayoutEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"layouteffect invoked"</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"layouteffect deteched"</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [count]);</span><br></pre></td></tr></table></figure><p>当我们每次去点击<code>button</code>按钮的时候，会发现会输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">layouteffect deteched</span><br><span class="line">layouteffect invoked</span><br><span class="line">effect deteched</span><br><span class="line">effect invoked</span><br></pre></td></tr></table></figure><p>这就可以说明每次<code>useLayoutEffect</code>都在<code>useEffect</code>之前执行。</p><p><code>useEffect</code>和<code>useLayoutEffect</code>本质上的区别就在于，<code>useLayoutEffect</code>会在<code>dom</code>元素执行成为<code>html</code>元素之前执行，而<code>useEffect</code>则会在<code>dom</code>元素执行成<code>html</code>元素之后执行。</p><p>一般情况下<code>useLayoutEffect</code>用的比较少(因为如果里面的 js 代码执行时间很长的话)，那么那部分<code>dom</code>元素会一直等到<code>useLayoutEffect</code>里面的<code>js</code>代码执行完成之后再去渲染，这样就会很大程度上影响到页面的性能。</p><h2 id="Context-Hook"><a href="#Context-Hook" class="headerlink" title="Context Hook"></a>Context Hook</h2><p>Context Hook 应该算的上是 hooks 里面一个比较简单的 API.</p><p>其实大致用法就和<code>react-redux</code>里面的那个<code>Provider</code> API 差不多.</p><h2 id="Ref-Hook"><a href="#Ref-Hook" class="headerlink" title="Ref Hook"></a>Ref Hook</h2><p>我们可以通过<code>react hooks</code>里面的<code>useRef</code>API 来获得某个元素的 dom 节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useReducer, useEffect, useRef &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 它接收两个参数，可以根据action的类型来对state进行更新</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"minus"</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatchCount] = useReducer(countReducer, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">"wd"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> inputRef = useRef();</span><br><span class="line"></span><br><span class="line">  useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"effect invoked"</span>);</span><br><span class="line">    <span class="comment">// 这个地方输出的就是input这个dom元素</span></span><br><span class="line">    <span class="built_in">console</span>.log(inputRef.current);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"effect deteched"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [count]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input</span><br><span class="line">        ref=&#123;inputRef&#125;</span><br><span class="line">        value=&#123;name&#125;</span><br><span class="line">        onChange=&#123;e =&gt; setName(e.target.value)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">      &lt;button</span><br><span class="line">        onClick=&#123;() =&gt; &#123;</span><br><span class="line">          dispatchCount(&#123; <span class="attr">type</span>: <span class="string">"add"</span> &#125;);</span><br><span class="line">        &#125;&#125;</span><br><span class="line">      &gt;</span><br><span class="line">        &#123;count&#125;</span><br><span class="line">      &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> B;</span><br></pre></td></tr></table></figure><h2 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h2><p>关于这个API其实也没有过多的介绍，我根据官方写了一个<code>demo</code>来介绍一波怎么使用这个方法来让父组件去拿子组件的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React , &#123; useImperativeHandle ,useRef, forwardRef, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FancyInput</span>(<span class="params">props,ref</span>)</span>&#123;</span><br><span class="line">  useImperativeHandle(ref,()=&gt;(&#123;</span><br><span class="line">    test:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      validate()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;));</span><br><span class="line">  <span class="keyword">const</span> validate = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test一波'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>(</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">FancyInput = forwardRef(FancyInput);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">  let Fatherref = useRef(null);</span></span><br><span class="line"><span class="regexp">  useEffect(()=&gt;&#123;</span></span><br><span class="line"><span class="regexp">    console.log(Fatherref);</span></span><br><span class="line"><span class="regexp">    Fatherref.current.test();</span></span><br><span class="line"><span class="regexp">  &#125;)</span></span><br><span class="line"><span class="regexp">  return(</span></span><br><span class="line"><span class="regexp">    &lt;div&gt;</span></span><br><span class="line"><span class="regexp">      &lt;FancyInput ref=&#123;Fatherref&#125;/</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="hooks-性能优化"><a href="#hooks-性能优化" class="headerlink" title="hooks 性能优化"></a>hooks 性能优化</h2><p>我们先利用前面的一些<code>hooks</code>来写一个<code>demo</code>:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer, useState &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"minus"</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCountFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatchCount] = useReducer(countReducer, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">"wd"</span>);</span><br><span class="line">  <span class="keyword">const</span> config = &#123;</span><br><span class="line">    text: <span class="string">`count is <span class="subst">$&#123;count&#125;</span>`</span>,</span><br><span class="line">    color: count &gt; <span class="number">3</span> ? <span class="string">`red`</span> : <span class="string">`blue`</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /&gt;</span><br><span class="line">      &lt;Child</span><br><span class="line">        config=&#123;config&#125;</span><br><span class="line">        onButtonClick=&#123;() =&gt; dispatchCount(&#123; <span class="attr">type</span>: <span class="string">"add"</span> &#125;)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">function Child(&#123; onButtonClick, config &#125;) &#123;</span></span><br><span class="line"><span class="regexp">  console.log("child render");</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;button onClick=&#123;onButtonClick&#125; style=&#123;&#123; color: config.color &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">      &#123;config.text&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyCountFunc;</span><br></pre></td></tr></table></figure><p>通过这个组件我们可以看到每次在父组件里面状态发生更新时，子组件都会跟着同时去进行一个渲染(每次都会输出”child render”)。</p><p>而这个时候我们只希望在和子组件相关的<code>props</code>发生改变的时候才去对子组件进行一个重新的渲染，这个时候就需要使用<code>hooks</code>里面的<code>memo</code>了.</p><p>它的功能就类似于以前生命周期函数里面的<code>shouldComponentUpdate</code>API。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; memo &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Child = memo(<span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">&#123; onButtonClick, config &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"child render"</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;button onClick=&#123;onButtonClick&#125; style=&#123;&#123; <span class="attr">color</span>: config.color &#125;&#125;&gt;</span><br><span class="line">      &#123;config.text&#125;</span><br><span class="line">    &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;);</span></span><br></pre></td></tr></table></figure><p>这样修改之后我们又会发现，当<code>MyCountFunc</code>方法的输入框里面的值(name)发生改变的时候，子组件又会重新去<code>render</code>一次，这是因为<code>name</code>改变的时候会去调用<code>setName</code>这个方法，然后这个方法就会触发当前方法(<code>MyCountFunc</code>)的重新执行，然后重新执行那么<code>config</code>这个值也会去重新构造一次，这样就会触发<code>Child</code>组件的重新渲染。因为每次方法调用都会形成一个闭包，这样里面的值都会重新去申明一次。</p><p>所以这个时候我们需要使用一个新的<code>hooks</code>API 去对<code>config</code>这个变量进行一次的包装。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer, useState, memo, useMemo &#125; <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countReducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"add"</span>:</span><br><span class="line">      <span class="keyword">return</span> state + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"minus"</span>:</span><br><span class="line">      <span class="keyword">return</span> state - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyCountFunc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> [count, dispatchCount] = useReducer(countReducer, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">const</span> [name, setName] = useState(<span class="string">"wd"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> config = useMemo(</span><br><span class="line">    () =&gt; (&#123;</span><br><span class="line">      text: <span class="string">`count is <span class="subst">$&#123;count&#125;</span>`</span>,</span><br><span class="line">      color: count &gt; <span class="number">3</span> ? <span class="string">`red`</span> : <span class="string">`blue`</span></span><br><span class="line">    &#125;),</span><br><span class="line">    [count]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;input value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /&gt;</span><br><span class="line">      &lt;Child</span><br><span class="line">        config=&#123;config&#125;</span><br><span class="line">        onButtonClick=&#123;() =&gt; dispatchCount(&#123; <span class="attr">type</span>: <span class="string">"add"</span> &#125;)&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">const Child = memo(function Child(&#123; onButtonClick, config &#125;) &#123;</span></span><br><span class="line"><span class="regexp">  console.log("child render");</span></span><br><span class="line"><span class="regexp">  return (</span></span><br><span class="line"><span class="regexp">    &lt;button onClick=&#123;onButtonClick&#125; style=&#123;&#123; color: config.color &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">      &#123;config.text&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>button&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyCountFunc;</span><br></pre></td></tr></table></figure><p>这个时候你会发现每次改变的时候，子组件仍然会重新去发生渲染，这里造成这个现象的原因其实主要还是<code>MyCountFunc</code>这个组件上面的一个<code>onButtonClick</code>方法导致的。我们也需要对这个方法去进行一个优化</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里也接受第二个参数，也是个空数组，但是这个useCallback方法不接受任何的依赖参数</span></span><br><span class="line"><span class="keyword">const</span> handleButtonClick = useCallback(<span class="function"><span class="params">()</span> =&gt;</span> dispatchCount(&#123; <span class="attr">type</span>: <span class="string">"add"</span> &#125;), []);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input value=&#123;name&#125; onChange=&#123;e =&gt; setName(e.target.value)&#125; /&gt;</span><br><span class="line">    &lt;Child config=&#123;config&#125; onButtonClick=&#123;handleButtonClick&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure><p>然后到这里之后，我们的优化就完成了。这里就是<code>hooks</code>里面非常重要的一些优化。</p><p>其实上面也是可以使用<code>useMemo</code>来取代<code>useCallback</code>的一些功能的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleButtonClick = useMemo(<span class="function"><span class="params">()</span>=&gt;</span><span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">  dispatch(&#123; <span class="attr">type</span>:<span class="string">'add'</span> &#125;)</span><br><span class="line">&#125;,[])</span><br></pre></td></tr></table></figure><p>本质上<code>useCallback</code>实际上就是<code>hooks</code>里面用来优化方法的一种<code>useMemo</code>方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;已经使用 hooks 开发有一段时间了，还是写点东西记一下学到的一些东西吧。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;hooks API&lt;/code&gt; 个人认为存在的目的就是为了让函数式组件横行天下。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ubuntu使用 qq 最佳体验</title>
    <link href="http://zoomdong.site/2019/09/02/ubuntu-tim/"/>
    <id>http://zoomdong.site/2019/09/02/ubuntu-tim/</id>
    <published>2019-09-02T06:28:23.000Z</published>
    <updated>2019-09-02T06:30:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ubuntu-qq-最佳体验"><a href="#ubuntu-qq-最佳体验" class="headerlink" title="ubuntu qq 最佳体验"></a>ubuntu qq 最佳体验</h2><p>个人到现在已经使用了<code>ubuntu</code>大约有1年半的时间了,到现在已经尝试过各种方式来安装<code>ubuntu</code>上面的<code>qq</code>版本:</p><ul><li>使用wine来安装老版本的qq(大概是qq2014)</li><li>使用虚拟机创建一个<code>windows</code>主机从而安装<code>qq</code></li><li>使用<code>deepin</code>系统下的qq</li></ul><a id="more"></a><p>个人到目前位置是觉得第三种方式是能够称为最佳体验的,至少相比于第一种,它的版本是有所提升的,相比于第二种能很好的提高使用的性能．</p><p>所以这里就来介绍一下怎么使用第三种方式来兼容安装<code>tim</code>和<code>wechat</code>。</p><p>首先先使用命令来看一下本地的系统环境:</p><p>使用命令<code>lsb_release -a</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Distributor ID:Ubuntu</span><br><span class="line">Description:Ubuntu 16.04.6 LTS</span><br><span class="line">Release:16.04</span><br><span class="line">Codename:xenial</span><br></pre></td></tr></table></figure><p>然后教程是这样的:</p><ul><li>首先安装wine:<code>git clone https://github.com/wszqkzqk/deepin-wine-ubuntu.git</code></li><li>clone到仓库之后，然后进去里面将<code>shell</code>脚本跑起来:<code>cd deepin-wine-ubuntu &amp;&amp; sudo sh ./install.sh</code></li><li>然后去 <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/" target="_blank" rel="noopener">tim镜像网站</a> 和 <a href="http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/" target="_blank" rel="noopener">微信镜像网站</a> 下载到对应的<code>deb</code>安装包(微信最好不要下载最新的)</li><li>将下载下来的<code>deb</code>包使用命令行进行解压<code>sudo dpkg -i xxx.deb</code></li></ul><p>然后在电脑上就可以找到对应的文件了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ubuntu-qq-最佳体验&quot;&gt;&lt;a href=&quot;#ubuntu-qq-最佳体验&quot; class=&quot;headerlink&quot; title=&quot;ubuntu qq 最佳体验&quot;&gt;&lt;/a&gt;ubuntu qq 最佳体验&lt;/h2&gt;&lt;p&gt;个人到现在已经使用了&lt;code&gt;ubuntu&lt;/code&gt;大约有1年半的时间了,到现在已经尝试过各种方式来安装&lt;code&gt;ubuntu&lt;/code&gt;上面的&lt;code&gt;qq&lt;/code&gt;版本:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用wine来安装老版本的qq(大概是qq2014)&lt;/li&gt;
&lt;li&gt;使用虚拟机创建一个&lt;code&gt;windows&lt;/code&gt;主机从而安装&lt;code&gt;qq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;deepin&lt;/code&gt;系统下的qq&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell脚本4-grep的使用</title>
    <link href="http://zoomdong.site/2019/09/02/shell-4/"/>
    <id>http://zoomdong.site/2019/09/02/shell-4/</id>
    <published>2019-09-02T06:28:03.000Z</published>
    <updated>2019-09-02T06:29:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="grep和egrep"><a href="#grep和egrep" class="headerlink" title="grep和egrep"></a>grep和egrep</h2><p>这两个命令的作用都是一个过滤器的作用，他们的本质上都是来进行一个文本的过滤，我们一般使用比较多的是<code>grep</code>命令。</p><h3 id="grep-的语法格式"><a href="#grep-的语法格式" class="headerlink" title="grep 的语法格式"></a>grep 的语法格式</h3><ul><li>第一种格式:<code>grep [option][pattern][file1,file2,...]</code></li><li>第二种格式: <code>command | grep [option][pattren]</code></li></ul><p>第一种是在文件里面进行一个操作，第二种是在某个执行某个命令之后去再次对执行这个命令的结果去进行一个<code>grep</code>操作。</p><a id="more"></a><h3 id="grep-参数"><a href="#grep-参数" class="headerlink" title="grep 参数"></a>grep 参数</h3><table><thead><tr><th>选项</th><th>含义   </th></tr></thead><tbody><tr><td><code>-v</code></td><td>不显示匹配行信息 </td></tr><tr><td><code>-i</code></td><td>搜索时忽略大小写(是否需要精确匹配)  </td></tr><tr><td><code>-n</code></td><td>显示行号 </td></tr><tr><td><code>-r</code></td><td>递归搜索 </td></tr><tr><td><code>-E</code></td><td>支持拓展的正则表达式 </td></tr><tr><td><code>-F</code></td><td>不按正则表达式，按照字符串字面意思匹配 </td></tr></tbody></table><p>上面这些选项都是一些比较常用的，使用的非常多 = =.</p><p>例如，我们有一个去一个文件里面找<code>js</code>字符相关的东西。</p><p>新建一个文件名字叫做<code>file</code></p><p>里面放上这样的一些内容:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">I love js</span><br><span class="line">I LOVE JS</span><br><span class="line">JSjs</span><br><span class="line">looove</span><br></pre></td></tr></table></figure><p><code>grep js file</code><br>假设他的输出结果是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love js</span><br><span class="line">JSjs</span><br></pre></td></tr></table></figure></p><p><code>grep -v js file</code>，这个命令会过滤掉匹配的结果:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I LOVE JS</span><br><span class="line">looove</span><br></pre></td></tr></table></figure></p><p>由于这种情况下是会考虑到大小写的，所以我们需要使用<code>i</code> 这个参数来将大小写进行一次忽略操作:<br><code>grep -vi js file</code><br>这样输出的结果便会彻底没有<code>js</code>相关的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">looove</span><br></pre></td></tr></table></figure><p><code>grep -ni js file</code></p><p>这个时候便会输出找到的字符串的行号:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1:I love js</span><br><span class="line">2:I LOVE JS</span><br><span class="line">3:JSjs</span><br></pre></td></tr></table></figure></p><p><code>grep -n man /etc/man_db.conf</code></p><p>这样他会在这个文件中找到所有有<code>man</code>的行的行号。</p><p><code>grep &quot;js&quot; file</code></p><p>输出结果为(这里就只会去匹配<code>js</code>这个字符串):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I love js</span><br><span class="line">JSjs</span><br></pre></td></tr></table></figure></p><p>这里我们可以是用拓展的正则表达式来去进行更多的匹配</p><p><code>grep &quot;js.*&quot; file</code> 这样就可以去匹配更多的字符表达式。</p><p><code>grep &quot;js|JS&quot; file</code> 这样也是一个标准的拓展正则表达式符号。</p><p>如果要去支持上面这种有拓展正则表达式符号的正则表达式，我们需要在<code>grep</code>的命令里面加入<code>-E</code></p><p>这样我们可以找到既包含小写<code>js</code>也可以找到包含大写<code>JS</code>的字符串。</p><p><code>grep &quot;js.*&quot; file</code>　在这种情况下我们是按照正则表达式的方式去匹配，可是如果我们的文本里面的确有<code>js.*</code> 这个字符串，我们需要去匹配到这个字符串，我们就需要使用<code>grep &quot;js.*&quot; -F file</code></p><p><code>grep -r love</code> 这个会在当前目录下里面的所有文件里面去找有<code>love</code>这个字符串的文件，并且输出相应的文件名，以及对应匹配到的字符串的行号。</p><p><code>egrep</code>的作用相当于和<code>grep -E</code>的作用是一样的(默认支持了拓展的正则表达式功能而已)。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;grep和egrep&quot;&gt;&lt;a href=&quot;#grep和egrep&quot; class=&quot;headerlink&quot; title=&quot;grep和egrep&quot;&gt;&lt;/a&gt;grep和egrep&lt;/h2&gt;&lt;p&gt;这两个命令的作用都是一个过滤器的作用，他们的本质上都是来进行一个文本的过滤，我们一般使用比较多的是&lt;code&gt;grep&lt;/code&gt;命令。&lt;/p&gt;
&lt;h3 id=&quot;grep-的语法格式&quot;&gt;&lt;a href=&quot;#grep-的语法格式&quot; class=&quot;headerlink&quot; title=&quot;grep 的语法格式&quot;&gt;&lt;/a&gt;grep 的语法格式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;第一种格式:&lt;code&gt;grep [option][pattern][file1,file2,...]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第二种格式: &lt;code&gt;command | grep [option][pattren]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种是在文件里面进行一个操作，第二种是在某个执行某个命令之后去再次对执行这个命令的结果去进行一个&lt;code&gt;grep&lt;/code&gt;操作。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell脚本3-find使用</title>
    <link href="http://zoomdong.site/2019/08/27/shell-3/"/>
    <id>http://zoomdong.site/2019/08/27/shell-3/</id>
    <published>2019-08-26T19:50:46.000Z</published>
    <updated>2019-09-02T06:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件查找的命令–find"><a href="#文件查找的命令–find" class="headerlink" title="文件查找的命令–find"></a>文件查找的命令–find</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法格式   find [路径][选项][操作]</span><br></pre></td></tr></table></figure><p>选项参数的对照表</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-name</code></td><td>根据文件名查找</td></tr><tr><td><code>-perm</code></td><td>根据文件权限查找</td></tr><tr><td><code>-prune</code></td><td>排除某些查找的目录</td></tr><tr><td><code>-user</code></td><td>根据文件属主查找</td></tr><tr><td><code>-group</code></td><td>根据文件属组查找</td></tr><tr><td><code>-mtime +n</code></td><td>根据文件更改时间查找</td></tr><tr><td><code>-nogroup</code></td><td>查找无有效属组的文件</td></tr><tr><td><code>-nouser</code></td><td>查找无有效属主的文件</td></tr><tr><td><code>-newer file1 !file2</code></td><td>查找更改时间比file1新但是比file2旧IDE文件</td></tr><tr><td><code>-type</code></td><td>按文件类型查找</td></tr><tr><td><code>-size -n +n</code></td><td>按文件大小查找</td></tr><tr><td><code>-mindepth n</code></td><td>从n级子目录开始搜索</td></tr><tr><td><code>-maxdepth n</code></td><td>做多搜索到n级子目录</td></tr></tbody></table><a id="more"></a><p>常用选项:</p><p>-name<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找etc目录下所有以.conf结尾的文件</span></span><br><span class="line">find /etc -name <span class="string">"*.conf"</span></span><br></pre></td></tr></table></figure></p><p><code>-name</code> 这个参数是能够区分大小写的:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到目录下所有名字为aa的文件，但是AA不会去找</span></span><br><span class="line">find ./ -name <span class="string">"aa"</span></span><br></pre></td></tr></table></figure></p><p>如果想忽略大小写的话，可以使用<code>-iname</code>:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find ./ -iname <span class="string">"aa"</span></span><br><span class="line"><span class="comment"># 这样 aa AA Aa aA都会被查找出来</span></span><br></pre></td></tr></table></figure></p><p><code>-user</code> 和 <code>-group</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找属主为hdfs的所有文件</span></span><br><span class="line">find -user hdfs</span><br><span class="line"><span class="comment"># 查找属组为yarn的所有文件</span></span><br><span class="line">find -group yarn</span><br></pre></td></tr></table></figure><p><code>-type</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件 f</span></span><br><span class="line">find . -<span class="built_in">type</span> f</span><br><span class="line"><span class="comment"># 目录 d</span></span><br><span class="line">find . -<span class="built_in">type</span> d</span><br><span class="line"><span class="comment"># 字符设备文件 c</span></span><br><span class="line">find . -<span class="built_in">type</span> c</span><br><span class="line"><span class="comment"># 块设备文件 b</span></span><br><span class="line">find . -<span class="built_in">type</span> b</span><br><span class="line"><span class="comment"># 链接设备文件 l</span></span><br><span class="line">find . -<span class="built_in">type</span> l</span><br><span class="line"><span class="comment"># 管道文件 p</span></span><br><span class="line">find . -<span class="built_in">type</span> p</span><br></pre></td></tr></table></figure></p><p><code>-size</code> 根据文件的大小来搜索文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在etc目录下找大于1Mb的文件</span></span><br><span class="line">find /etc -size +1M</span><br><span class="line"><span class="comment"># 小于1MB</span></span><br><span class="line">find /etc -size -1M</span><br><span class="line"><span class="comment"># shell 里面不支持找一定大小的文件</span></span><br></pre></td></tr></table></figure></p><p><code>-mtime</code> 找n天之类修改的文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex1 查找/etc目录下5天之类修改且以conf结尾的文件 </span></span><br><span class="line">find /etc -mtime -5 -name <span class="string">'*.conf'</span></span><br><span class="line"><span class="comment"># ex2 查找/etc目录下10天之前修改且属主为root的文件</span></span><br><span class="line">find /etc -mtime +10 -user root</span><br></pre></td></tr></table></figure></p><p><code>-mmin</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex1 查找/etc目录下30min之前修改的文件</span></span><br><span class="line">find /etc -mmin +30 -<span class="built_in">type</span> f</span><br><span class="line"><span class="comment"># ex2 查找/etc目录下30min之内修改的目录</span></span><br><span class="line">find /etc -mmin -30 -<span class="built_in">type</span> d</span><br></pre></td></tr></table></figure></p><p><code>-mindepth</code> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex1 在/etc目录下的三级子目录下开始搜索</span></span><br><span class="line">find /etc -mindepth 3</span><br><span class="line"><span class="comment"># ex2 在/etc目录下寻找符合条件的文件，但是最多搜索到第3级目录</span></span><br><span class="line">find /etc -maxdepth 3 -<span class="built_in">type</span> f</span><br></pre></td></tr></table></figure><p><strong>实际使用过程中用到最多的是<code>-mtime</code> 或者 <code>-name</code></strong></p><p>当我们查找到某些特定的文件之后，我们对这些文件执行一些特别的操作<br>操作:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印输出，这就是个默认的指令(每次查找完都会输出)</span></span><br><span class="line">- <span class="built_in">print</span></span><br><span class="line"><span class="comment"># 对搜索到的文件执行特定的操作,格式为-exec 'command' &#123;&#125; \;</span></span><br><span class="line">- <span class="built_in">exec</span> </span><br><span class="line"><span class="comment"># ex1　搜索etc目录下以.conf为结尾的文件，且大于10k,然后将其删除</span></span><br><span class="line"><span class="comment"># 在执行这个操作的时候可以将根目录下的/etc目录复制到一个其他的目录里面去</span></span><br><span class="line">mkdir <span class="built_in">test</span> &amp;&amp; <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 将根目录下的/etc文件拷贝过来</span></span><br><span class="line">cp -r /etc ./</span><br><span class="line">find /etc/ -<span class="built_in">type</span> f -name <span class="string">'*.conf'</span> -size +10k -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br><span class="line"><span class="comment"># ex2 将/var/log/目录下以log为结尾的文件，且更改时间在7天以上的删除</span></span><br><span class="line">find /var/<span class="built_in">log</span> -name <span class="string">'*.log'</span> -mtime +7 -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br><span class="line"><span class="comment"># ex3 搜索条件和1一样，只是不删除，而是将其复制到/root/conf目录下</span></span><br><span class="line">find ./etc/ -size +10k -<span class="built_in">type</span> f -name <span class="string">'*.conf'</span> -<span class="built_in">exec</span> cp &#123;&#125; /root/conf \;</span><br></pre></td></tr></table></figure></p><p>逻辑运算符:</p><p><code>-a</code> 与</p><p><code>-o</code> 或<br><code>-not | !</code> 非<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ex1 查找当前目录下，属主不是hdfs的所有文件</span></span><br><span class="line">find . -not -user hdfs | find . ! -user hdfs </span><br><span class="line"><span class="comment"># ex2 查找当前目录下，属主属于hdfs,且大小大于300字节的文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f -a -user hdfs -a -size +300c</span><br><span class="line"><span class="comment"># ex3 查找当前目录下的属主为hdfs或者以xml为结尾的普通文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f -a \( -user hdfs -o -name <span class="string">'*.xml'</span> \ )</span><br></pre></td></tr></table></figure></p><h2 id="find-locate-whereis和which总结及使用场景分析"><a href="#find-locate-whereis和which总结及使用场景分析" class="headerlink" title="find,locate,whereis和which总结及使用场景分析"></a>find,locate,whereis和which总结及使用场景分析</h2><h3 id="locate命令介绍"><a href="#locate命令介绍" class="headerlink" title="locate命令介绍"></a>locate命令介绍</h3><ul><li>文件查找命令，所属软件包mlocate</li><li>不同于find命令是在整块磁盘里面搜索，locate命令在数据库文件中查找</li><li>find是默认全部匹配，locate则是默认部分撇撇</li></ul><h3 id="updatedb命令"><a href="#updatedb命令" class="headerlink" title="updatedb命令"></a>updatedb命令</h3><ul><li>用户更新<code>/var/lib/mlocate/mlocate.db</code></li><li>所使用配置文件为<code>/etc/updatedb.conf</code></li><li>改命令在后台<code>cron</code>计划任务中定期执行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">find /etc/ -name <span class="string">'my.cnf'</span></span><br><span class="line"><span class="comment"># 只要有一部分名称匹配就会给你全部搜索出来</span></span><br><span class="line">locate my.cnf</span><br></pre></td></tr></table></figure><p>这两者查找的结果是不同的，一个是找某个目录下，一个是全局下找。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这个文件是一个定时的监察命令</span></span><br><span class="line">ll /var/lib/mlocate/mlocate.db</span><br><span class="line"><span class="comment"># 通过这个命令我们可以看出它的修改时间</span></span><br><span class="line">ll /var/lib/mlocate/mlocate.db -h</span><br><span class="line">touch abc.txt &amp;&amp; touch def.txt</span><br><span class="line"><span class="comment"># 这个时候去找的话，是找不到上面touch的文件的.</span></span><br><span class="line">locate abc.txt</span><br><span class="line"><span class="comment"># 我们要用update命令更新一下,直接去更新/var/lib/mlocate/mlocate.db</span></span><br><span class="line">updatedb</span><br><span class="line"><span class="comment"># 它执行的比较慢，因为它会对所有的文件做一个遍历 ,更新完成之后再做一个时间比对</span></span><br><span class="line">ll /var/lib/mlocate/mlocate.db -h</span><br><span class="line"><span class="comment"># 然后再去做一个查找,这个时候就会查找到了</span></span><br><span class="line">locate abc.txt</span><br></pre></td></tr></table></figure><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td><code>-b</code></td><td>只返回二进制文件</td></tr><tr><td><code>-m</code></td><td>只返回帮助文档文件</td></tr><tr><td><code>-s</code></td><td>只返回源代码文件</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">whereis mysql</span><br><span class="line"><span class="comment"># 它会找到mysql下的所有的二进制文件</span></span><br><span class="line">whereis -b mysql</span><br><span class="line"><span class="comment"># 帮助文档信息</span></span><br><span class="line">whereis -m mysql</span><br></pre></td></tr></table></figure><h3 id="which"><a href="#which" class="headerlink" title="which"></a>which</h3><ul><li>作用: 仅查找二进制程序文件</li></ul><p>-b 只返回二进制文件</p><p>which mysql</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;文件查找的命令–find&quot;&gt;&lt;a href=&quot;#文件查找的命令–find&quot; class=&quot;headerlink&quot; title=&quot;文件查找的命令–find&quot;&gt;&lt;/a&gt;文件查找的命令–find&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;语法格式   find [路径][选项][操作]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;选项参数的对照表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据文件名查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-perm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据文件权限查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-prune&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;排除某些查找的目录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-user&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据文件属主查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-group&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据文件属组查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-mtime +n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据文件更改时间查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-nogroup&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找无有效属组的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-nouser&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找无有效属主的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-newer file1 !file2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找更改时间比file1新但是比file2旧IDE文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按文件类型查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-size -n +n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按文件大小查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-mindepth n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从n级子目录开始搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-maxdepth n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;做多搜索到n级子目录&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
